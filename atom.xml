<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rongjia Liu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackliu234.com/"/>
  <updated>2019-09-23T14:30:47.832Z</updated>
  <id>http://jackliu234.com/</id>
  
  <author>
    <name>Rongjia Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A-Mazing</title>
    <link href="http://jackliu234.com/2019/09/amazing/"/>
    <id>http://jackliu234.com/2019/09/amazing/</id>
    <published>2019-09-23T04:00:00.000Z</published>
    <updated>2019-09-23T14:30:47.832Z</updated>
    
    <content type="html"><![CDATA[<p>Use the arrow keys to move through the maze; you can also refresh the page to see a different maze. </p><p><canvas id="mycanvas" width="500px" height="500px"></canvas></p><script type="text/javascript">    var aa = 14;    var chess = document.getElementById("mycanvas");    var context = chess.getContext('2d');    //  var context2 = chess.getContext('2d');    //      context.strokeStyle = 'yellow';    var tree = []; //存放是否联通    var isling = []; //判断是否相连    for (var i = 0; i < aa; i++) {        tree[i] = [];        for (var j = 0; j < aa; j++) {            tree[i][j] = -1; //初始值为0        }    }    for (var i = 0; i < aa * aa; i++) {        isling[i] = [];        for (var j = 0; j < aa * aa; j++) {            isling[i][j] = -1; //初始值为0        }    }    function drawChessBoard() { //绘画        for (var i = 0; i < aa + 1; i++) {            context.strokeStyle = 'gray'; //可选区域            context.moveTo(15 + i * 30, 15); //垂直方向画15根线，相距30px;            context.lineTo(15 + i * 30, 15 + 30 * aa);            context.stroke();            context.moveTo(15, 15 + i * 30); //水平方向画15根线，相距30px;棋盘为14*14；            context.lineTo(15 + 30 * aa, 15 + i * 30);            context.stroke();        }    }    drawChessBoard(); //绘制棋盘    //      var mymap=new Array(36);    //      for(var i=0;i<36;i++)    //     {mymap[i]=-1;}    function getnei(a) //获得邻居号  random    {        var x = parseInt(a / aa); //要精确成整数        var y = a % aa;        var mynei = new Array(); //储存邻居        if (x - 1 >= 0) {            mynei.push((x - 1) * aa + y);        } //上节点        if (x + 1 < 14) {            mynei.push((x + 1) * aa + y);        } //下节点        if (y + 1 < 14) {            mynei.push(x * aa + y + 1);        } //有节点        if (y - 1 >= 0) {            mynei.push(x * aa + y - 1);        } //下节点        var ran = parseInt(Math.random() * mynei.length);        return mynei[ran];    }    function search(a) //找到根节点    {        if (tree[parseInt(a / aa)][a % aa] > 0) //说明是子节点        {            return search(tree[parseInt(a / aa)][a % aa]); //不能压缩路径路径压缩        } else            return a;    }    function value(a) //找到树的大小    {        if (tree[parseInt(a / aa)][a % aa] > 0) //说明是子节点        {            return tree[parseInt(a / aa)][a % aa] = value(tree[parseInt(a / aa)][a % aa]); //不能路径压缩        } else            return -tree[parseInt(a / aa)][a % aa];    }    function union(a, b) //合并    {        var a1 = search(a); //a根        var b1 = search(b); //b根        if (a1 == b1) {} else {            if (tree[parseInt(a1 / aa)][a1 % aa] < tree[parseInt(b1 / aa)][b1 % aa]) //这个是负数()，为了简单减少计算，不在调用value函数            {                tree[parseInt(a1 / aa)][a1 % aa] += tree[parseInt(b1 / aa)][b1 % aa]; //个数相加  注意是负数相加                tree[parseInt(b1 / aa)][b1 % aa] = a1; //b树成为a树的子树，b的根b1直接指向a；            } else {                tree[parseInt(b1 / aa)][b1 % aa] += tree[parseInt(a1 / aa)][a1 % aa];                tree[parseInt(a1 / aa)][a1 % aa] = b1; //a所在树成为b所在树的子树            }        }    }    function drawline(a, b) //划线，要判断是上下还是左右    {        var x1 = parseInt(a / aa);        var y1 = a % aa;        var x2 = parseInt(b / aa);        var y2 = b % aa;        var x3 = (x1 + x2) / 2;        var y3 = (y1 + y2) / 2;        if (x1 - x2 == 1 || x1 - x2 == -1) //左右方向的点  需要上下划线        {            //alert(x1);            //  context.beginPath();            context.strokeStyle = 'white';            //    context.moveTo(30+x3*30,y3*30+15);//            //   context.lineTo(30+x3*30,y3*30+45);            context.clearRect(29 + x3 * 30, y3 * 30 + 16, 2, 28);            //    context.stroke();        } else {            //   context.beginPath();            context.strokeStyle = 'white';            //  context.moveTo(x3*30+15,30+y3*30);//            //    context.lineTo(45+x3*30,30+y3*30);            context.clearRect(x3 * 30 + 16, 29 + y3 * 30, 28, 2);            //      context.stroke();        }    }    while (search(0) != search(aa * aa - 1)) //主要思路    {        var num = parseInt(Math.random() * aa * aa); //产生一个小于196的随机数        var neihbour = getnei(num);        if (search(num) == search(neihbour)) {            continue;        } else //不在一个上        {            isling[num][neihbour] = 1;            isling[neihbour][num] = 1;            drawline(num, neihbour); //划线            union(num, neihbour);        }    }    var a = aa * 30 - 10,        b = aa * 30 - 10;    var x = 20,        y = 20;    function load() {        var canvas = document.getElementById("mycanvas");        Context = canvas.getContext("2d");        Context.fillStyle = "blue";        Context.fillRect(x, y, 20, 20);        context.fillStyle = "red";        context.fillRect(a, b, 20, 20);        Context.fillStyle = "blue";        canvas.addEventListener('keydown', doKeyDown, true);        canvas.focus();        window.addEventListener('keydown', doKeyDown, true);    }    load();    function doKeyDown(e) {        //alert(x+" "+y);        // console.log(x+" "+y);测试        var keyID = e.keyCode ? e.keyCode : e.which; //获取按键的Unicode代码值        if (i == 1) {            if (keyID === 38 || keyID === 87) { // W键以及上键的移动方向                if (y - 30 < 0) {} else if (isling[(x - 20) / 30 * aa + (y - 20) / 30][((x - 20) / 30) * aa + (y - 20) / 30 - 1] != 1) {} else {                    clearCanvas();                    y = y - 30;                    Context.fillRect(x, y, 20, 20);                    e.preventDefault();                    gameover();                    show();                }            }            if (keyID === 39 || keyID === 68) { // D键以及you键的移动方向                if (x + 30 > 15 + 30 * aa) {} else if (isling[(x - 20) / 30 * aa + (y - 20) / 30][((x - 20) / 30) * aa + (y - 20) / 30 + aa] != 1) {} else {                    clearCanvas();                    x = x + 30;                    Context.fillRect(x, y, 20, 20);                    e.preventDefault();                    gameover();                    show();                }            }            if (keyID === 40 || keyID === 83) { // S键以及下键的移动方向                if (y + 30 > 15 + 30 * aa) {} else if (isling[(x - 20) / 30 * aa + (y - 20) / 30][((x - 20) / 30) * aa + (y - 20) / 30 + 1] != 1) {} else {                    clearCanvas();                    y = y + 30;                    Context.fillRect(x, y, 20, 20);                    e.preventDefault();                    gameover();                    show();                }            }            if (keyID === 37 || keyID === 65) { // A键以及zuo向                if (x - 30 < 0) {} else if (isling[(x - 20) / 30 * aa + (y - 20) / 30][((x - 20) / 30) * aa + (y - 20) / 30 - aa] != 1) {} else {                    clearCanvas();                    x = x - 30;                    Context.fillRect(x, y, 20, 20);                    e.preventDefault();                    gameover();                    show();                }            }        }    }    function clearCanvas() { //清除之间的痕迹        Context.clearRect(x - 2, y - 2, 25, 25)    }    var end = false;    function gameover() {        if (x >= a && y >= b) {            end = true;        }    }    function show() {        if (end == true) {            // stop();            // aa = aa + 2;            if (aa == 20) {                rangeinsert();                stop();            } else {                end = false;                Context.clearRect(0, 0, 600, 600);                for (var i = 0; i < aa; i++) {                    tree[i] = [];                    for (var j = 0; j < aa; j++) {                        tree[i][j] = -1; //初始值为0                    }                }                for (var i = 0; i < aa * aa; i++) {                    isling[i] = [];                    for (var j = 0; j < aa * aa; j++) {                        isling[i][j] = -1; //初始值为0                    }                }                drawChessBoard(); //绘制棋盘                while (search(0) != search(aa * aa - 1)) //主要思路                {                    var num = parseInt(Math.random() * aa * aa); //产生一个小于196的随机数                    var neihbour = getnei(num);                    if (search(num) == search(neihbour)) {                        continue;                    } else //不在一个上                    {                        isling[num][neihbour] = 1;                        isling[neihbour][num] = 1;                        drawline(num, neihbour); //划线                        union(num, neihbour);                    }                }                a = aa * 30 - 10, b = aa * 30 - 10;                x = 20, y = 20;                load();                // start();            }            // alert("游戏成功！共用时："+str);        }    }    var h = m = s = ms = 0; //定义时，分，秒，毫秒并初始化为0；    var time = 0;    var i = 0;    function timer() { //定义计时函数        ms = ms + 50; //毫秒        if (ms >= 1000) {            ms = 0;            s = s + 1; //秒        }        if (s >= 60) {            s = 0;            m = m + 1; //分钟        }        if (m >= 60) {            m = 0;            h = h + 1; //小时        }        str = toDub(h) + "时" + toDub(m) + "分" + toDub(s) + "秒" + toDubms(ms) + "毫秒";        mytime = document.getElementById('mytime');        mytime.innerHTML = str;        // document.getElementById('mytime').innerHTML=h+"时"+m+"分"+s+"秒"+ms+"毫秒";    }    function reset() { //重置        i = 1;        time = setInterval(timer, 50);    }    function start() { //开始        i = 1;        time = setInterval(timer, 50);    }    function stop() { //暂停        i = 0;        clearInterval(time);    }    function toDub(n) { //补0操作        if (n < 10) {            return "0" + n;        } else {            return "" + n;        }    }    function toDubms(n) { //给毫秒补0操作        if (n < 10) {            return "00" + n;        } else {            return "0" + n;        }    }    function renovates() {        document.location.reload();    }    var req; //创建对象    function range() {        var url = ""; //ajax        //创建一个XMLHttpRequest对象req        if (window.XMLHttpRequest) {            //IE7, Firefox, Opera支持            req = new XMLHttpRequest();        } else if (window.ActiveXObject) {            //IE5,IE6支持            req = new ActiveXObject("Microsoft.XMLHTTP");        }        req.open("GET", url, true);        //onreadystatechange属性存有处理服务器响应的函数,有5个取值分别代表不同状态        req.onreadystatechange = callback;        //send函数发送请求        req.send(null);    }    function rangeinsert() {        var url = "insertrange?id=" + (m * 60 + s);        //创建一个XMLHttpRequest对象req        if (window.XMLHttpRequest) {            //IE7, Firefox, Opera支持            req = new XMLHttpRequest();        } else if (window.ActiveXObject) {            //IE5,IE6支持            req = new ActiveXObject("Microsoft.XMLHTTP");        }        req.open("GET", url, true);        //onreadystatechange属性存有处理服务器响应的函数,有5个取值分别代表不同状态        req.onreadystatechange = callback;        //send函数发送请求        req.send(null);    }    function callback() {        if (req.readyState == 4 && req.status == 200) {            var check = req.responseText;            alert(check);        }    }    start()</script><p>Reference:</p><ul><li><a href="https://juejin.im/post/5d8842b3f265da03c8155fd4" target="_blank" rel="noopener">https://juejin.im/post/5d8842b3f265da03c8155fd4</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Use the arrow keys to move through the maze; you can also refresh the page to see a different maze. &lt;/p&gt;
&lt;p&gt;&lt;canvas id=&quot;mycanvas&quot; width=&quot;
      
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://jackliu234.com/2019/09/europe/"/>
    <id>http://jackliu234.com/2019/09/europe/</id>
    <published>2019-09-21T04:00:00.000Z</published>
    <updated>2019-09-23T10:27:31.827Z</updated>
    
    <content type="html"><![CDATA[<p>今天刚结束欧洲的旅程，十七天，五个国家，九个城市。现在本人正坐在从阿姆斯特丹回纽约的飞机上，由于不管饭，饥寒交迫，特写此文以分散一下注意力。欧洲人的生活很是安逸，一杯咖啡，一张报纸便可以在咖啡厅外坐上一个早晨。每一个城市都有鲜明的性格和独特的故事。原本我想写一篇游记，记录一路上的旅程，但写了一半却又很不满意。欧洲是一个要静下心来感受的地方，看到的景象是需要和一些东西结合起来，才更有被记录下来的意义。</p><p>在欧洲一路过来，去了很多博物馆，看了很多名作，但最终在阿姆斯特丹的梵高博物馆里，才让我第一次感受到了到了一种艺术的力量。作为一种载体，一幅画能够通过画家的对世界的感受，从而改变人们对事物的认知。比如宗教艺术，把一维的物体（圣经上的字句）通过画家的想象从二维中（绘画）体现出来。某种程度上，这和漫威的电影很是相似，它把二维的漫画，通过导演的安排从三维的电影中表达出来，让人们对其人物有了更形象具体的感受。</p><p>一开始我一直很喜欢十八十九世纪现实主义的画作，油画家们用精确的笔触，把人物和风景如实生动地展现在画布上。但从另一个角度看来，这其实是一种降维的艺术，它把三维的物体，在二维上表现出来。在没有照相机的那个时代，这是人们可以精确记录世界模样的方法，但作为观众，除了惊叹于其绘画技术的精湛，和亲眼看到到画家们描绘的美好景象，感受不到一些其他的东西。</p><p>印象画派的出现改变了这一切。十九世纪后期，法国的印象派画家们如莫奈，早已在沙龙中举办了一次次的印象画展。而那时梵高才刚刚决定投身艺术，在他短暂的一生中，只有最后10年在作画。最开始梵高去了巴黎，由于请模特太贵，只能通过画自画像来练习，后来梵高离开巴黎，定定居在法国南部的一个小镇，一心创作农村生活的作品。</p><p>在看梵高的画的时候，我前所未有得感受到他的情感。梵高的色彩，笔触，都能让你体会到他想强烈表达的意愿。他用他的方式，描绘出他眼中的世界，描绘出他认为合适的色彩，和他认为精彩的纹路。画中的物体，也许轮廓不够精美，也许线条曲折，也许连阴影都没有加上，但其实都已经不重要。一幅画，更可贵的是能让观众愉悦，让情感浮现，让思绪跳动。在精神病院期间，梵高隔着窗子的铁栏，用笔画出了窗外金黄的麦田，风中的麦子像水波一样飘漾，浅蓝天空在他的眼里泛出了淡淡的绿光。当天晚上，我看了Doctor Who的一集讲梵高的，主角回到了梵高的年代，他看到了梵高的挣扎和孤独，但他更看到了梵高对艺术的执著和热爱。的确，只有自己对一件事物足够热爱，才能够创看到别人看不到的世界。</p><p><img src="europe-Vincent_van_Gogh_-_Wheatfield_with_a_reaper_-_Google_Art_Project.jpg" alt="Vincent_van_Gogh_-_Wheatfield_with_a_reaper_-_Google_Art_Project.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天刚结束欧洲的旅程，十七天，五个国家，九个城市。现在本人正坐在从阿姆斯特丹回纽约的飞机上，由于不管饭，饥寒交迫，特写此文以分散一下注意力。欧洲人的生活很是安逸，一杯咖啡，一张报纸便可以在咖啡厅外坐上一个早晨。每一个城市都有鲜明的性格和独特的故事。原本我想写一篇游记，记录一
      
    
    </summary>
    
    
    
      <category term="Travel" scheme="http://jackliu234.com/tags/Travel/"/>
    
  </entry>
  
  <entry>
    <title>Writing CLI with Node</title>
    <link href="http://jackliu234.com/2019/09/generator/"/>
    <id>http://jackliu234.com/2019/09/generator/</id>
    <published>2019-09-15T04:00:00.000Z</published>
    <updated>2019-09-17T16:40:18.378Z</updated>
    
    <content type="html"><![CDATA[<p><code>Node.js</code> is an open-source <code>javascript</code> runtime built that execute Javascript code outside of a traditional browser.</p><blockquote><p>JavaScript is a high-level, interpreted scripting language … JavaScript has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions. — Wikipedia</p></blockquote><p>In this post I will demonstrate how to create simple <code>CLI</code> (command line interface) applications that would generate random programmer jokes.</p><h1 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h1><p>First, use terminal command <code>brew install node</code> to install both <code>Node.js</code> and <code>NPM</code> on your computer.</p><ul><li><a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a> is a ruby-based package management system that simplifies the installation of software on Linux computers.</li><li><a href="https://www.npmjs.com" target="_blank" rel="noopener">NPM</a>, or Node Package Manager, is the default package manager for Node.js.</li></ul><p>Now use npm to install the <code>commander</code> package on your computer. The <code>-g</code> argument makes sure that the package globally accessible.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commander -g</span><br></pre></td></tr></table></figure></p><h1 id="Set-Up"><a href="#Set-Up" class="headerlink" title="Set Up"></a>Set Up</h1><p>Create a new directory for your CLI.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir generator &amp;&amp; <span class="built_in">cd</span> generator &amp;&amp; npm init</span><br></pre></td></tr></table></figure></p><p>The terminal will prompt the creation of <code>package.json</code>, which contains all relevant information about this application.</p><blockquote><p>JSON, or JavaScript Object Notation, is an open-standard file format that uses human-readable text to transmit data objects consisting of attribute–value pairs and array data types.  — Wikipedia</p></blockquote><p>Opening up the json file and add in the <code>&quot;bin&quot;</code> category. This will later allow the keyword <code>generator</code> to be used in terminal to directly execute the application.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"generator"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"generator"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"generator"</span>: <span class="string">"bin/generator.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Rongjia Liu &lt;jackliu234@gmail.com&gt;"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Now create a <code>bin</code> folder under the new directory just created, which will contain the javascript executable. The <code>data</code> folder contains the programmer jokes in txt format.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir bin &amp;&amp; mkdir data</span><br></pre></td></tr></table></figure></p><p>Create a javascript file <code>generator.js</code> as follow. Save under the bin directory.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cmd     = <span class="built_in">require</span>(<span class="string">'/usr/local/lib/node_modules/commander'</span>);</span><br><span class="line"><span class="keyword">var</span> appInfo = <span class="built_in">require</span>(<span class="string">'../package.json'</span>);</span><br><span class="line"><span class="keyword">var</span> fs      = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path    = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zh = fs.readFileSync(path.join(__dirname, <span class="string">'../data/jokes-zh.txt'</span>)).toString().split(<span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">var</span> en = fs.readFileSync(path.join(__dirname, <span class="string">'../data/jokes-en.txt'</span>)).toString().split(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param type</span></span><br><span class="line"><span class="comment"> * @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generator</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'zh'</span>:</span><br><span class="line">            <span class="keyword">return</span> zh[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * zh.length)];</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'en'</span>:</span><br><span class="line">            <span class="keyword">return</span> en[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * en.length)];</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> zh[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * zh.length)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd</span><br><span class="line">    .version(appInfo.version)</span><br><span class="line">    .option(<span class="string">'-t, --type &lt;value&gt;'</span>, <span class="string">'[zh|en]'</span>, <span class="string">'zh'</span>, /^(zh|en)$/i)</span><br><span class="line">    .on(<span class="string">'--help'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;).parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generator(cmd.type));</span><br></pre></td></tr></table></figure></p><p>Lastly, install the package locally on your computer.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install . -g</span><br></pre></td></tr></table></figure></p><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>Now you can type in the <code>generator</code> keyword in terminal to generate random jokes.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ generator</span><br><span class="line"></span><br><span class="line">    阿里小米皆自主，百度排名最公平；</span><br><span class="line">    京东全网最低价，当当爱国很理性；</span><br><span class="line">    用户体验看新浪，网易从来少愤青；</span><br><span class="line">    豆瓣从来不约炮，人人分享高水平；</span><br><span class="line">    从不抄袭数腾讯，开放安全三六零。</span><br></pre></td></tr></table></figure></p><p>The default language is Chinese (ZH). Add an argument <code>-t en</code> will display English jokes.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ generator -t en</span><br><span class="line">The box said <span class="string">'Requires Windows 95 or better'</span>. So I installed LINUX</span><br></pre></td></tr></table></figure></p><p>Display the help menu, which is generated from the <code>commander.js</code> installed in the beginning. It can be customized through the <code>cmd</code> section of the <code>generator.js</code> above.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ generator --<span class="built_in">help</span></span><br><span class="line">Usage: generator [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version       output the version number</span><br><span class="line">  -t, --<span class="built_in">type</span> &lt;value&gt;  [zh|en] (default: <span class="string">"zh"</span>)</span><br><span class="line">  -h, --<span class="built_in">help</span>          output usage information</span><br></pre></td></tr></table></figure></p><p><br><br><br></p><p>Reference</p><ul><li><a href="https://blog.biezhi.me/2017/08/lets-30-minutes-write-a-node-cli-application.html" target="_blank" rel="noopener">https://blog.biezhi.me/2017/08/lets-30-minutes-write-a-node-cli-application.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Node.js&lt;/code&gt; is an open-source &lt;code&gt;javascript&lt;/code&gt; runtime built that execute Javascript code outside of a traditional browse
      
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Yosemite</title>
    <link href="http://jackliu234.com/2019/09/yosemite/"/>
    <id>http://jackliu234.com/2019/09/yosemite/</id>
    <published>2019-09-14T04:00:00.000Z</published>
    <updated>2019-09-14T13:52:06.326Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://jackliu234.com/2019/09/yosemite/yosemite-fullsizeoutput_38b9.jpeg"></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://jackliu234.com/2019/09/yosemite/yosemite-fullsizeoutput_38b9.jpeg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Travel" scheme="http://jackliu234.com/categories/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>Understanding Gradient Descent in Neural Network</title>
    <link href="http://jackliu234.com/2019/08/gradient-descent/"/>
    <id>http://jackliu234.com/2019/08/gradient-descent/</id>
    <published>2019-08-16T04:00:00.000Z</published>
    <updated>2019-09-04T19:10:04.641Z</updated>
    
    <content type="html"><![CDATA[<p><code>Gradient Descent</code> is an optimization method used in neural network, where the weight parameters <script type="math/tex">\boldsymbol{w}</script> are updated recursively by subtracting a small percentage <script type="math/tex">\alpha</script> of the gradient of the loss function <script type="math/tex">\nabla \mathcal{L}</script>, in order to minimize the loss function.</p><script type="math/tex; mode=display">\boldsymbol{w}_i = \boldsymbol{w}_{i-1} - \alpha\nabla \mathcal{L}(\boldsymbol{w}_{i-1})</script><a id="more"></a><h1 id="Mathematics"><a href="#Mathematics" class="headerlink" title="Mathematics"></a>Mathematics</h1><p>Let’s prove that the gradient descent method would lead to smaller losses after each step. Without loss of generality, we assume that the initial weight parameter <script type="math/tex">\boldsymbol{w}_0</script> is a two dimensional vector, <script type="math/tex">(x_0, y_0)</script>.</p><p>Given a new vector <script type="math/tex">(x, y)</script> that are close to <script type="math/tex">(x_0, y_0)</script>, the Taylor series expansion of the loss function <script type="math/tex">\mathcal{L}</script> can be approximated by the first-order partial derivatives only:</p><script type="math/tex; mode=display">\begin{align} \mathcal{L}(x, y) &= \mathcal{L}(x_0, y_0) + \dfrac{\partial\mathcal{L}(x_0, y_0)}{\partial x}(x - x_0) + \dfrac{\partial\mathcal{L}(x_0, y_0)}{\partial y}(y - y_0) \\&= \mathcal{L}(x_0, y_0) + \nabla \mathcal{L}(x_0, y_0) \cdot (\Delta x, \Delta y) \end{align}</script><p>Since we would like to find <script type="math/tex">x</script> and <script type="math/tex">y</script> that minimize <script type="math/tex">\mathcal{L}(x, y)</script>, which is the same as minimizing the dot product above, with the constraint that <script type="math/tex">(x, y)</script> having close Eulidean distance to <script type="math/tex">(x_0, y_0)</script> in order to satisfy the Taylor approximation.</p><script type="math/tex; mode=display">|(\Delta x, \Delta y)| \leq \epsilon</script><p>To achieve this we select the vector <script type="math/tex">(x, y)</script> such that:</p><script type="math/tex; mode=display">(\Delta x, \Delta y) = - \alpha \nabla \mathcal{L}(x_0, y_0) \text{, or simply} \\(x, y) = (x_0 - \alpha\cdot\dfrac{\partial\mathcal{L}(x_0, y_0)}{\partial x}, y_0 - \alpha\cdot\dfrac{\partial\mathcal{L}(x_0, y_0)}{\partial y})</script><p>Given an <script type="math/tex">\epsilon</script>, we choose <script type="math/tex">\alpha</script> such that the above constraint is satisfied. The negative sign ensure that the dot product is minimized. We therefore have proved that <script type="math/tex">\mathcal{L}(x, y)</script> will descend at each iteration provided that the loss function is differentiable and a sufficiently small <script type="math/tex">\alpha</script> is used.</p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>Let’s say we have a training set of 4 that maps three binary features to a binary response.  </p><script type="math/tex; mode=display">\begin{bmatrix}    0 & 0 & 1 \\    1 & 1 & 1 \\    1 & 0 & 1 \\    0 & 1 & 1\end{bmatrix} \rightarrow \begin{bmatrix}    0 \\    1 \\    1 \\    0 \\\end{bmatrix}</script><p>We first observe that the first feature has a 100% correlation with the response and can reasonably be used for future predictions. Now we construct a neural network to see if it can capture this relationship. First create a neural network class and randomly initialize three weights between <script type="math/tex">-1</script> and <script type="math/tex">1</script> for each feature.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        np.random.seed(<span class="number">1</span>)</span><br><span class="line">        self.weights = <span class="number">2</span> * np.random.random((<span class="number">3</span>, <span class="number">1</span>)) - <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Define the <code>sigmoid</code> activation function <script type="math/tex">\sigma</script>:</p><script type="math/tex; mode=display">\hat{y} = \sigma(wx) = \dfrac{1}{1 + e^{-wx}}</script><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br></pre></td></tr></table></figure><p>Define the loss function as the mean square error:</p><script type="math/tex; mode=display">\mathcal{L}(w) = (\hat{y} - y)^2</script><p>Calculate the gradient w.r.t. weights <script type="math/tex">w</script>:</p><script type="math/tex; mode=display">\dfrac{\partial \mathcal{L}(w)}{\partial w} = 2(\hat{y} - y)\dfrac{\partial \hat{y}}{\partial w} = 2(\hat{y} - y) \ \hat{y}(1-\hat{y})\cdot x^T</script><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(self, x, y, y_hat)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.dot(x.T, (<span class="number">2</span> * (y_hat - y) * (y_hat * (<span class="number">1</span> - y_hat))))</span><br></pre></td></tr></table></figure><p>Forward and backward propogation.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward_propogation</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    x = inputs.astype(float)</span><br><span class="line">    <span class="keyword">return</span> self.sigmoid(np.dot(x, self.weights))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backward_propogation</span><span class="params">(self, x, y, alpha=<span class="number">1</span>, iterations=<span class="number">10000</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(iterations):</span><br><span class="line">        y_hat = self.forward_propogation(x)</span><br><span class="line">        self.weights -= alpha * self.gradient(x, y, y_hat)</span><br></pre></td></tr></table></figure></p><p>Testing our initial hypothesis.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nn = NeuralNetwork()</span><br><span class="line">    print(<span class="string">'\nrandom synoptic weights'</span>)</span><br><span class="line">    print(nn.weights)</span><br><span class="line"></span><br><span class="line">    x = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    y = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]]).T</span><br><span class="line">    nn.backward_propogation(x, y)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\nweights after training'</span>)</span><br><span class="line">    print(nn.weights)</span><br><span class="line"></span><br><span class="line">    outputs = nn.forward_propogation(x)</span><br><span class="line">    print(<span class="string">'\noutput after training'</span>)</span><br><span class="line">    print(outputs)</span><br></pre></td></tr></table></figure></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">random synoptic weights</span><br><span class="line">[[<span class="number">-0.16595599</span>]</span><br><span class="line"> [ <span class="number">0.44064899</span>]</span><br><span class="line"> [<span class="number">-0.99977125</span>]]</span><br><span class="line"></span><br><span class="line">weights after training</span><br><span class="line">[[<span class="number">10.38061249</span>]</span><br><span class="line"> [<span class="number">-0.20642264</span>]</span><br><span class="line"> [<span class="number">-4.98461681</span>]]</span><br><span class="line"></span><br><span class="line">output after training</span><br><span class="line">[[<span class="number">0.0067959</span> ]</span><br><span class="line"> [<span class="number">0.99445652</span>]</span><br><span class="line"> [<span class="number">0.99548577</span>]</span><br><span class="line"> [<span class="number">0.00553541</span>]]</span><br></pre></td></tr></table></figure><p>We can see that the neural network learns to put substantial weights on the first feature and makes very accurate predictions in-sample with <script type="math/tex">10,000</script> iterations.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Gradient Descent&lt;/code&gt; is an optimization method used in neural network, where the weight parameters &lt;script type=&quot;math/tex&quot;&gt;\boldsymbol{w}&lt;/script&gt; are updated recursively by subtracting a small percentage &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; of the gradient of the loss function &lt;script type=&quot;math/tex&quot;&gt;\nabla \mathcal{L}&lt;/script&gt;, in order to minimize the loss function.&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\boldsymbol{w}_i = \boldsymbol{w}_{i-1} - \alpha\nabla \mathcal{L}(\boldsymbol{w}_{i-1})&lt;/script&gt;
    
    </summary>
    
    
    
      <category term="Math" scheme="http://jackliu234.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Notes on Word2Vec, Stanford Open Course</title>
    <link href="http://jackliu234.com/2019/07/w2v/"/>
    <id>http://jackliu234.com/2019/07/w2v/</id>
    <published>2019-07-29T04:00:00.000Z</published>
    <updated>2019-08-23T13:02:52.432Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>The <code>Word2Vec</code> is an iteration based <code>Natural Language Proceessing</code> (NLP) framework for learning word vectors, developed by Thomas Mikolov. For each word position <script type="math/tex">t</script> in a large corpus of text <script type="math/tex">T</script> we define a fixed window size <script type="math/tex">m</script> and the likelihood function <script type="math/tex">L(\theta)</script>:</p><script type="math/tex; mode=display">L(\theta) = \prod_{t=1}^T\prod_{j\in[-m, m] \neq 0} p(w_{t+j}|w_t;\theta)</script><p>We define the <code>objective function</code> <script type="math/tex">J(\theta)</script> as the average negative log-likelihood:</p><script type="math/tex; mode=display">J(\theta) = -\dfrac{1}{T}\log L(\theta) = -\dfrac{1}{T}\sum_{t=1}^T\sum_{j\in [-m, m]\neq 0} \log p(w_{t+j}|w_t;\theta)</script><p>Say a word <script type="math/tex">w_1</script> is more likely to appear together with <script type="math/tex">w_2</script> than <script type="math/tex">w_3</script>, we want to define a probability measure <script type="math/tex">p</script> such that:</p><script type="math/tex; mode=display">p(w_2|w_1) > p(w_3|w_1)</script><p>We achieve this by creating two word vectors <script type="math/tex">\textbf{v}_w</script> (center) and <script type="math/tex">\textbf{u}_w</script> (outside) for each word <script type="math/tex">w</script> and using the dot product to represent the similarity of two words. The we use the <code>softmax</code> function to transform the dot products into a probability measure. Note that a softmax function amplifies probabilities for the largest values while still assign some probabilities to smaller values.</p><script type="math/tex; mode=display">p(w_o|w_c) = \text{softmax}(\textbf{u}_{o}^T\textbf{v}_{c}) = \dfrac{\exp(\textbf{u}_{o}^T\textbf{v}_{c})}{\sum_{w\in\mathcal{W}}  \exp(\textbf{u}_{w}^T\textbf{v}_{c})}</script><h1 id="Gradient-Calculation"><a href="#Gradient-Calculation" class="headerlink" title="Gradient Calculation"></a>Gradient Calculation</h1><p>We can now derive the gradient of the objective function. First look at <script type="math/tex">\partial J(\theta)/\partial \textbf{v}_c</script>:</p><script type="math/tex; mode=display">\begin{align}\dfrac{\partial J(\theta)}{\partial \textbf{v}_c} &= -\dfrac{1}{T}\sum_{t=1}^T\sum_{j\in [-m, m]\neq 0} \dfrac{\partial}{\partial \textbf{v}_c}\log \dfrac{\exp(\textbf{u}_{o}^T\textbf{v}_{c})}{\sum_{w\in\mathcal{W}}  \exp(\textbf{u}_{w}^T\textbf{v}_{c})}\end{align}</script><p>Looking at the derivative inside the double summation and use the fact that:</p><script type="math/tex; mode=display">\dfrac{\partial \textbf{x}^T\textbf{a}}{\partial \textbf{x}} = \dfrac{\partial \textbf{a}^T\textbf{x}}{\partial \textbf{x}} = a</script><p>Therefore,</p><script type="math/tex; mode=display">\begin{align}\dfrac{\partial J(t, j, \theta)}{\partial \textbf{v}_c} &= \dfrac{\partial}{\partial \textbf{v}_c}\log \dfrac{\exp(\textbf{u}_{o}^T\textbf{v}_{c})}{\sum_{w\in\mathcal{W}}  \exp(\textbf{u}_{w}^T\textbf{v}_{c})} \\&= \textbf{u}_o - \sum_{w\in\mathcal{W}} p(w|w_c)\textbf{u}_w \\\end{align}</script><p>Computing the other derivative w.r.t. <script type="math/tex">\textbf{u}_o</script></p><script type="math/tex; mode=display">\begin{align}\dfrac{\partial J(t, j, \theta)}{\partial \textbf{u}_o} &= \dfrac{\partial}{\partial \textbf{u}_o}\log \dfrac{\exp(\textbf{u}_{o}^T\textbf{v}_{c})}{\sum_{w\in\mathcal{W}}  \exp(\textbf{u}_{w}^T\textbf{v}_{c})} \\&= \textbf{v}_c [1-  \dfrac{1}{\sum_{w\in\mathcal{W}}  \exp(\textbf{u}_{w}^T\textbf{v}_{c})}] \\\end{align}</script><p>We used two vector for each word such that the optimization is easier. Eventually we average the two vectors for a given word. We can now use <code>gradient descent</code> to update the model parameters <script type="math/tex">\theta</script>.</p><script type="math/tex; mode=display">\theta_{new} = \theta_{old} + \alpha \nabla_\theta J(\theta)</script><p>Since <script type="math/tex">\nabla_\theta J(\theta)</script> can be expensive to calculate for the entire corpus of text, we use <code>stochastic gradient descent</code> which updates <script type="math/tex">\theta</script> with randomly selected samples of text.  </p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p><strong><em>requests</em></strong> Requests is a library for making HTTP requests in Python. <code>HTTP</code> functions as a <code>request–response protocol</code> in the client–server computing model. A web browser, for example, may be the client and an application running on a computer hosting a website may be the server.</p><ul><li>The client submits an HTTP request message to the server.</li><li>The server, which provides resources such as HTML files and other content, or performs other functions on behalf of the client, returns a response message to the client. The response contains completion status information about the request and may also contain requested content in its message body.</li></ul><p>A <code>Uniform Resource Locator</code> (URL) is a reference to a web resource, typically includes a protocol (http), a hostname (www.website.com), and a file name (index.html).</p><p><strong><em>bs4</em></strong> Beautiful Soup is a Python library for pulling data out of HTML and XML files, and it can work with a <code>parser</code> to provide functionality of navigating, searching, and modifying the parse tree. Both HTML and XML are markup languages designed for storing and transporting data.</p><p><strong><em>re</em></strong> Provides regular expression matching operations.</p><p><strong><em>nltk</em></strong> The Natural Language Toolkit is a Python platform for working with human language data. It provides interfaces to lexical resources as well as a suite of text processing libraries.</p><p><strong><em>gensim</em></strong> Gensim is an open-source library for unsupervised topic modeling and natural language processing, using modern statistical machine learning.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> Word2Vec</span><br><span class="line"></span><br><span class="line">url      = <span class="string">'https://en.wikipedia.org/wiki/Python_(programming_language)'</span></span><br><span class="line">response = requests.get(url).content</span><br><span class="line">soup     = bs4.BeautifulSoup(response, <span class="string">"lxml"</span>).find_all(<span class="string">'p'</span>)</span><br><span class="line">raw_data = <span class="string">""</span>.join([s.text <span class="keyword">for</span> s <span class="keyword">in</span> soup])</span><br></pre></td></tr></table></figure><p>Perform data cleaning and retain only key words from the parsed data.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data  = raw_data.lower()</span><br><span class="line">data  = re.sub(<span class="string">'[^a-zA-Z]'</span>, <span class="string">' '</span>, data)</span><br><span class="line">data  = re.sub(<span class="string">r'\s+'</span>, <span class="string">' '</span>, data)</span><br><span class="line">words = [nltk.word_tokenize(sentence) <span class="keyword">for</span> sentence <span class="keyword">in</span> nltk.sent_tokenize(data)]</span><br><span class="line">words = [[w <span class="keyword">for</span> w <span class="keyword">in</span> words[i] <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> stopwords.words(<span class="string">'english'</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(words))]</span><br></pre></td></tr></table></figure></p><p>Train Word2Vec model.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Word2Vec(words, min_count=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>View the word vector for the word ‘python’:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.wv[<span class="string">'python'</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">array([ <span class="number">0.00272543</span>,  <span class="number">0.00044483</span>, <span class="number">-0.002916</span>  , <span class="number">-0.00091269</span>, <span class="number">-0.0028646</span> ,</span><br><span class="line">        <span class="number">0.00312438</span>, <span class="number">-0.00202833</span>,  <span class="number">0.00418179</span>,  <span class="number">0.00512605</span>,  <span class="number">0.00398485</span>,</span><br><span class="line">        <span class="number">0.00383619</span>, <span class="number">-0.00527396</span>,  <span class="number">0.00136241</span>,  <span class="number">0.00048289</span>,  <span class="number">0.00393969</span>,</span><br><span class="line">        <span class="number">0.00363039</span>,  <span class="number">0.00516506</span>,  <span class="number">0.00065952</span>,  <span class="number">0.00279527</span>, <span class="number">-0.00289068</span>,</span><br><span class="line">       <span class="number">-0.0002257</span> , <span class="number">-0.00423192</span>,  <span class="number">0.00389712</span>,  <span class="number">0.00435556</span>, <span class="number">-0.00169954</span>,</span><br><span class="line">        <span class="number">0.00372895</span>, <span class="number">-0.00204547</span>,  <span class="number">0.00031502</span>, <span class="number">-0.000558</span>  ,  <span class="number">0.00302919</span>,</span><br><span class="line">       <span class="number">-0.00329071</span>, <span class="number">-0.00445723</span>, <span class="number">-0.00090491</span>, <span class="number">-0.00073062</span>,  <span class="number">0.0055988</span> ,</span><br><span class="line">       <span class="number">-0.00180256</span>, <span class="number">-0.00032414</span>,  <span class="number">0.00129002</span>, <span class="number">-0.00077443</span>, <span class="number">-0.00511642</span>,</span><br><span class="line">        <span class="number">0.00082947</span>,  <span class="number">0.00207873</span>,  <span class="number">0.00064075</span>,  <span class="number">0.00320432</span>,  <span class="number">0.00252466</span>,</span><br><span class="line">        <span class="number">0.00165025</span>,  <span class="number">0.00274325</span>,  <span class="number">0.00557919</span>,  <span class="number">0.00422611</span>, <span class="number">-0.00348751</span>,</span><br><span class="line">        <span class="number">0.00488516</span>,  <span class="number">0.00238723</span>, <span class="number">-0.0034958</span> ,  <span class="number">0.00119023</span>, <span class="number">-0.0009317</span> ,</span><br><span class="line">       <span class="number">-0.00051728</span>, <span class="number">-0.00448227</span>, <span class="number">-0.00145251</span>,  <span class="number">0.00098566</span>, <span class="number">-0.00352017</span>,</span><br><span class="line">       <span class="number">-0.00017685</span>,  <span class="number">0.00388307</span>,  <span class="number">0.00305843</span>, <span class="number">-0.00614224</span>,  <span class="number">0.00319819</span>,</span><br><span class="line">       <span class="number">-0.0038121</span> ,  <span class="number">0.00025529</span>, <span class="number">-0.00525783</span>, <span class="number">-0.00364403</span>,  <span class="number">0.00531866</span>,</span><br><span class="line">       <span class="number">-0.00040134</span>,  <span class="number">0.00509736</span>, <span class="number">-0.00279795</span>, <span class="number">-0.00520586</span>,  <span class="number">0.00088609</span>,</span><br><span class="line">       <span class="number">-0.00209225</span>,  <span class="number">0.00341286</span>,  <span class="number">0.00403736</span>, <span class="number">-0.00360165</span>, <span class="number">-0.0025662</span> ,</span><br><span class="line">       <span class="number">-0.00442059</span>, <span class="number">-0.00286324</span>, <span class="number">-0.00441705</span>, <span class="number">-0.00248354</span>, <span class="number">-0.00311305</span>,</span><br><span class="line">       <span class="number">-0.0017566</span> , <span class="number">-0.00094437</span>,  <span class="number">0.00274204</span>, <span class="number">-0.00165205</span>, <span class="number">-0.00576063</span>,</span><br><span class="line">       <span class="number">-0.00485601</span>,  <span class="number">0.00124242</span>, <span class="number">-0.00536304</span>, <span class="number">-0.00042135</span>, <span class="number">-0.00091981</span>,</span><br><span class="line">        <span class="number">0.00247618</span>, <span class="number">-0.0041995</span> , <span class="number">-0.00123214</span>, <span class="number">-0.00465355</span>,  <span class="number">0.00184935</span>],</span><br><span class="line">      dtype=float32)</span><br></pre></td></tr></table></figure><p>View words that are most similar to ‘python’:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.wv.most_similar(<span class="string">'python'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'revision'</span>, <span class="number">0.3588007390499115</span>),</span><br><span class="line"> (<span class="string">'system'</span>, <span class="number">0.35286271572113037</span>),</span><br><span class="line"> (<span class="string">'feature'</span>, <span class="number">0.33182504773139954</span>),</span><br><span class="line"> (<span class="string">'integer'</span>, <span class="number">0.3286311626434326</span>),</span><br><span class="line"> (<span class="string">'systems'</span>, <span class="number">0.3157789707183838</span>),</span><br><span class="line"> (<span class="string">'x'</span>, <span class="number">0.3120567798614502</span>),</span><br><span class="line"> (<span class="string">'numbers'</span>, <span class="number">0.30488497018814087</span>),</span><br><span class="line"> (<span class="string">'supports'</span>, <span class="number">0.29797300696372986</span>),</span><br><span class="line"> (<span class="string">'language'</span>, <span class="number">0.28043025732040405</span>),</span><br><span class="line"> (<span class="string">'major'</span>, <span class="number">0.2673966884613037</span>)]</span><br></pre></td></tr></table></figure><p>Some other resources: <a href="https://stackabuse.com/implementing-word2vec-with-gensim-library-in-python/" target="_blank" rel="noopener">stackabuse</a>, <a href="https://skymind.ai/wiki/word2vec#foreign" target="_blank" rel="noopener">skymind</a> and <a href="https://code.google.com/archive/p/word2vec/" target="_blank" rel="noopener">google code</a></p><p><br><br><br></p><p>Reference:</p><ul><li><a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">Deep Learning for Natural Language Processing</a>, Standford University</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;The &lt;code&gt;Word2Vec&lt;/code&gt; is an iteration based &lt;code&gt;Natural Language Proceessing&lt;/code&gt; (NLP) framework for learning 
      
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Notes on High Frequency Data Model</title>
    <link href="http://jackliu234.com/2019/07/high-freq-data-model/"/>
    <id>http://jackliu234.com/2019/07/high-freq-data-model/</id>
    <published>2019-07-26T04:00:00.000Z</published>
    <updated>2019-09-04T19:20:13.824Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="Hypothesis-Test-and-Confidence-Interval"><a href="#Hypothesis-Test-and-Confidence-Interval" class="headerlink" title="Hypothesis Test and Confidence Interval"></a>Hypothesis Test and Confidence Interval</h1><p>A formal statistical data analysis includes:</p><ul><li><code>hypothesis testings</code>: seeing whether a structure is present</li><li><code>confidence interval</code>: setting error limits on estimates</li><li>prediction interval: setting error limits on future outcomes</li></ul><p>We will discuss a typical setting as follow:</p><ul><li>Let <script type="math/tex">\beta</script> be the <code>unknown parameter</code>, and <script type="math/tex">\hat{\beta}_n</script> is the parameter estimator based on <script type="math/tex">n</script> observations</li><li>Let <script type="math/tex">\hat{\sigma}^2_n</script> be the estimator of <script type="math/tex">\sigma^2_n</script>, equal to <script type="math/tex">var(\sqrt{n}(\hat{\beta}_n - \beta))</script></li><li>In rare circumstances where <script type="math/tex">\sqrt{n}(\hat{\beta}_n - \beta)/\hat{\sigma}</script> is independent of the unknown <script type="math/tex">\beta</script>, such as in regression settings where the error terms <script type="math/tex">\epsilon_i</script> are i.i.d. normally distributed, we can show that it follows a t-distribution with <script type="math/tex">n-1</script> degree of freedom.</li></ul><script type="math/tex; mode=display">\dfrac{\sqrt{n}(\hat{\beta}_n - \beta)}{\hat{\sigma}} \sim t_{n-1}</script><ul><li>However, asymptotically as <script type="math/tex">n\rightarrow\infty</script>, the <code>Central Limit Theorem</code> applies which release us from the assumption restriction above. Under a variety of regular conditions:</li></ul><script type="math/tex; mode=display">\lim_{n\rightarrow\infty} \dfrac{\sqrt{n}(\hat{\beta}_n - \beta)}{\hat{\sigma}} \sim \mathcal{N}(0, 1)</script><ul><li>The <script type="math/tex">1-\alpha</script> <code>confidence interval</code> can then be computed as:</li></ul><script type="math/tex; mode=display">\beta \in CI = \hat{\beta}_n \pm t^{\alpha}_{n-1}\hat{\sigma}_n/\sqrt{n} \\ \text{or asymptotically, swapping } t^{\alpha}_{n-1} \text{ by } z^{\alpha}</script><ul><li><p>The <script type="math/tex">1-\alpha</script> <code>hypothesis test</code> of <script type="math/tex">\beta=\beta_0</script> would:</p><ul><li>accept <script type="math/tex">H_0</script> that  <script type="math/tex">\beta=\beta_0</script> if <script type="math/tex">\beta \in CI</script></li><li>reject <script type="math/tex">H_0</script> that <script type="math/tex">\beta=\beta_0</script> if <script type="math/tex">\beta \notin CI</script></li></ul></li><li><p>The <code>p-value</code> is <script type="math/tex">\alpha</script> such that the hypothesis test is indifference between accept or reject.</p></li><li><p>In practice, t-distribution is typically used for regression data as it is more conservative (<script type="math/tex">t^{\alpha}_{n-1} > z^{\alpha}</script>). For non-regression data, normal distribution is often used.</p></li></ul><p>Some background on LLN and CLT:</p><ul><li><p>Given <script type="math/tex">n</script> i.i.d. random variable <script type="math/tex">X_i</script>. Let <script type="math/tex">\bar{X} = \sum X_i/n</script></p></li><li><p>The <code>Law of Large Numbers</code> states that if <script type="math/tex">\mathbb{E}|X|<\infty</script>, then <script type="math/tex">\lim_{n\rightarrow\infty}\bar{X}\rightarrow\mathbb{E}X</script> a.s.</p></li><li><p>The <code>Central Limit Theorem</code> states that if <script type="math/tex">\mathbb{E}X^2<\infty</script>, then</p></li></ul><script type="math/tex; mode=display">\begin{align}\lim_{n\rightarrow\infty}\sqrt{n}(\bar{X}-\mathbb{E}X)&\rightarrow\mathcal{N}(0, var[X]) \\ \text{or equivalently, } \lim_{n\rightarrow\infty}\dfrac{\bar{X}-\mathbb{E}X}{var[\bar{X}]}&\rightarrow\mathcal{N}(0, 1)\end{align}</script><ul><li>Therefore, if we have a consistent estimator <script type="math/tex">\hat{\sigma}_n</script> for <script type="math/tex">\sigma_n</script>, meaning <script type="math/tex">\hat{\sigma}_n\rightarrow\sigma</script> as <script type="math/tex">n\rightarrow\infty</script>, <code>Slutsky&#39;s Theorem</code> concludes that</li></ul><script type="math/tex; mode=display">\dfrac{\sqrt{n}(\hat{\beta}_n - \beta)}{\hat{\sigma}_n} \rightarrow\mathcal{N}(0, 1)</script><ul><li>We can then use the normal distribution to set confidence intervals and perform hypothesis tests.</li></ul><h1 id="A-High-Frequency-Data-Model"><a href="#A-High-Frequency-Data-Model" class="headerlink" title="A High Frequency Data Model"></a>A High Frequency Data Model</h1><p>Assume that <script type="math/tex">X_t = \log{S_t}</script> follows Geometric Brownian motion.</p><script type="math/tex; mode=display">X_t = X_0 + \mu t + \sigma W_t</script><h2 id="Parametric-Estimator"><a href="#Parametric-Estimator" class="headerlink" title="Parametric Estimator"></a>Parametric Estimator</h2><p>Assume equal spacing between <script type="math/tex">n</script> time steps, <script type="math/tex">\Delta t = T/n</script> and <script type="math/tex">t_i = i\Delta t</script>. Given observations <script type="math/tex">X_{t_i}</script>, the step <script type="math/tex">\Delta X_{t_{i+1}} = X_{t_{i+1}} - X_{t_i}</script> and <script type="math/tex">\Delta X_{t_{t+1}} \sim \mathcal{N}(\mu\Delta t, \sigma^2\Delta t)</script></p><p>We have the following parametric estimator:</p><script type="math/tex; mode=display">\begin{align}\hat{\mu} &= \dfrac{1}{n\Delta t}\sum_0^{n-1}\Delta X_{t_{i+1}} = \dfrac{X_T - X_0}{T}  \\\hat{\sigma}^2_{MLE} &= \dfrac{1}{n\Delta t}\sum_0^{n-1}(\Delta X_{t_{i+1}} - \overline{\Delta X}_{t})^2 \\\hat{\sigma}^2_{UMVUE} &= \dfrac{1}{(n-1)\Delta t}\sum_0^{n-1}(\Delta X_{t_{i+1}} - \overline{\Delta X}_{t})^2\end{align}</script><p><strong><em>Observation</em></strong> <script type="math/tex">\hat{\mu}</script></p><ul><li>satisfies both MLE and UMVUE</li><li>For <script type="math/tex">T<\infty</script>, can NOT consistently estimate <script type="math/tex">\mu</script>, as <script type="math/tex">\hat{\mu}</script> does not depend on <script type="math/tex">n</script></li><li>For <script type="math/tex">T\rightarrow\infty</script>, can consistently estimate <script type="math/tex">\mu</script>, as <script type="math/tex">var(\hat{\mu}) = \sigma^2/T \rightarrow 0</script> and therefore <script type="math/tex">\hat{\mu} \rightarrow \mu</script> as <script type="math/tex">T\rightarrow\infty</script></li></ul><p><strong><em>Observation</em></strong> <script type="math/tex">\hat{\sigma}^2_{MLE}</script>,  <script type="math/tex">\hat{\sigma}^2_{UMVUE}</script></p><ul><li>For <script type="math/tex">T<\infty</script>, <script type="math/tex">\hat{\sigma}^2</script> can consistently estimate <script type="math/tex">\sigma^2</script></li><li>Let <script type="math/tex">U_i = \Delta X_{t_i}/(\sigma\Delta t^{1/2})</script>, then <script type="math/tex">U_i</script> are i.i.d normal distribution <script type="math/tex">\mathcal{N}(\mu\Delta t^{1/2}/\sigma, 1)</script>. Let <script type="math/tex">\bar{U} = \dfrac{1}{n}\sum_0^{n-1}U_i</script>, then,</li></ul><script type="math/tex; mode=display">\sum_0^{n-1} (U_i - \bar{U})^2 \sim \chi_{n-1}^2</script><ul><li>For the <code>Uniform Minimum Variance Unbiased</code> (UMVUE) estimator,</li></ul><script type="math/tex; mode=display">\begin{align} \hat{\sigma}^2_{UMVUE} &= \dfrac{1}{(n-1)\Delta t}\sum_0^{n-1}(\Delta X_{t_{i+1}} - \overline{\Delta X}_{t})^2 \\&= \dfrac{\sigma^2\Delta t}{(n-1)\Delta t}\sum_0^{n-1}(U_{t_{i}} - \bar{U}_{t})^2 \\&\sim \dfrac{\sigma^2}{n-1}\chi^2_{n-1}\end{align}</script><ul><li>Since <script type="math/tex">\mathbb{E}\chi^2_{n-1} = n-1</script> and <script type="math/tex">var(\chi^2_{n-1}) = 2(n-1)</script>. Therefore <script type="math/tex">\hat{\sigma}^2</script> consistently estimates <script type="math/tex">\sigma^2</script>,</li></ul><script type="math/tex; mode=display">\mathbb{E}(\hat{\sigma}^2_{UMVUE}) = \sigma^2 \\var(\hat{\sigma}^2_{UMVUE}) = \dfrac{2\sigma^4}{n-1}</script><ul><li>Since <script type="math/tex">\chi^2_{n-1}</script> is the sum of <script type="math/tex">n-1</script> i.i.d. <script type="math/tex">\chi^2_1</script>, by CLT we have <script type="math/tex">[\chi^2_{n-1}-(n-1)]/\sqrt{2(n-1)}\sim\mathcal{N}(0, 1)</script>. Therefore,</li></ul><script type="math/tex; mode=display">\begin{align} n^{1/2}(\hat{\sigma}^2-\sigma^2) &\sim (n-1)^{1/2} (\hat{\sigma}^2-\sigma^2) \\&\rightarrow \sqrt{2}\sigma^2 [\chi^2_{n-1}-(n-1)]/\sqrt{2(n-1)} \\&\sim \mathcal{N}(0, 2\sigma^4)\end{align}</script><ul><li>Therefore, an asymptotic 95% confidence interval for <script type="math/tex">\sigma^2</script> can be formulated as:</li></ul><script type="math/tex; mode=display">\sigma^2 = \hat{\sigma}^2 \pm 1.96 \times \sqrt{2}\hat{\sigma}^2/\sqrt{n}</script><ul><li>Since <script type="math/tex">\hat{\sigma}^2_{MLE}=\hat{\sigma}^2_{UMVUE}(n-1)/n</script>, the same asymptotical confidence interval applies</li></ul><h2 id="Non-parametric-Estimator"><a href="#Non-parametric-Estimator" class="headerlink" title="Non-parametric Estimator"></a>Non-parametric Estimator</h2><p>We first define the <code>integrated volatility</code> (IV):</p><script type="math/tex; mode=display">\begin{align} IV &= \langle X, X\rangle_T \\&= \int_0^T \sigma^2_tdt \\&= \lim_{\Delta t\rightarrow\infty} \sum (X_{t_{i+1}} - X_{t_i})^2\end{align}</script><p>In theory, IV of high frequency data can be estimated accurately with the <code>realized volatility</code> estimator <script type="math/tex">[X, X]_ T = \sum (X_{t_{i+1}} - X_{t_i})^2</script>. This estimator is consistent and asymptotically mixed normal with variance equal to <script type="math/tex">2T/n \times \int_0^T\sigma^4dt</script> and estimated by <script type="math/tex">2/3 \times [X, X, X, X]_ T</script></p><p>In practice, <script type="math/tex">[X, X]_ T</script> does not converge as <script type="math/tex">\Delta t\rightarrow 0</script>. Possible reason due to the existance of <code>microstructure</code>, e.g. bid-ask spread, limited market depth, price impact, strategic trading.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Hypothesis-Test-and-Confidence-Interval&quot;&gt;&lt;a href=&quot;#Hypothesis-Test-and-Confidence-Interval&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
    
      <category term="Math" scheme="http://jackliu234.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>My LeetCode Solutions</title>
    <link href="http://jackliu234.com/2019/07/leetcode/"/>
    <id>http://jackliu234.com/2019/07/leetcode/</id>
    <published>2019-07-24T04:00:00.000Z</published>
    <updated>2019-08-23T13:04:05.927Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a><span id="nav">Navigation</span></h1><p><a href="#two-sum">01. Two Sum</a><br><a href="#add-two-numbers">02. Add Two Numbers</a><br><a href="#reverse-integer">07. Reverse Integer</a><br><a href="#palindrome-number">09. Palindrome Number</a><br><a href="#container-water">11. Container With Most Water</a><br><a href="#longest-common-prefix">14. Longest Common Prefix</a><br><a href="#remove-nth-node">19. Remove Nth Node From End of List</a><br><a href="#merge-two-sorted-lists">21. Merge Two Sorted Lists</a><br><a href="#remove-duplicate-sorted-array">26. Remove Duplicates from Sorted Array</a><br><a href="#remove-element">27. Remove Element</a><br><a href="#implement-strstr">28. Implement strStr()</a><br><a href="#search-insert-position">35. Search Insert Position</a><br><a href="#valid-sudoku">36. Valid Sudoku</a><br><a href="#sudoku-solver">37. Sudoku Solver</a><br><a href="#count-and-say">38. Count and Say</a><br><a href="#n-queens">51. N-Queens</a><br><a href="#n-queens-2">52. N-Queens II</a><br><a href="#max-sub-array">53. Maximum Subarray</a><br><a href="#length-of-last-word">58. Length of Last Word</a><br><a href="#plus-one">66. Plus One</a><br><a href="#add-binary">67. Add Binary</a><br><a href="#binary-search">69. Sqrt(x)</a><br><a href="#climb-stairs">70. Climbing Stairs</a><br><a href="#remove-duplicate-sorted-array-2">80. Remove Duplicates from Sorted Array II</a><br><a href="#remove-duplicate-sorted-list-2">82. Remove Duplicates from Sorted List II</a><br><a href="#remove-duplicate-sorted-list">83. Remove Duplicates from Sorted List</a><br><a href="#merge-sorted-array">88. Merge Sorted Array</a><br><a href="#binary-tree-inorder-traversal">94. Binary Tree Inorder Traversal</a><br><a href="#unique-binary-search-tree">96. Unique Binary Search Trees</a><br><a href="#same-tree">100. Same Tree</a></p><p><em>30/100 Completed</em></p><p><br></p><h1 id="01-Two-Sum-8634"><a href="#01-Two-Sum-8634" class="headerlink" title="01. Two Sum &#8634;"></a><span id="two-sum">01. Two Sum</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>Example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</span><br><span class="line"></span><br><span class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>].</span><br></pre></td></tr></table></figure><p><strong><em>My Solution 1</em></strong> Brute Force Approach.</p><ul><li>Time Complexity: <script type="math/tex">O(N^2)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(nums)):</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j]) == target:</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure><p><strong><em>My Solution 2</em></strong> One-Pass Hash Table.</p><ul><li>Time Complexity: <script type="math/tex">O(N)</script></li><li>Space Complexity: <script type="math/tex">O(N)</script></li></ul><p>The idea of hashing is to distribute the key-value pairs across an array of buckets. Given a key, the hash function computes the location of the value.</p><p>By using a hash table we reduce the look up time to near constant, assuming the hash function is <script type="math/tex">O(1)</script>. However, the hash function need to be chosen carefully to avoid a collision, which would degenerate the look up time to <script type="math/tex">O(N)</script>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line"></span><br><span class="line">        dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> target-nums[i] <span class="keyword">not</span> <span class="keyword">in</span> dict:</span><br><span class="line">                dict[nums[i]] = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [dict[target-nums[i]], i]</span><br></pre></td></tr></table></figure><h1 id="02-Add-Two-Numbers-8634"><a href="#02-Add-Two-Numbers-8634" class="headerlink" title="02. Add Two Numbers &#8634;"></a><span id="add-two-numbers">02. Add Two Numbers</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>Example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: <span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong></p><ul><li>Time Complexity: <script type="math/tex">O(max(m, n))</script></li><li>Space Complexity: <script type="math/tex">O(max(m, n))</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line"></span><br><span class="line">        l3                 = ListNode(<span class="number">0</span>)</span><br><span class="line">        tmp1, tmp2, tmp3   = l1, l2, l3</span><br><span class="line">        add_one            = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (tmp1 <span class="keyword">or</span> tmp2) <span class="keyword">or</span> add_one:</span><br><span class="line">            <span class="keyword">if</span> tmp1 <span class="keyword">and</span> tmp2:</span><br><span class="line">                tmp3.val   = (tmp1.val + tmp2.val + add_one) % <span class="number">10</span></span><br><span class="line">                add_one    = (tmp1.val + tmp2.val + add_one) // <span class="number">10</span> &gt; <span class="number">0</span></span><br><span class="line">                tmp1, tmp2 = tmp1.next, tmp2.next</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> tmp1 <span class="keyword">and</span> <span class="keyword">not</span> tmp2:</span><br><span class="line">                tmp3.val   = (tmp1.val + add_one) % <span class="number">10</span></span><br><span class="line">                add_one    = (tmp1.val + add_one)// <span class="number">10</span> &gt; <span class="number">0</span></span><br><span class="line">                tmp1       = tmp1.next</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> tmp1 <span class="keyword">and</span> tmp2:</span><br><span class="line">                tmp3.val   = (tmp2.val + add_one) % <span class="number">10</span></span><br><span class="line">                add_one    = (tmp2.val + add_one) // <span class="number">10</span> &gt; <span class="number">0</span></span><br><span class="line">                tmp2       = tmp2.next</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp3.val   = <span class="number">1</span></span><br><span class="line">                add_one    = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp1 <span class="keyword">or</span> tmp2) <span class="keyword">or</span> add_one:</span><br><span class="line">                tmp3.next  = ListNode(<span class="number">0</span>)</span><br><span class="line">                tmp3       = tmp3.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l3</span><br></pre></td></tr></table></figure><h1 id="7-Reverse-Integer-8634"><a href="#7-Reverse-Integer-8634" class="headerlink" title="7. Reverse Integer &#8634;"></a><span id="reverse-integer">7. Reverse Integer</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a 32-bit signed integer, reverse digits of an integer.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">123</span></span><br><span class="line">Output: <span class="number">321</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong></p><ul><li>Time Complexity: <script type="math/tex">O(\log N)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        is_neg = x &lt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> is_neg: x = -x</span><br><span class="line">        a, b = x % <span class="number">10</span>, x // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> b:</span><br><span class="line">            <span class="keyword">if</span> a &gt; <span class="number">2</span>**<span class="number">31</span> / <span class="number">10</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            a = a * <span class="number">10</span> + b % <span class="number">10</span></span><br><span class="line">            b = b // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_neg: <span class="keyword">return</span> -a</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h1 id="9-Palindrome-Number-8634"><a href="#9-Palindrome-Number-8634" class="headerlink" title="9. Palindrome Number &#8634;"></a><span id="palindrome-number">9. Palindrome Number</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">121</span></span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong></p><ul><li>Time Complexity: <script type="math/tex">O(\log N)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">elif</span> x &lt; <span class="number">10</span>: <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        a, b = x % <span class="number">10</span>, x // <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>: <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> b &gt; a:</span><br><span class="line">            a = a * <span class="number">10</span> + b % <span class="number">10</span></span><br><span class="line">            b = b // <span class="number">10</span></span><br><span class="line">            print(a, b)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> a // <span class="number">10</span> == <span class="number">0</span>: <span class="keyword">return</span> a == b</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> (a == b) <span class="keyword">or</span> (a // <span class="number">10</span> == b)</span><br></pre></td></tr></table></figure><p><strong><em>Alternative Solution</em></strong> One-Liner.</p><ul><li>Time Complexity: <script type="math/tex">O(N)</script></li><li>Space Complexity: <script type="math/tex">O(N)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> str(x) == str(x)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h1 id="11-Container-With-Most-Water-8634"><a href="#11-Container-With-Most-Water-8634" class="headerlink" title="11. Container With Most Water &#8634;"></a><span id="container-water">11. Container With Most Water</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p>Note: You may not slant the container and n is at least 2.</p><p><img src="leetcode-question_11.jpg" alt="question_11.jpg"></p><p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p><p>Example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">Output: <span class="number">49</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution 1</em></strong> Brute Force.</p><ul><li>Time Complexity: <script type="math/tex">O(N^2)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        s = set()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(height)):</span><br><span class="line">                s.add((j-i) * min(height[i], height[j]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sorted(s)[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p><strong><em>My Solution 2</em></strong> Two Pointer Approach.</p><ul><li>Time Complexity: <script type="math/tex">O(N)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = len(height) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> r != l:</span><br><span class="line">            <span class="keyword">if</span> height[r] &lt;= height[l]:</span><br><span class="line">                m = max(m, (r-l) * height[r])</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m = max(m, (r-l) * height[l])</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure><h1 id="14-Longest-Common-Prefix-8634"><a href="#14-Longest-Common-Prefix-8634" class="headerlink" title="14. Longest Common Prefix &#8634;"></a><span id="#longest-common-prefix">14. Longest Common Prefix</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>]</span><br><span class="line">Output: <span class="string">"fl"</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> Vertical Scanning.</p><ul><li>Time Complexity: <script type="math/tex">O(N \cdot min\ M)</script> where <script type="math/tex">N</script> is the number of strings and <script type="math/tex">M</script> is the length of the string</li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> strs:</span><br><span class="line">            tmp = <span class="string">""</span></span><br><span class="line">            curr_str = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strs[<span class="number">0</span>])):</span><br><span class="line">                curr_str = strs[<span class="number">0</span>][i]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">if</span> strs[j][i] != curr_str:</span><br><span class="line">                            <span class="keyword">return</span> tmp</span><br><span class="line">                    <span class="keyword">except</span> IndexError:</span><br><span class="line">                        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">                tmp += curr_str</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> tmp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><h1 id="19-Remove-Nth-Node-From-End-of-List-8634"><a href="#19-Remove-Nth-Node-From-End-of-List-8634" class="headerlink" title="19. Remove Nth Node From End of List &#8634;"></a><span id="remove-nth-node">19. Remove Nth Node From End of List</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a linked list, remove the n-th node from the end of list and return its head.</p><p>Example:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong><em>My Solution 1</em></strong> Two Pass Algorithm.</p><ul><li>Time Complexity: <script type="math/tex">O(N)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head: ListNode, n: int)</span> -&gt; ListNode:</span></span><br><span class="line"></span><br><span class="line">        tmp = head</span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> tmp:</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">            tmp = tmp.next</span><br><span class="line"></span><br><span class="line">        tmp = head</span><br><span class="line">        <span class="keyword">if</span> length == n:</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(length - n - <span class="number">1</span>):</span><br><span class="line">                tmp = tmp.next     </span><br><span class="line">            tmp.next = tmp.next.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><p><strong><em>My Solution 2</em></strong> One Pass Algorithm.</p><ul><li>Time Complexity: <script type="math/tex">O(N)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head: ListNode, n: int)</span> -&gt; ListNode:</span></span><br><span class="line"></span><br><span class="line">        tmp1, tmp2 = head, head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            tmp2 = tmp2.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tmp2:</span><br><span class="line">            <span class="keyword">while</span> tmp2.next:</span><br><span class="line">                tmp1, tmp2 = tmp1.next, tmp2.next</span><br><span class="line">            tmp1.next = tmp1.next.next</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure><h1 id="21-Merge-Two-Sorted-Lists-8634"><a href="#21-Merge-Two-Sorted-Lists-8634" class="headerlink" title="21. Merge Two Sorted Lists &#8634;"></a><span id="merge-two-sorted-lists">21. Merge Two Sorted Lists</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><p>Example:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line"></span><br><span class="line">        l3                         = ListNode(<span class="string">""</span>)</span><br><span class="line">        tmp1, tmp2, tmp3           = l1, l2, l3</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> tmp1 <span class="keyword">or</span> tmp2:</span><br><span class="line">            <span class="keyword">if</span> tmp1 <span class="keyword">and</span> tmp2:</span><br><span class="line">                <span class="keyword">if</span> tmp1.val &lt;= tmp2.val:</span><br><span class="line">                    tmp3.val       = tmp1.val</span><br><span class="line">                    tmp1           = tmp1.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    tmp3.val       = tmp2.val</span><br><span class="line">                    tmp2           = tmp2.next</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> tmp1 <span class="keyword">or</span> tmp2:</span><br><span class="line">                    tmp3.next      = ListNode(<span class="number">0</span>)</span><br><span class="line">                    tmp3           = tmp3.next</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> tmp1 <span class="keyword">and</span> <span class="keyword">not</span> tmp2:</span><br><span class="line">                tmp3.val           = tmp1.val</span><br><span class="line">                tmp1               = tmp1.next</span><br><span class="line">                <span class="keyword">if</span> tmp1:</span><br><span class="line">                    tmp3.next      = ListNode(<span class="number">0</span>)</span><br><span class="line">                    tmp3           = tmp3.next</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> tmp1 <span class="keyword">and</span> tmp2:</span><br><span class="line">                tmp3.val           = tmp2.val</span><br><span class="line">                tmp2               = tmp2.next</span><br><span class="line">                <span class="keyword">if</span> tmp2:</span><br><span class="line">                    tmp3.next      = ListNode(<span class="number">0</span>)</span><br><span class="line">                    tmp3           = tmp3.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l3</span><br></pre></td></tr></table></figure></p><p><strong><em>Alternative Solution</em></strong> Recursion.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &gt; l2.val:</span><br><span class="line">                l1, l2 = l2, l1 <span class="comment"># keep l1 always point to the smallest node</span></span><br><span class="line">            l1.next = self.mergeTwoLists(l1.next, l2) <span class="comment"># each step, connect the current smallest node to the already linked list</span></span><br><span class="line">        <span class="keyword">return</span> l1 <span class="keyword">or</span> l2 <span class="comment"># short-circuit evaluation, if l1 not None, return l1, else, return l2</span></span><br></pre></td></tr></table></figure></p><h1 id="26-Remove-Duplicates-from-Sorted-Array-8634"><a href="#26-Remove-Duplicates-from-Sorted-Array-8634" class="headerlink" title="26. Remove Duplicates from Sorted Array &#8634;"></a><span id="remove-duplicate-sorted-array">26. Remove Duplicates from Sorted Array</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>Example 1:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"></span><br><span class="line">Your function should <span class="keyword">return</span> length = <span class="number">2</span>, <span class="keyword">with</span> the first two elements of nums being <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span> respectively.</span><br><span class="line"></span><br><span class="line">It doesn<span class="string">'t matter what you leave beyond the returned length.</span></span><br></pre></td></tr></table></figure></p><p><strong><em>My Solution 1</em></strong> Two Pointers.</p><ul><li>Time Complexity: <script type="math/tex">O(N)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums:</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] != nums[tmp]:</span><br><span class="line">                    tmp += <span class="number">1</span></span><br><span class="line">                    nums[tmp] = nums[i]</span><br><span class="line">            <span class="keyword">return</span> tmp + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="27-Remove-Element-Array-8634"><a href="#27-Remove-Element-Array-8634" class="headerlink" title="27. Remove Element Array &#8634;"></a><span id="remove-element">27. Remove Element Array</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given an array nums and a value val, remove all instances of that value in-place and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span>,</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> Two Pointer.</p><ul><li>Time Complexity: <script type="math/tex">O(N)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums: List[int], val: int)</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        new_array_ptr = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != val:</span><br><span class="line">                nums[new_array_ptr] = nums[i]</span><br><span class="line">                new_array_ptr += <span class="number">1</span>                </span><br><span class="line">        <span class="keyword">return</span> new_array_ptr</span><br></pre></td></tr></table></figure><h1 id="28-Implement-strStr-8634"><a href="#28-Implement-strStr-8634" class="headerlink" title="28. Implement strStr() &#8634;"></a><span id="implement-strstr">28. Implement strStr()</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Implement strStr().</p><p>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: haystack = <span class="string">"hello"</span>, needle = <span class="string">"ll"</span></span><br><span class="line">Output: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack: str, needle: str)</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> needle:</span><br><span class="line">            length = len(needle)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(haystack)):</span><br><span class="line">                <span class="keyword">if</span> haystack[i:i+length] == needle:</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>                  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h1 id="35-Search-Insert-Position-8634"><a href="#35-Search-Insert-Position-8634" class="headerlink" title="35. Search Insert Position &#8634;"></a><span id="search-insert-position">35. Search Insert Position</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">5</span></span><br><span class="line">Output: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt;= target:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> len(nums)</span><br></pre></td></tr></table></figure></p><h1 id="36-Valid-Sudoku-8634"><a href="#36-Valid-Sudoku-8634" class="headerlink" title="36. Valid Sudoku &#8634;"></a><span id="valid-sudoku">36. Valid Sudoku</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:</p><p>Each row must contain the digits 1-9 without repetition.<br>Each column must contain the digits 1-9 without repetition.<br>Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.</p><p>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"5"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"3"</span>],</span><br><span class="line">  [<span class="string">"4"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>],</span><br><span class="line">  [<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"4"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"5"</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"9"</span>]</span><br><span class="line">]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> Two Liner.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, l: List[str])</span> -&gt; bool:</span></span><br><span class="line">        tmp = [i <span class="keyword">for</span> i <span class="keyword">in</span> l <span class="keyword">if</span> i != <span class="string">'.'</span>]</span><br><span class="line">        <span class="keyword">return</span> len(set(tmp)) == len(tmp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board: List[List[str]])</span> -&gt; bool:</span></span><br><span class="line">        box = [[board[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(col, col+<span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(row, row+<span class="number">3</span>)] <span class="keyword">for</span> col <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>) <span class="keyword">for</span> row <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line">        <span class="keyword">return</span> all([self.isValid(l) <span class="keyword">for</span> l <span class="keyword">in</span> [*box, *board, *zip(*board)]])</span><br></pre></td></tr></table></figure></p><h1 id="37-Sudoku-Solver-8634"><a href="#37-Sudoku-Solver-8634" class="headerlink" title="37. Sudoku Solver &#8634;"></a><span id="sudoku-solver">37. Sudoku Solver</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p><p>A sudoku solution must satisfy all of the following rules:</p><p>Each of the digits 1-9 must occur exactly once in each row.<br>Each of the digits 1-9 must occur exactly once in each column.<br>Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.<br>Empty cells are indicated by the character ‘.’.</p><p>Example 1:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">    [<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"5"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"."</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"3"</span>],</span><br><span class="line">    [<span class="string">"4"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>],</span><br><span class="line">    [<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>],</span><br><span class="line">    [<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"4"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"5"</span>],</span><br><span class="line">    [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"9"</span>]</span><br><span class="line">]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">    [<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>],</span><br><span class="line">    [<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"2"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"8"</span>],</span><br><span class="line">    [<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"2"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>],</span><br><span class="line">    [<span class="string">"8"</span>,<span class="string">"5"</span>,<span class="string">"9"</span>,<span class="string">"7"</span>,<span class="string">"6"</span>,<span class="string">"1"</span>,<span class="string">"4"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>],</span><br><span class="line">    [<span class="string">"4"</span>,<span class="string">"2"</span>,<span class="string">"6"</span>,<span class="string">"8"</span>,<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"7"</span>,<span class="string">"9"</span>,<span class="string">"1"</span>],</span><br><span class="line">    [<span class="string">"7"</span>,<span class="string">"1"</span>,<span class="string">"3"</span>,<span class="string">"9"</span>,<span class="string">"2"</span>,<span class="string">"4"</span>,<span class="string">"8"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>],</span><br><span class="line">    [<span class="string">"9"</span>,<span class="string">"6"</span>,<span class="string">"1"</span>,<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"7"</span>,<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"4"</span>],</span><br><span class="line">    [<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"7"</span>,<span class="string">"4"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"6"</span>,<span class="string">"3"</span>,<span class="string">"5"</span>],</span><br><span class="line">    [<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"6"</span>,<span class="string">"1"</span>,<span class="string">"7"</span>,<span class="string">"9"</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><strong><em>My Solution</em></strong> DFS with Backtracking. Adapted from <a href="http://zxi.mytechroad.com/blog/searching/leetcode-37-sudoku-solver/" target="_blank" rel="noopener">this</a> solution.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.row = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line">        self.col = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line">        self.box = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, board: List[List[str]], x:int, y:int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> y == <span class="number">9</span>: <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        next_x = (x + <span class="number">1</span>) % <span class="number">9</span></span><br><span class="line">        next_y = (y + <span class="number">1</span>) <span class="keyword">if</span> next_x == <span class="number">0</span> <span class="keyword">else</span> y</span><br><span class="line">        <span class="keyword">if</span> board[y][x] != <span class="string">'.'</span>: <span class="keyword">return</span> self.solve(board, next_x, next_y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            box_index = int(y/<span class="number">3</span>)*<span class="number">3</span> + int(x/<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> self.row[y][val] <span class="keyword">and</span> <span class="keyword">not</span> self.col[x][val] <span class="keyword">and</span> <span class="keyword">not</span> self.box[box_index][val]):</span><br><span class="line">                self.row[y][val] = <span class="number">1</span></span><br><span class="line">                self.col[x][val] = <span class="number">1</span></span><br><span class="line">                self.box[box_index][val] = <span class="number">1</span></span><br><span class="line">                board[y][x] = str(val)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> self.solve(board, next_x, next_y): <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                self.row[y][val] = <span class="number">0</span></span><br><span class="line">                self.col[x][val] = <span class="number">0</span></span><br><span class="line">                self.box[box_index][val] = <span class="number">0</span></span><br><span class="line">                board[y][x] = <span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveSudoku</span><span class="params">(self, board: List[List[str]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[y][x] != <span class="string">'.'</span>:</span><br><span class="line">                    val = int(board[y][x])</span><br><span class="line">                    box_index = int(y/<span class="number">3</span>)*<span class="number">3</span> + int(x/<span class="number">3</span>)</span><br><span class="line">                    self.row[y][val] = <span class="number">1</span></span><br><span class="line">                    self.col[x][val] = <span class="number">1</span></span><br><span class="line">                    self.box[box_index][val] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.solve(board, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="38-Count-and-Say-8634"><a href="#38-Count-and-Say-8634" class="headerlink" title="38. Count and Say &#8634;"></a><span id="count-and-say">38. Count and Say</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>     <span class="number">1</span></span><br><span class="line"><span class="number">2.</span>     <span class="number">11</span></span><br><span class="line"><span class="number">3.</span>     <span class="number">21</span></span><br><span class="line"><span class="number">4.</span>     <span class="number">1211</span></span><br><span class="line"><span class="number">5.</span>     <span class="number">111221</span></span><br></pre></td></tr></table></figure><p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.</p><p>Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.</p><p>Note: Each term of the sequence of integers will be represented as a string.</p><p>Example 1:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1</span></span><br><span class="line">Output: <span class="string">"1"</span></span><br><span class="line">Input: <span class="number">4</span></span><br><span class="line">Output: <span class="string">"1211"</span></span><br></pre></td></tr></table></figure></p><p><strong><em>My Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n: int)</span> -&gt; str:</span></span><br><span class="line"></span><br><span class="line">        res = <span class="string">'1'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n): <span class="comment"># 1, ... n-1</span></span><br><span class="line">            tmp = res[<span class="number">0</span>]</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            res_new = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(res)):</span><br><span class="line">                <span class="keyword">if</span> res[j] == tmp:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> res[j] != tmp:</span><br><span class="line">                    res_new += str(count) + str(tmp)</span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">                    tmp = res[j]  </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> j == len(res)<span class="number">-1</span>:</span><br><span class="line">                    res_new += str(count) + str(tmp)</span><br><span class="line"></span><br><span class="line">            res = res_new  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p><h1 id="51-N-Queens-8634"><a href="#51-N-Queens-8634" class="headerlink" title="51. N-Queens &#8634;"></a><span id="n-queens">51. N-Queens</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.<br>Given an integer n, return all distinct solutions to the n-queens puzzle.</p><p>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively.</p><p>Example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">4</span></span><br><span class="line">Output: [</span><br><span class="line"> [<span class="string">".Q.."</span>,  // Solution <span class="number">1</span></span><br><span class="line">  <span class="string">"...Q"</span>,</span><br><span class="line">  <span class="string">"Q..."</span>,</span><br><span class="line">  <span class="string">"..Q."</span>],</span><br><span class="line"></span><br><span class="line"> [<span class="string">"..Q."</span>,  // Solution <span class="number">2</span></span><br><span class="line">  <span class="string">"Q..."</span>,</span><br><span class="line">  <span class="string">"...Q"</span>,</span><br><span class="line">  <span class="string">".Q.."</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> DFS with Backtracking.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self,  row: int, col: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.n):</span><br><span class="line">                <span class="keyword">if</span> self.board[i][j] == <span class="string">'Q'</span> <span class="keyword">and</span> (i == row <span class="keyword">or</span></span><br><span class="line">                                                j == col <span class="keyword">or</span></span><br><span class="line">                                                i - j == row - col <span class="keyword">or</span></span><br><span class="line">                                                i + j == row + col):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, row: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> row == self.n: <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(self.n):</span><br><span class="line">            <span class="keyword">if</span> self.isEmpty(row, col):</span><br><span class="line">                self.board[row][col] = <span class="string">'Q'</span></span><br><span class="line">                <span class="keyword">if</span> self.solve(row + <span class="number">1</span>): self.result.append([i[:] <span class="keyword">for</span> i <span class="keyword">in</span> self.board])</span><br><span class="line">                self.board[row][col] = <span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n: int)</span> -&gt; List[List[str]]:</span></span><br><span class="line">        self.n      = n</span><br><span class="line">        self.board  = [[<span class="string">'.'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)] <span class="keyword">for</span> j <span class="keyword">in</span> range(n)]</span><br><span class="line">        self.result = []</span><br><span class="line">        self.solve(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [[<span class="string">''</span>.join(i) <span class="keyword">for</span> i <span class="keyword">in</span> j] <span class="keyword">for</span> j <span class="keyword">in</span> self.result]</span><br></pre></td></tr></table></figure></p><p><strong><em>Alternative Solution</em></strong> DFS with Backtracking. Speed is improved by keeping queen’s location in list rather than altering the board during recursion.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(queens, xy_dif, xy_sum)</span>:</span></span><br><span class="line">        p = len(queens)</span><br><span class="line">        <span class="keyword">if</span> p==n:</span><br><span class="line">            result.append(queens)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> q <span class="keyword">not</span> <span class="keyword">in</span> queens <span class="keyword">and</span> p-q <span class="keyword">not</span> <span class="keyword">in</span> xy_dif <span class="keyword">and</span> p+q <span class="keyword">not</span> <span class="keyword">in</span> xy_sum:</span><br><span class="line">                DFS(queens+[q], xy_dif+[p-q], xy_sum+[p+q])  </span><br><span class="line">    result = []</span><br><span class="line">    DFS([],[],[])</span><br><span class="line">    <span class="keyword">return</span> [ [<span class="string">"."</span>*i + <span class="string">"Q"</span> + <span class="string">"."</span>*(n-i<span class="number">-1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> sol] <span class="keyword">for</span> sol <span class="keyword">in</span> result]</span><br></pre></td></tr></table></figure><h1 id="52-N-Queens-II-8634"><a href="#52-N-Queens-II-8634" class="headerlink" title="52. N-Queens II &#8634;"></a><span id="n-queens-2">52. N-Queens II</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Same as 51.</p><h1 id="53-Maximum-Subarray-8634"><a href="#53-Maximum-Subarray-8634" class="headerlink" title="53. Maximum Subarray &#8634;"></a><span id="max-sub-array">53. Maximum Subarray</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p>Example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">4</span>],</span><br><span class="line">Output: <span class="number">6</span></span><br><span class="line">Explanation: [<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>] has the largest sum = <span class="number">6.</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> One Pass.</p><ul><li>Time Complexity: <script type="math/tex">O(N)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lass Solution:        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i<span class="number">-1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                nums[i] += nums[i<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max(nums)</span><br></pre></td></tr></table></figure><p><strong><em>My Solution 2</em></strong> Divide and Conquer.</p><ul><li>Time Complexity: <script type="math/tex">O(N\log N)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conquer</span><span class="params">(self, nums, l, m, r)</span> -&gt; int:</span></span><br><span class="line">        tmp, lsum = <span class="number">0</span>, <span class="number">-10</span>**<span class="number">6</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m, l<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            tmp = tmp + nums[i]</span><br><span class="line">            <span class="keyword">if</span> tmp &gt; lsum: lsum = tmp</span><br><span class="line"></span><br><span class="line">        tmp, rsum = <span class="number">0</span>, <span class="number">-10</span>**<span class="number">6</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m+<span class="number">1</span>, r+<span class="number">1</span>):</span><br><span class="line">            tmp = tmp + nums[i]</span><br><span class="line">            <span class="keyword">if</span> tmp &gt; rsum: rsum = tmp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lsum + rsum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(self, nums, l, r)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> l == r:</span><br><span class="line">            <span class="keyword">return</span> nums[l]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m = (l + r) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> max(self.divide(nums, l, m),</span><br><span class="line">                       self.divide(nums, m+<span class="number">1</span>, r),</span><br><span class="line">                       self.conquer(nums, l, m, r))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.divide(nums, <span class="number">0</span>, len(nums)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h1 id="58-Length-of-Last-Word-8634"><a href="#58-Length-of-Last-Word-8634" class="headerlink" title="58. Length of Last Word &#8634;"></a><span id="length-of-last-word">58. Length of Last Word</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.</p><p>If the last word does not exist, return 0.</p><p>Note: A word is defined as a character sequence consists of non-space characters only.</p><p>Example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"Hello World"</span></span><br><span class="line">Output: <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        i, j = len(s)<span class="number">-1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> s[i] == <span class="string">' '</span> <span class="keyword">and</span> i &gt;= <span class="number">0</span>: i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> s[i-j] != <span class="string">' '</span> <span class="keyword">and</span> i-j &gt;= <span class="number">0</span>: j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure></p><p><strong><em>Alternative Solution</em></strong> One Liner.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> s.split() <span class="keyword">else</span> len(s.split()[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></p><h1 id="66-Plus-One-8634"><a href="#66-Plus-One-8634" class="headerlink" title="66. Plus One &#8634;"></a><span id="plus-one">66. Plus One</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a non-empty array of digits representing a non-negative integer, plus one to the integer.</p><p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p><p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">Output: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">Explanation: The array represents the integer <span class="number">123.</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> Recursion.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">return</span> self.plusOneFunc(digits, len(digits)<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOneFunc</span><span class="params">(self, l, i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> l[i] == <span class="number">9</span>:</span><br><span class="line">            l[i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> self.plusOneFunc(l, i<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = [<span class="number">1</span>] + l</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l[i] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure></p><h1 id="67-Add-Binary-8634"><a href="#67-Add-Binary-8634" class="headerlink" title="67. Add Binary &#8634;"></a><span id="add-binary">67. Add Binary</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given two binary strings, return their sum (also a binary string).</p><p>The input strings are both non-empty and contains only characters 1 or 0.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = <span class="string">"11"</span>, b = <span class="string">"1"</span></span><br><span class="line">Output: <span class="string">"100"</span></span><br></pre></td></tr></table></figure><p><strong><em>Alternative Solution</em></strong> Recursion.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a: str, b: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> len(a)==<span class="number">0</span>: <span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">if</span> len(b)==<span class="number">0</span>: <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> a[<span class="number">-1</span>] == <span class="string">'1'</span> <span class="keyword">and</span> b[<span class="number">-1</span>] == <span class="string">'1'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.addBinary(self.addBinary(a[<span class="number">0</span>:<span class="number">-1</span>],b[<span class="number">0</span>:<span class="number">-1</span>]),<span class="string">'1'</span>)+<span class="string">'0'</span></span><br><span class="line">        <span class="keyword">elif</span> a[<span class="number">-1</span>] == <span class="string">'0'</span> <span class="keyword">and</span> b[<span class="number">-1</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.addBinary(a[<span class="number">0</span>:<span class="number">-1</span>],b[<span class="number">0</span>:<span class="number">-1</span>])+<span class="string">'0'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.addBinary(a[<span class="number">0</span>:<span class="number">-1</span>],b[<span class="number">0</span>:<span class="number">-1</span>])+<span class="string">'1'</span></span><br></pre></td></tr></table></figure></p><h1 id="69-Sqrt-x-8634"><a href="#69-Sqrt-x-8634" class="headerlink" title="69. Sqrt(x) &#8634;"></a><span id="binary-search">69. Sqrt(x)</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Implement int sqrt(int x).</p><p>Compute and return the square root of x, where x is guaranteed to be a non-negative integer.</p><p>Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">4</span></span><br><span class="line">Output: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> Binary Search.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        l, r = <span class="number">0</span>, x</span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            m = (l + r) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> m*m &lt;= x &lt; (m+<span class="number">1</span>)*(m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> m</span><br><span class="line">            <span class="keyword">elif</span> m*m &gt; x:</span><br><span class="line">                r = m</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = m + <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h1 id="70-Climbing-Stairs-8634"><a href="#70-Climbing-Stairs-8634" class="headerlink" title="70. Climbing Stairs &#8634;"></a><span id="climb-stairs">70. Climbing Stairs</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>You are climbing a stair case. It takes n steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p>Note: Given n will be a positive integer.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">2</span></span><br><span class="line">Output: <span class="number">2</span></span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line"><span class="number">1.</span> <span class="number">1</span> step + <span class="number">1</span> step</span><br><span class="line"><span class="number">2.</span> <span class="number">2</span> steps</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> Recursion.</p><ul><li>Time Complexity: <script type="math/tex">O(2^N)</script></li><li>Space Complexity: <script type="math/tex">O(N)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.climbStairs(n - <span class="number">1</span>) + self.climbStairs(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong><em>My Solution 2</em></strong> Fibonacci Number.</p><ul><li>Time Complexity: <script type="math/tex">O(N)</script></li><li>Space Complexity: <script type="math/tex">O(1)</script></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">    a, b  = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h1 id="80-Remove-Duplicates-from-Sorted-Array-II-8634"><a href="#80-Remove-Duplicates-from-Sorted-Array-II-8634" class="headerlink" title="80. Remove Duplicates from Sorted Array II &#8634;"></a><span id="remove-duplicate-sorted-array-2">80. Remove Duplicates from Sorted Array II</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">Your function should <span class="keyword">return</span> length = <span class="number">5</span>, <span class="keyword">with</span> the first five elements of nums being <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span> <span class="keyword">and</span> <span class="number">3</span> respectively.</span><br><span class="line"></span><br><span class="line">It doesn<span class="string">'t matter what you leave beyond the returned length.</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> nums:</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            dup = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] == nums[tmp] <span class="keyword">and</span> <span class="keyword">not</span> dup:</span><br><span class="line">                    tmp += <span class="number">1</span></span><br><span class="line">                    dup = <span class="keyword">True</span></span><br><span class="line">                    nums[tmp] = nums[i]</span><br><span class="line">                <span class="keyword">elif</span> nums[i] == nums[tmp] <span class="keyword">and</span> dup:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">elif</span> nums[i] != nums[tmp]:</span><br><span class="line">                    tmp += <span class="number">1</span></span><br><span class="line">                    dup = <span class="keyword">False</span></span><br><span class="line">                    nums[tmp] = nums[i]</span><br><span class="line">            <span class="keyword">return</span> tmp + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p><strong><em>Alternative Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">2</span> <span class="keyword">or</span> n &gt; nums[i<span class="number">-2</span>]:</span><br><span class="line">            nums[i] = n</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure></p><h1 id="82-Remove-Duplicates-from-Sorted-List-II-8634"><a href="#82-Remove-Duplicates-from-Sorted-List-II-8634" class="headerlink" title="82. Remove Duplicates from Sorted List II &#8634;"></a><span id="remove-duplicate-sorted-list-2">82. Remove Duplicates from Sorted List II</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.</p><p>Example 1:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">Output: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        init = ListNode(<span class="number">0</span>)</span><br><span class="line">        prev = init</span><br><span class="line">        prev.next = head</span><br><span class="line">        curr = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            <span class="keyword">if</span> curr.next <span class="keyword">and</span> curr.val == curr.next.val:</span><br><span class="line">                <span class="keyword">while</span> curr.next <span class="keyword">and</span> curr.val == curr.next.val:</span><br><span class="line">                    curr.next = curr.next.next</span><br><span class="line">                prev.next = curr.next</span><br><span class="line">                curr = curr.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr = curr.next</span><br><span class="line">                prev = prev.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> init.next</span><br></pre></td></tr></table></figure></p><h1 id="83-Remove-Duplicates-from-Sorted-List-8634"><a href="#83-Remove-Duplicates-from-Sorted-List-8634" class="headerlink" title="83. Remove Duplicates from Sorted List &#8634;"></a><span id="remove-duplicate-sorted-list">83. Remove Duplicates from Sorted List</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p><p>Example 1:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;2</span><br><span class="line">Output: 1-&gt;2</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        tmp = head</span><br><span class="line">        <span class="keyword">while</span> tmp:</span><br><span class="line">            <span class="keyword">while</span> tmp.next <span class="keyword">and</span> tmp.val == tmp.next.val:</span><br><span class="line">                tmp.next = tmp.next.next</span><br><span class="line">            tmp = tmp.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure></p><h1 id="88-Merge-Sorted-Array-8634"><a href="#88-Merge-Sorted-Array-8634" class="headerlink" title="88. Merge Sorted Array &#8634;"></a><span id="merge-sorted-array">88. Merge Sorted Array</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p><p>Note:</p><p>The number of elements initialized in nums1 and nums2 are m and n respectively.<br>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.<br>Example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">nums1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], m = <span class="number">3</span></span><br><span class="line">nums2 = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>],       n = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Output: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1: List[int], m: int, nums2: List[int], n: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">while</span> m &gt; <span class="number">0</span> <span class="keyword">and</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> nums1[m<span class="number">-1</span>] &gt; nums2[n<span class="number">-1</span>]:</span><br><span class="line">                nums1[m+n<span class="number">-1</span>] = nums1[m<span class="number">-1</span>]</span><br><span class="line">                m -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[m+n<span class="number">-1</span>] = nums2[n<span class="number">-1</span>]</span><br><span class="line">                n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            nums1[:n] = nums2[:n]</span><br></pre></td></tr></table></figure></p><h1 id="94-Binary-Tree-Inorder-Traversal-8634"><a href="#94-Binary-Tree-Inorder-Traversal-8634" class="headerlink" title="94. Binary Tree Inorder Traversal &#8634;"></a><span id="binary-tree-inorder-traversal">94. Binary Tree Inorder Traversal</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p><p>Example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,null,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">   <span class="number">1</span></span><br><span class="line">    \</span><br><span class="line">     <span class="number">2</span></span><br><span class="line">    /</span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Output: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> Recursion.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        self.func(root, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, root, res)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            self.func(root.left, res)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            self.func(root.right, res)</span><br></pre></td></tr></table></figure></p><p><strong><em>Alternative Solution</em></strong> Iteration.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    res, stack = [], []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            stack.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        res.append(node.val)</span><br><span class="line">        root = node.right</span><br></pre></td></tr></table></figure></p><h1 id="96-Unique-Binary-Search-Trees-8634"><a href="#96-Unique-Binary-Search-Trees-8634" class="headerlink" title="96. Unique Binary Search Trees &#8634;"></a><span id="unique-binary-search-tree">96. Unique Binary Search Trees</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?</p><p>Example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">3</span></span><br><span class="line">Output: <span class="number">5</span></span><br><span class="line">Explanation:</span><br><span class="line">Given n = <span class="number">3</span>, there are a total of <span class="number">5</span> unique BST<span class="string">'s:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   1         3     3      2      1</span></span><br><span class="line"><span class="string">    \       /     /      / \      \</span></span><br><span class="line"><span class="string">     3     2     1      1   3      2</span></span><br><span class="line"><span class="string">    /     /       \                 \</span></span><br><span class="line"><span class="string">   2     1         2                 3</span></span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> DP.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numTrees</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        f = [<span class="number">1</span>]    </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                tmp += f[j] * f[i-j<span class="number">-1</span>]</span><br><span class="line">            f.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> f[n]</span><br></pre></td></tr></table></figure></p><h1 id="100-Same-Tree-8634"><a href="#100-Same-Tree-8634" class="headerlink" title="100. Same Tree &#8634;"></a><span id="same-tree">100. Same Tree</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Given two binary trees, write a function to check if they are the same or not.</p><p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p><p>Example 1:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:     <span class="number">1</span>         <span class="number">1</span></span><br><span class="line">          / \       / \</span><br><span class="line">         <span class="number">2</span>   <span class="number">3</span>     <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],   [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong><em>My Solution</em></strong> Recursion.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">and</span> q:</span><br><span class="line">            <span class="keyword">return</span> p.val == q.val <span class="keyword">and</span></span><br><span class="line">                   self.isSameTree(p.left, q.left) <span class="keyword">and</span></span><br><span class="line">                   self.isSameTree(p.right, q.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Navigation&quot;&gt;&lt;a href=&quot;#Navigation&quot; class=&quot;headerlink&quot; title=&quot;Navigation&quot;&gt;&lt;/a&gt;&lt;span id=&quot;nav&quot;&gt;Navigation&lt;/span&gt;&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Bitcoin Analysis (2): Momentum Strategies</title>
    <link href="http://jackliu234.com/2019/07/algo-2/"/>
    <id>http://jackliu234.com/2019/07/algo-2/</id>
    <published>2019-07-21T04:00:00.000Z</published>
    <updated>2019-09-04T19:05:52.769Z</updated>
    
    <content type="html"><![CDATA[<p>In this research I studied on the performance of simple and exponential moving average crossover strategies, with window sizes chosen by optimizing in-sample PNL, sharpe ratio and 30-day maximum drawdown. The calibrated strategy performs well, earning 500% cumulative return compared to baseline and a sharpe ratio of 1.30. The the 30-day maximum drawdown is similar to the baseline.</p><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Strategy</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>      <th>Maximum Drawdown</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Baseline</td>      <td>0.28</td>      <td>-1.48</td>      <td>0.35</td>    </tr>    <tr>      <th>1</th>      <td>MA</td>      <td>1.54</td>      <td>1.30</td>      <td>0.37</td>    </tr>    <tr>      <th>2</th>      <td>EWMA</td>      <td>1.45</td>      <td>1.10</td>      <td>0.38</td>    </tr>  </tbody></table><a id="more"></a><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>It is no secret that price manipulations have always plagued the rising crypto-market. In this [paper], the auther studies large transactions behind the <code>tether</code> coin, and showed more evidence supporting that each large move in the crypto-market usually only come from the act of only a few. In this type of regime, I argue that technical indicator may be a better bet to profit compared to any attempt to apply fundamental analysis, because an increase in price no longer comes from the increase in a crypto’s intrinsic value, but rather speculation and manipulation. In this exercise I will mainly focus on moving average crossover techniques and its optimization.</p><h1 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> display, HTML, Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas.plotting <span class="keyword">import</span> register_matplotlib_converters</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">register_matplotlib_converters()</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = <span class="string">"serif"</span></span><br><span class="line">plt.rcParams[<span class="string">'font.serif'</span>] = <span class="string">"DejaVu Serif"</span></span><br><span class="line">plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">12</span>, <span class="number">6</span>)</span><br><span class="line">plt.rcParams[<span class="string">'figure.dpi'</span>] = <span class="number">150</span></span><br><span class="line">plt.rcParams[<span class="string">'lines.linewidth'</span>] = <span class="number">0.75</span></span><br><span class="line">pd.set_option(<span class="string">'max_row'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disp</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> display(HTML(df.to_html(max_rows=<span class="number">10</span>, header=<span class="keyword">True</span>).replace(<span class="string">'&lt;table border="1" class="dataframe"&gt;'</span>,<span class="string">'&lt;table&gt;'</span>)))</span><br></pre></td></tr></table></figure><h1 id="Data-Exploration"><a href="#Data-Exploration" class="headerlink" title="Data Exploration"></a>Data Exploration</h1><p>I got the preliminary bitcoin data from <a href="https://api.bitcoincharts.com/v1/csv/" target="_blank" rel="noopener">bitcoincharts</a>. Data include price and volume information recorded by Bitstamp and split by seconds. This provide great granularity that can be grouped into any desirable levels later on.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">'bitstampUSD.csv'</span>, header=<span class="keyword">None</span>, names=[<span class="string">'time'</span>, <span class="string">'price'</span>, <span class="string">'volume'</span>])</span><br><span class="line">data[<span class="string">'time'</span>] = pd.to_datetime(data[<span class="string">'time'</span>], unit=<span class="string">'s'</span>)</span><br><span class="line">data.set_index(<span class="string">'time'</span>, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>Get 3-month treasury data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://fred.stlouisfed.org/graph/fredgraph.csv?id=DTB3'</span></span><br><span class="line">tr  = pd.read_csv(url, index_col=<span class="number">0</span>, parse_dates=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>Data are grouped in to daily, with average applied to price and sum applied to trade volume. The backtest period is selected to be from 2018 to 2019, where the market was in continuous downturn. This ensure that our strategy performs well in adverse scenarios.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df1 = data.loc[<span class="string">'2018-01-01'</span>:<span class="string">'2019-01-01'</span>].resample(<span class="string">'1D'</span>).agg(&#123;<span class="string">'price'</span>: np.mean, <span class="string">'volume'</span>: np.sum&#125;)</span><br><span class="line">df2 = tr.loc[<span class="string">'2018-01-01'</span>:<span class="string">'2019-01-01'</span>]</span><br><span class="line">df = df1.join(df2).replace(<span class="string">'.'</span>, np.NaN).fillna(method=<span class="string">'ffill'</span>).fillna(method=<span class="string">'bfill'</span>).rename(&#123;<span class="string">'DTB3'</span>: <span class="string">'tr'</span>&#125;, axis=<span class="number">1</span>)</span><br><span class="line">df.tr = df.tr.astype(float)/<span class="number">100</span></span><br><span class="line">disp(df)</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>price</th>      <th>volume</th>      <th>tr</th>    </tr>    <tr>      <th>time</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2018-01-01</th>      <td>13386.429268</td>      <td>7688.030685</td>      <td>0.0142</td>    </tr>    <tr>      <th>2018-01-02</th>      <td>14042.643870</td>      <td>16299.669303</td>      <td>0.0142</td>    </tr>    <tr>      <th>2018-01-03</th>      <td>14947.898046</td>      <td>12275.001197</td>      <td>0.0139</td>    </tr>    <tr>      <th>2018-01-04</th>      <td>14802.363927</td>      <td>15004.018593</td>      <td>0.0139</td>    </tr>    <tr>      <th>2018-01-05</th>      <td>15967.972719</td>      <td>16248.914680</td>      <td>0.0137</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2018-12-28</th>      <td>3752.739978</td>      <td>13055.718407</td>      <td>0.0235</td>    </tr>    <tr>      <th>2018-12-29</th>      <td>3862.153295</td>      <td>6901.382332</td>      <td>0.0235</td>    </tr>    <tr>      <th>2018-12-30</th>      <td>3783.210991</td>      <td>5736.453708</td>      <td>0.0235</td>    </tr>    <tr>      <th>2018-12-31</th>      <td>3745.258717</td>      <td>6667.163737</td>      <td>0.0240</td>    </tr>    <tr>      <th>2019-01-01</th>      <td>3709.889253</td>      <td>5149.606277</td>      <td>0.0240</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(df.price, c=<span class="string">'tab:grey'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Bitcoin Price in USD'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_15_0.png" alt="png"></p><h1 id="Simple-Moving-Average"><a href="#Simple-Moving-Average" class="headerlink" title="Simple Moving Average"></a>Simple Moving Average</h1><p>A simple moving average strategy use the cross-over point of two moving averages as the trading signal. Here we use grid-search to find out the window size pair that optimizes our desired metrics, namely P&amp;L, Sharpe ratio and 30-day maximum drawdown.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moving_average</span><span class="params">(df0, ma1, ma2, transactionFee=<span class="number">0</span>, runBaseline=False, returnStats=True, ewma=False)</span>:</span></span><br><span class="line">    df = df0.copy()</span><br><span class="line">    <span class="keyword">if</span> ewma:</span><br><span class="line">        df[<span class="string">'ma'</span>+str(ma1)] = df.price.ewm(span=ma1).mean()</span><br><span class="line">        df[<span class="string">'ma'</span>+str(ma2)] = df.price.ewm(span=ma2).mean()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df[<span class="string">'ma'</span>+str(ma1)] = df.price.rolling(ma1).mean()</span><br><span class="line">        df[<span class="string">'ma'</span>+str(ma2)] = df.price.rolling(ma2).mean()</span><br><span class="line"></span><br><span class="line">    df[<span class="string">'ind'</span>] = df[<span class="string">'ma'</span>+str(ma1)] &gt; df[<span class="string">'ma'</span>+str(ma2)]</span><br><span class="line">    df.dropna(inplace=<span class="keyword">True</span>)</span><br><span class="line">    df[<span class="string">'buy'</span>] = (df.ind != df.ind.shift(<span class="number">1</span>)) &amp; df.ind &amp; (df.index != df.index[<span class="number">0</span>])</span><br><span class="line">    df[<span class="string">'sell'</span>] = (df.ind != df.ind.shift(<span class="number">1</span>)) &amp; df.ind.shift(<span class="number">1</span>) &amp; (df.buy.cumsum() &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> runBaseline:</span><br><span class="line">        df.ind = <span class="number">1</span></span><br><span class="line">        df.buy = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    df[<span class="string">'pnl'</span>] = df.ind * (df.buy.cumsum() &gt; <span class="number">0</span>) * df.price.shift(<span class="number">-1</span>) / df.price</span><br><span class="line">    df.pnl = df.pnl * np.where(df.ind != df.ind.shift(<span class="number">1</span>), <span class="number">1</span>-transactionFee, <span class="number">1</span>)</span><br><span class="line">    df.dropna(inplace=<span class="keyword">True</span>)</span><br><span class="line">    df.pnl.replace(<span class="number">0</span>, <span class="number">1</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> returnStats:</span><br><span class="line">        df[<span class="string">'tr_daily'</span>] = (<span class="number">1</span> + df.tr)**(<span class="number">1</span>/<span class="number">365</span>) - <span class="number">1</span></span><br><span class="line">        pnl            = round(df.pnl.cumprod()[<span class="number">-1</span>], <span class="number">2</span>)</span><br><span class="line">        sharpe_ratio   = round(np.mean(df.pnl<span class="number">-1</span>-df.tr_daily) / np.std(df.pnl<span class="number">-1</span>) * np.sqrt(<span class="number">365</span>), <span class="number">2</span>)</span><br><span class="line">        mdd_dur        = <span class="number">30</span></span><br><span class="line">        max_draw_down  = round(np.max(df.pnl.cumprod().rolling(mdd_dur).max() -</span><br><span class="line">                                     df.pnl.cumprod().shift(mdd_dur)), <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> pnl, sharpe_ratio, max_draw_down</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>First let’s compute the baseline results, from a simple buy and hold strategy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pnl, spr, mdd = moving_average(df, <span class="number">1</span>, <span class="number">1</span>, runBaseline=<span class="keyword">True</span>)</span><br><span class="line">comp = pd.DataFrame(&#123;<span class="string">'Strategy'</span>: <span class="string">'Baseline'</span>, <span class="string">'P&amp;L'</span>: pnl, <span class="string">'Sharpe Ratio'</span>: spr, <span class="string">'Maximum Drawdown'</span>: mdd&#125;, index=[<span class="number">0</span>])</span><br><span class="line">disp(comp)</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Strategy</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>      <th>Maximum Drawdown</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Baseline</td>      <td>0.28</td>      <td>-1.48</td>      <td>0.35</td>    </tr>  </tbody></table><p>Performing grid-search for the optimal window size pair. Note that 25bps of transaction fee is added, this is to reflect the typical fee charged by crypto exchanges. I used coinbase pro’s fee here as an example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fee = <span class="number">0.0025</span></span><br><span class="line">test_range = np.arange(<span class="number">1</span>, <span class="number">61</span>)</span><br><span class="line">result_ma = pd.DataFrame(columns=[<span class="string">'Strategy'</span>,<span class="string">'MA1'</span>, <span class="string">'MA2'</span>, <span class="string">'P&amp;L'</span>, <span class="string">'Sharpe Ratio'</span>, <span class="string">'Maximum Drawdown'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># grid-search</span></span><br><span class="line"><span class="keyword">for</span> ma1 <span class="keyword">in</span> test_range:</span><br><span class="line">    <span class="keyword">for</span> ma2 <span class="keyword">in</span> test_range:</span><br><span class="line">        <span class="keyword">if</span> ma2 &gt; ma1 + <span class="number">3</span>:</span><br><span class="line">            pnl, spr, mdd = moving_average(df, ma1, ma2, transactionFee=fee)</span><br><span class="line">            result_ma = result_ma.append(&#123;<span class="string">'Strategy'</span>: <span class="string">'MA'</span>, <span class="string">'MA1'</span>: ma1, <span class="string">'MA2'</span>: ma2,</span><br><span class="line">                                          <span class="string">'P&amp;L'</span>: pnl,</span><br><span class="line">                                          <span class="string">'Sharpe Ratio'</span>: spr,</span><br><span class="line">                                          <span class="string">'Maximum Drawdown'</span>: mdd&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disp(result_ma.sort_values(<span class="string">'P&amp;L'</span>, ascending=<span class="keyword">False</span>).head())</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Strategy</th>      <th>MA1</th>      <th>MA2</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>      <th>Maximum Drawdown</th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>MA</td>      <td>1</td>      <td>7</td>      <td>1.54</td>      <td>1.30</td>      <td>0.37</td>    </tr>    <tr>      <th>3</th>      <td>MA</td>      <td>1</td>      <td>8</td>      <td>1.31</td>      <td>0.86</td>      <td>0.34</td>    </tr>    <tr>      <th>12</th>      <td>MA</td>      <td>1</td>      <td>17</td>      <td>1.26</td>      <td>0.81</td>      <td>0.33</td>    </tr>    <tr>      <th>11</th>      <td>MA</td>      <td>1</td>      <td>16</td>      <td>1.26</td>      <td>0.81</td>      <td>0.32</td>    </tr>    <tr>      <th>9</th>      <td>MA</td>      <td>1</td>      <td>14</td>      <td>1.25</td>      <td>0.78</td>      <td>0.32</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disp(result_ma.sort_values(<span class="string">'Sharpe Ratio'</span>, ascending=<span class="keyword">False</span>).head())</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Strategy</th>      <th>MA1</th>      <th>MA2</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>      <th>Maximum Drawdown</th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>MA</td>      <td>1</td>      <td>7</td>      <td>1.54</td>      <td>1.30</td>      <td>0.37</td>    </tr>    <tr>      <th>3</th>      <td>MA</td>      <td>1</td>      <td>8</td>      <td>1.31</td>      <td>0.86</td>      <td>0.34</td>    </tr>    <tr>      <th>11</th>      <td>MA</td>      <td>1</td>      <td>16</td>      <td>1.26</td>      <td>0.81</td>      <td>0.32</td>    </tr>    <tr>      <th>12</th>      <td>MA</td>      <td>1</td>      <td>17</td>      <td>1.26</td>      <td>0.81</td>      <td>0.33</td>    </tr>    <tr>      <th>9</th>      <td>MA</td>      <td>1</td>      <td>14</td>      <td>1.25</td>      <td>0.78</td>      <td>0.32</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disp(result_ma.sort_values(<span class="string">'Maximum Drawdown'</span>, ascending=<span class="keyword">True</span>).head())</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Strategy</th>      <th>MA1</th>      <th>MA2</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>      <th>Maximum Drawdown</th>    </tr>  </thead>  <tbody>    <tr>      <th>1129</th>      <td>MA</td>      <td>26</td>      <td>59</td>      <td>0.51</td>      <td>-3.38</td>      <td>0.04</td>    </tr>    <tr>      <th>1099</th>      <td>MA</td>      <td>25</td>      <td>60</td>      <td>0.54</td>      <td>-3.19</td>      <td>0.04</td>    </tr>    <tr>      <th>1130</th>      <td>MA</td>      <td>26</td>      <td>60</td>      <td>0.52</td>      <td>-3.29</td>      <td>0.04</td>    </tr>    <tr>      <th>1160</th>      <td>MA</td>      <td>27</td>      <td>60</td>      <td>0.52</td>      <td>-3.35</td>      <td>0.04</td>    </tr>    <tr>      <th>1128</th>      <td>MA</td>      <td>26</td>      <td>58</td>      <td>0.54</td>      <td>-3.01</td>      <td>0.06</td>    </tr>  </tbody></table><p>Choosing 1-7 as our selected window pair. Plotting the PNL over the 1-year backtest period.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bt = df.copy()</span><br><span class="line">bt[<span class="string">'Baseline: Buy and Hold'</span>] = bt.price/bt.price[<span class="number">0</span>]</span><br><span class="line">bt[<span class="string">'Strategy 1: MA 1-7'</span>]          = moving_average(df.copy(), <span class="number">1</span>, <span class="number">7</span>, returnStats=<span class="keyword">False</span>).pnl.cumprod()</span><br><span class="line">bt[<span class="string">'Strategy 2: MA 1-7 with Fee'</span>] = moving_average(df.copy(), <span class="number">1</span>, <span class="number">7</span>, transactionFee=fee, returnStats=<span class="keyword">False</span>).pnl.cumprod()</span><br><span class="line"></span><br><span class="line">plt.plot(bt.iloc[:, <span class="number">3</span>], c=<span class="string">'tab:grey'</span>)</span><br><span class="line">plt.plot(bt.iloc[:, <span class="number">4</span>], c=<span class="string">'tab:red'</span>)</span><br><span class="line">plt.plot(bt.iloc[:, <span class="number">5</span>], c=<span class="string">'tab:red'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.legend(bt.columns[<span class="number">3</span>:<span class="number">6</span>], frameon=<span class="keyword">False</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Cumulative Asset Value Based on $1 Investment'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_27_0.png" alt="png"></p><p>It seems that the trading fee does not have a material impact on the result. We plot the buy/sell signals as follow.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bt = df.copy()</span><br><span class="line">ma = moving_average(bt, <span class="number">1</span>, <span class="number">7</span>, transactionFee=fee, returnStats=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(bt.price, c=<span class="string">'black'</span>, label=<span class="string">'Bitcoin Price'</span>)</span><br><span class="line">plt.plot(ma.price.loc[ma.buy], <span class="string">'^'</span>, markersize=<span class="number">3</span>, color=<span class="string">'g'</span>, label=<span class="string">'Buy Signal'</span>)</span><br><span class="line">plt.plot(ma.price.loc[ma.sell], <span class="string">'v'</span>, markersize=<span class="number">3</span>, color=<span class="string">'r'</span>, label=<span class="string">'Sell Signal'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_29_0.png" alt="png"></p><h1 id="EWMA"><a href="#EWMA" class="headerlink" title="EWMA"></a>EWMA</h1><p>Perform the same grid-search optimization using EWMA (Exponentially Weighted Moving Averages).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test_range = np.arange(<span class="number">1</span>, <span class="number">61</span>)</span><br><span class="line">result_ewma = pd.DataFrame(columns=[<span class="string">'Strategy'</span>,<span class="string">'MA1'</span>, <span class="string">'MA2'</span>, <span class="string">'P&amp;L'</span>, <span class="string">'Sharpe Ratio'</span>, <span class="string">'Maximum Drawdown'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># grid-search</span></span><br><span class="line"><span class="keyword">for</span> ma1 <span class="keyword">in</span> test_range:</span><br><span class="line">    <span class="keyword">for</span> ma2 <span class="keyword">in</span> test_range:</span><br><span class="line">        <span class="keyword">if</span> ma2 &gt; ma1 + <span class="number">3</span>:</span><br><span class="line">            pnl, spr, mdd = moving_average(df, ma1, ma2, transactionFee=fee, ewma=<span class="keyword">True</span>)</span><br><span class="line">            result_ewma = result_ewma.append(&#123;<span class="string">'Strategy'</span>: <span class="string">'EWMA'</span>, <span class="string">'MA1'</span>: ma1, <span class="string">'MA2'</span>: ma2,</span><br><span class="line">                                    <span class="string">'P&amp;L'</span>: pnl,</span><br><span class="line">                                    <span class="string">'Sharpe Ratio'</span>: spr,</span><br><span class="line">                                    <span class="string">'Maximum Drawdown'</span>: mdd&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disp(result_ewma.sort_values(<span class="string">'P&amp;L'</span>, ascending=<span class="keyword">False</span>).head())</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Strategy</th>      <th>MA1</th>      <th>MA2</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>      <th>Maximum Drawdown</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>EWMA</td>      <td>1</td>      <td>5</td>      <td>1.45</td>      <td>1.10</td>      <td>0.38</td>    </tr>    <tr>      <th>1</th>      <td>EWMA</td>      <td>1</td>      <td>6</td>      <td>1.39</td>      <td>0.98</td>      <td>0.39</td>    </tr>    <tr>      <th>5</th>      <td>EWMA</td>      <td>1</td>      <td>10</td>      <td>1.38</td>      <td>1.01</td>      <td>0.32</td>    </tr>    <tr>      <th>10</th>      <td>EWMA</td>      <td>1</td>      <td>15</td>      <td>1.36</td>      <td>0.99</td>      <td>0.38</td>    </tr>    <tr>      <th>6</th>      <td>EWMA</td>      <td>1</td>      <td>11</td>      <td>1.31</td>      <td>0.87</td>      <td>0.31</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disp(result_ewma.sort_values(<span class="string">'Sharpe Ratio'</span>, ascending=<span class="keyword">False</span>).head())</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Strategy</th>      <th>MA1</th>      <th>MA2</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>      <th>Maximum Drawdown</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>EWMA</td>      <td>1</td>      <td>5</td>      <td>1.45</td>      <td>1.10</td>      <td>0.38</td>    </tr>    <tr>      <th>5</th>      <td>EWMA</td>      <td>1</td>      <td>10</td>      <td>1.38</td>      <td>1.01</td>      <td>0.32</td>    </tr>    <tr>      <th>10</th>      <td>EWMA</td>      <td>1</td>      <td>15</td>      <td>1.36</td>      <td>0.99</td>      <td>0.38</td>    </tr>    <tr>      <th>1</th>      <td>EWMA</td>      <td>1</td>      <td>6</td>      <td>1.39</td>      <td>0.98</td>      <td>0.39</td>    </tr>    <tr>      <th>12</th>      <td>EWMA</td>      <td>1</td>      <td>17</td>      <td>1.31</td>      <td>0.89</td>      <td>0.38</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disp(result_ewma.sort_values(<span class="string">'Maximum Drawdown'</span>, ascending=<span class="keyword">True</span>).head())</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Strategy</th>      <th>MA1</th>      <th>MA2</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>      <th>Maximum Drawdown</th>    </tr>  </thead>  <tbody>    <tr>      <th>797</th>      <td>EWMA</td>      <td>17</td>      <td>42</td>      <td>0.51</td>      <td>-2.34</td>      <td>0.18</td>    </tr>    <tr>      <th>1069</th>      <td>EWMA</td>      <td>25</td>      <td>30</td>      <td>0.53</td>      <td>-2.22</td>      <td>0.18</td>    </tr>    <tr>      <th>1068</th>      <td>EWMA</td>      <td>25</td>      <td>29</td>      <td>0.51</td>      <td>-2.29</td>      <td>0.18</td>    </tr>    <tr>      <th>1067</th>      <td>EWMA</td>      <td>24</td>      <td>60</td>      <td>0.67</td>      <td>-1.92</td>      <td>0.18</td>    </tr>    <tr>      <th>1066</th>      <td>EWMA</td>      <td>24</td>      <td>59</td>      <td>0.67</td>      <td>-1.92</td>      <td>0.18</td>    </tr>  </tbody></table><p>Selecting 1-7 as our window pair. Plotting the cumulative strategy return and buy/sell signals.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bt = df.copy()</span><br><span class="line">bt[<span class="string">'Baseline: Buy and Hold'</span>] = bt.price/bt.price[<span class="number">0</span>]</span><br><span class="line">bt[<span class="string">'Strategy 1: EMWA 1-5 (Best PNL)'</span>]          = moving_average(df.copy(), <span class="number">1</span>, <span class="number">5</span>, returnStats=<span class="keyword">False</span>, ewma=<span class="keyword">True</span>).pnl.cumprod()</span><br><span class="line">bt[<span class="string">'Strategy 2: EMWA 1-5 (Best PNL) with Fee'</span>] = moving_average(df.copy(), <span class="number">1</span>, <span class="number">5</span>, transactionFee=fee, returnStats=<span class="keyword">False</span>, ewma=<span class="keyword">True</span>).pnl.cumprod()</span><br><span class="line"></span><br><span class="line">plt.plot(bt.iloc[:, <span class="number">3</span>], c=<span class="string">'tab:grey'</span>)</span><br><span class="line">plt.plot(bt.iloc[:, <span class="number">4</span>], c=<span class="string">'tab:blue'</span>)</span><br><span class="line">plt.plot(bt.iloc[:, <span class="number">5</span>], c=<span class="string">'tab:blue'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.legend(bt.columns[<span class="number">3</span>:<span class="number">6</span>], frameon=<span class="keyword">False</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Cumulative Asset Value Based on $1 Investment'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_37_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bt = df.copy()</span><br><span class="line">ma = moving_average(bt, <span class="number">1</span>, <span class="number">5</span>, transactionFee=fee, returnStats=<span class="keyword">False</span>, ewma=<span class="keyword">True</span>).copy()</span><br><span class="line"></span><br><span class="line">plt.plot(bt.price, c=<span class="string">'black'</span>, label=<span class="string">'Bitcoin Price'</span>)</span><br><span class="line">plt.plot(ma.price.loc[ma.buy], <span class="string">'^'</span>, markersize=<span class="number">3</span>, color=<span class="string">'g'</span>, label=<span class="string">'Buy Signal'</span>)</span><br><span class="line">plt.plot(ma.price.loc[ma.sell], <span class="string">'v'</span>, markersize=<span class="number">3</span>, color=<span class="string">'r'</span>, label=<span class="string">'Sell Signal'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_38_0.png" alt="png"></p><p>Comparing the MA and EWMA strategies.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bt = df.copy()</span><br><span class="line">bt[<span class="string">'Baseline: Buy and Hold'</span>] = bt.price/bt.price[<span class="number">0</span>]</span><br><span class="line">bt[<span class="string">'Strategy 1: Moving Average 1-7'</span>] = moving_average(df.copy(), <span class="number">1</span>, <span class="number">7</span>, transactionFee=fee, returnStats=<span class="keyword">False</span>).pnl.cumprod()</span><br><span class="line">bt[<span class="string">'Strategy 2: EWMA 1-5'</span>]           = moving_average(df.copy(), <span class="number">1</span>, <span class="number">5</span>, transactionFee=fee, returnStats=<span class="keyword">False</span>, ewma=<span class="keyword">True</span>).pnl.cumprod()</span><br><span class="line"></span><br><span class="line">plt.plot(bt.iloc[:, <span class="number">3</span>], c=<span class="string">'tab:grey'</span>)</span><br><span class="line">plt.plot(bt.iloc[:, <span class="number">4</span>], c=<span class="string">'tab:red'</span>)</span><br><span class="line">plt.plot(bt.iloc[:, <span class="number">5</span>], c=<span class="string">'tab:blue'</span>)</span><br><span class="line">plt.legend(bt.columns[<span class="number">3</span>:<span class="number">6</span>], frameon=<span class="keyword">False</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Cumulative Asset Value Based on $1 Investment'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_40_0.png" alt="png"></p><p>As we can see, the MA strategy slightly outperforms the EWMA strategy in all three metrics.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">comp = comp.append(result_ma.iloc[<span class="number">2</span>, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]], ignore_index=<span class="keyword">True</span>)</span><br><span class="line">comp = comp.append(result_ewma.iloc[<span class="number">0</span>, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]], ignore_index=<span class="keyword">True</span>)</span><br><span class="line">disp(comp)</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>Strategy</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>      <th>Maximum Drawdown</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Baseline</td>      <td>0.28</td>      <td>-1.48</td>      <td>0.35</td>    </tr>    <tr>      <th>1</th>      <td>MA</td>      <td>1.54</td>      <td>1.30</td>      <td>0.37</td>    </tr>    <tr>      <th>2</th>      <td>EWMA</td>      <td>1.45</td>      <td>1.10</td>      <td>0.38</td>    </tr>  </tbody></table><h1 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h1><p>Starting 08-01-2019, I have implemented the optimal MA strategy on a VPS (virtual private server), running 24/7 through the coinbase pro api. Will post update on this periodically.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this research I studied on the performance of simple and exponential moving average crossover strategies, with window sizes chosen by optimizing in-sample PNL, sharpe ratio and 30-day maximum drawdown. The calibrated strategy performs well, earning 500% cumulative return compared to baseline and a sharpe ratio of 1.30. The the 30-day maximum drawdown is similar to the baseline.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Strategy&lt;/th&gt;
      &lt;th&gt;P&amp;amp;L&lt;/th&gt;
      &lt;th&gt;Sharpe Ratio&lt;/th&gt;
      &lt;th&gt;Maximum Drawdown&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Baseline&lt;/td&gt;
      &lt;td&gt;0.28&lt;/td&gt;
      &lt;td&gt;-1.48&lt;/td&gt;
      &lt;td&gt;0.35&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;MA&lt;/td&gt;
      &lt;td&gt;1.54&lt;/td&gt;
      &lt;td&gt;1.30&lt;/td&gt;
      &lt;td&gt;0.37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;EWMA&lt;/td&gt;
      &lt;td&gt;1.45&lt;/td&gt;
      &lt;td&gt;1.10&lt;/td&gt;
      &lt;td&gt;0.38&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Bitcoin Analysis (1): A Classification Approach</title>
    <link href="http://jackliu234.com/2019/07/algo-1/"/>
    <id>http://jackliu234.com/2019/07/algo-1/</id>
    <published>2019-07-20T04:00:00.000Z</published>
    <updated>2019-09-04T19:03:33.303Z</updated>
    
    <content type="html"><![CDATA[<p>In this research I looked at intraday Bitcoin trading based on price and volume information using classification models.</p><table>  <thead>    <tr style="text-align: center;">      <th></th>      <th>Strategy</th>      <th>Precision</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>    </tr>  </thead>  <tbody>    <tr>      <th>10</th>      <td>MLP Classifier</td>      <td>0.55</td>      <td>2.06</td>      <td>1.79</td>    </tr>    <tr>      <th>3</th>      <td>KNN</td>      <td>0.50</td>      <td>1.95</td>      <td>1.85</td>    </tr>    <tr>      <th>0</th>      <td>Baseline</td>      <td>0.00</td>      <td>1.69</td>      <td>1.14</td>    </tr>    <tr>      <th>4</th>      <td>Decision Tree</td>      <td>0.49</td>      <td>1.61</td>      <td>1.84</td>    </tr>    <tr>      <th>5</th>      <td>Random Forest</td>      <td>0.53</td>      <td>1.55</td>      <td>1.16</td>    </tr>    <tr>      <th>8</th>      <td>XGBoost</td>      <td>0.52</td>      <td>1.33</td>      <td>0.86</td>    </tr>    <tr>      <th>9</th>      <td>SVC</td>      <td>0.47</td>      <td>1.31</td>      <td>0.73</td>    </tr>    <tr>      <th>1</th>      <td>Logistic Regression</td>      <td>0.47</td>      <td>1.14</td>      <td>0.47</td>    </tr>    <tr>      <th>7</th>      <td>Gradient Boost</td>      <td>0.48</td>      <td>1.06</td>      <td>0.33</td>    </tr>    <tr>      <th>6</th>      <td>AdaBoost</td>      <td>0.50</td>      <td>0.86</td>      <td>-0.09</td>    </tr>    <tr>      <th>2</th>      <td>Linear Discriminant Analysis</td>      <td>0.47</td>      <td>0.85</td>      <td>-0.17</td>    </tr>  </tbody></table><a id="more"></a><h1 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> imblearn.over_sampling <span class="keyword">import</span> SMOTE</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> set_start_method</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> display, HTML, Image</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold, GridSearchCV</span><br><span class="line"><span class="keyword">from</span> pandas.plotting <span class="keyword">import</span> register_matplotlib_converters</span><br><span class="line"><span class="keyword">from</span> sklearn.discriminant_analysis <span class="keyword">import</span> LinearDiscriminantAnalysis</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier</span><br><span class="line"></span><br><span class="line">register_matplotlib_converters()</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = <span class="string">"serif"</span></span><br><span class="line">plt.rcParams[<span class="string">'font.serif'</span>] = <span class="string">"DejaVu Serif"</span></span><br><span class="line">plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">12</span>, <span class="number">6</span>)</span><br><span class="line">plt.rcParams[<span class="string">'figure.dpi'</span>] = <span class="number">100</span></span><br><span class="line">plt.rcParams[<span class="string">'lines.linewidth'</span>] = <span class="number">0.75</span></span><br><span class="line">pd.set_option(<span class="string">'max_row'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><p>This is a customized function used to plot confusion matrix in python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disp</span><span class="params">(df, max_rows=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> display(HTML(df.to_html(max_rows=max_rows, header=<span class="keyword">True</span>).replace(<span class="string">'&lt;table border="1" class="dataframe"&gt;'</span>,<span class="string">'&lt;table&gt;'</span>)))</span><br></pre></td></tr></table></figure><h1 id="Data-Exploration"><a href="#Data-Exploration" class="headerlink" title="Data Exploration"></a>Data Exploration</h1><p>I got the preliminary bitcoin data from <a href="https://api.bitcoincharts.com/v1/csv/" target="_blank" rel="noopener">bitcoincharts</a>. Data include price and volume information recorded by Bitstamp and split by seconds. This provide great granularity that can be grouped into any desirable levels later on.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">'bitstampUSD.csv'</span>, header=<span class="keyword">None</span>, names=[<span class="string">'time'</span>, <span class="string">'price'</span>, <span class="string">'volume'</span>])</span><br><span class="line">data[<span class="string">'time'</span>] = pd.to_datetime(data[<span class="string">'time'</span>], unit=<span class="string">'s'</span>)</span><br><span class="line">data.set_index(<span class="string">'time'</span>, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>Get 3-month treasury bill price.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://fred.stlouisfed.org/graph/fredgraph.csv?id=DTB3'</span></span><br><span class="line">tr  = pd.read_csv(url, index_col=<span class="number">0</span>, parse_dates=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>We first resample our data by hour. Since most Bitcoin exchanges nowadays have transaction fees, which renders retail trading at a high frequency level unattainable. Therefore I leave out the second and minute level data and combine them into hours. Note that I average the price while summing the volume within an hour.</p><p>A 2 year data window from 2017 to 2019 is used, as this is when Bitcoin and other crypto has come into the attention of the larger public, and mostly importantly, started to be heavily traded. Therefore the training set will be more representative of any future trading environment. The plot below illustrates the total dollar amount traded per hours over time.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df0 = data.resample(<span class="string">'H'</span>).agg(&#123;<span class="string">'price'</span>: np.mean, <span class="string">'volume'</span>: np.sum&#125;).fillna(method=<span class="string">'ffill'</span>)</span><br><span class="line">plt.plot(df0.volume * df0.price, c=<span class="string">'black'</span>)</span><br><span class="line">plt.title(<span class="string">'Bitcoin Dollar Volume in Dollar Term'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_14_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df1  = data.loc[<span class="string">'2017-07-01'</span>:<span class="string">'2019-06-30'</span>].resample(<span class="string">'H'</span>).agg(&#123;<span class="string">'price'</span>: np.mean,</span><br><span class="line">                                                            <span class="string">'volume'</span>: np.sum&#125;).fillna(method=<span class="string">'ffill'</span>)</span><br><span class="line">df2 = tr.loc[<span class="string">'2017-07-01'</span>:<span class="string">'2019-06-30'</span>]</span><br><span class="line">df = df1.join(df2).replace(<span class="string">'.'</span>, np.NaN).fillna(method=<span class="string">'ffill'</span>).fillna(method=<span class="string">'bfill'</span>).rename(&#123;<span class="string">'DTB3'</span>: <span class="string">'tr'</span>&#125;, axis=<span class="number">1</span>)</span><br><span class="line">df.tr = df.tr.astype(float)/<span class="number">100</span></span><br><span class="line">disp(df)</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>price</th>      <th>volume</th>      <th>tr</th>    </tr>    <tr>      <th>time</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2017-07-01 00:00:00</th>      <td>2473.427264</td>      <td>200.793669</td>      <td>0.0104</td>    </tr>    <tr>      <th>2017-07-01 01:00:00</th>      <td>2463.946180</td>      <td>228.853771</td>      <td>0.0104</td>    </tr>    <tr>      <th>2017-07-01 02:00:00</th>      <td>2441.314976</td>      <td>475.068038</td>      <td>0.0104</td>    </tr>    <tr>      <th>2017-07-01 03:00:00</th>      <td>2449.063866</td>      <td>177.876034</td>      <td>0.0104</td>    </tr>    <tr>      <th>2017-07-01 04:00:00</th>      <td>2453.192311</td>      <td>120.916328</td>      <td>0.0104</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2019-06-30 19:00:00</th>      <td>11173.875377</td>      <td>389.958860</td>      <td>0.0208</td>    </tr>    <tr>      <th>2019-06-30 20:00:00</th>      <td>11276.492157</td>      <td>372.471619</td>      <td>0.0208</td>    </tr>    <tr>      <th>2019-06-30 21:00:00</th>      <td>11340.807808</td>      <td>295.522323</td>      <td>0.0208</td>    </tr>    <tr>      <th>2019-06-30 22:00:00</th>      <td>11037.539360</td>      <td>963.543871</td>      <td>0.0208</td>    </tr>    <tr>      <th>2019-06-30 23:00:00</th>      <td>10838.165248</td>      <td>1152.810243</td>      <td>0.0208</td>    </tr>  </tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(df.price, c=<span class="string">'black'</span>)</span><br><span class="line">plt.title(<span class="string">'Bitcoin Price 2017-07-01 to 2019-06-30'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_16_0.png" alt="png"></p><p>We then created several more data fields intending to extract more information from the previous n-hour window</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interval = [<span class="number">6</span>, <span class="number">12</span>, <span class="number">24</span>, <span class="number">48</span>, <span class="number">120</span>] <span class="comment"># 0.25, 0.5, 1, 2, 5 days</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> interval:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> [<span class="string">'price'</span>, <span class="string">'volume'</span>]:</span><br><span class="line">        df[c+<span class="string">'_change_'</span>+str(i)+<span class="string">'H'</span>]   = df[c]/df[c].shift(i)<span class="number">-1</span></span><br><span class="line">        df[c+<span class="string">'_high_'</span>+str(i)+<span class="string">'H'</span>]     = df[c].rolling(i).max().shift(<span class="number">1</span>) / df[c]</span><br><span class="line">        df[c+<span class="string">'_low_'</span>+str(i)+<span class="string">'H'</span>]      = df[c].rolling(i).min().shift(<span class="number">1</span>) / df[c]</span><br><span class="line">        df[c+<span class="string">'_avg_'</span>+str(i)+<span class="string">'H'</span>]      = df[c].rolling(i).mean().shift(<span class="number">1</span>) / df[c]  </span><br><span class="line">        df[c+<span class="string">'_std_'</span>+str(i)+<span class="string">'H'</span>]      = df[c].rolling(i).std().shift(<span class="number">1</span>) / df[c] * np.sqrt(<span class="number">24</span>/i)</span><br><span class="line"></span><br><span class="line">df.dropna(inplace=<span class="keyword">True</span>)</span><br><span class="line">disp(df.head())</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>price</th>      <th>volume</th>      <th>tr</th>      <th>price_change_6H</th>      <th>price_high_6H</th>      <th>price_low_6H</th>      <th>price_avg_6H</th>      <th>price_std_6H</th>      <th>volume_change_6H</th>      <th>volume_high_6H</th>      <th>volume_low_6H</th>      <th>volume_avg_6H</th>      <th>volume_std_6H</th>      <th>price_change_12H</th>      <th>price_high_12H</th>      <th>price_low_12H</th>      <th>price_avg_12H</th>      <th>price_std_12H</th>      <th>volume_change_12H</th>      <th>volume_high_12H</th>      <th>volume_low_12H</th>      <th>volume_avg_12H</th>      <th>volume_std_12H</th>      <th>price_change_24H</th>      <th>price_high_24H</th>      <th>price_low_24H</th>      <th>price_avg_24H</th>      <th>price_std_24H</th>      <th>volume_change_24H</th>      <th>volume_high_24H</th>      <th>volume_low_24H</th>      <th>volume_avg_24H</th>      <th>volume_std_24H</th>      <th>price_change_48H</th>      <th>price_high_48H</th>      <th>price_low_48H</th>      <th>price_avg_48H</th>      <th>price_std_48H</th>      <th>volume_change_48H</th>      <th>volume_high_48H</th>      <th>volume_low_48H</th>      <th>volume_avg_48H</th>      <th>volume_std_48H</th>      <th>price_change_120H</th>      <th>price_high_120H</th>      <th>price_low_120H</th>      <th>price_avg_120H</th>      <th>price_std_120H</th>      <th>volume_change_120H</th>      <th>volume_high_120H</th>      <th>volume_low_120H</th>      <th>volume_avg_120H</th>      <th>volume_std_120H</th>    </tr>    <tr>      <th>time</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2017-07-06 00:00:00</th>      <td>2607.823311</td>      <td>233.619901</td>      <td>0.0102</td>      <td>0.005149</td>      <td>1.001294</td>      <td>0.994877</td>      <td>0.998116</td>      <td>0.005057</td>      <td>-0.539692</td>      <td>2.172459</td>      <td>1.271991</td>      <td>1.710225</td>      <td>0.606196</td>      <td>0.019447</td>      <td>1.001294</td>      <td>0.980924</td>      <td>0.991722</td>      <td>0.010182</td>      <td>-0.137448</td>      <td>2.604881</td>      <td>0.986408</td>      <td>1.724699</td>      <td>0.659083</td>      <td>0.012479</td>      <td>1.001294</td>      <td>0.973805</td>      <td>0.985347</td>      <td>0.008630</td>      <td>-0.708220</td>      <td>3.444264</td>      <td>0.815879</td>      <td>1.940980</td>      <td>0.748083</td>      <td>0.019561</td>      <td>1.008966</td>      <td>0.973805</td>      <td>0.990540</td>      <td>0.006865</td>      <td>0.552344</td>      <td>4.357035</td>      <td>0.644187</td>      <td>1.832178</td>      <td>0.620839</td>      <td>0.054336</td>      <td>1.008966</td>      <td>0.916032</td>      <td>0.966001</td>      <td>0.011353</td>      <td>0.163482</td>      <td>8.713623</td>      <td>0.498690</td>      <td>1.772706</td>      <td>0.491582</td>    </tr>    <tr>      <th>2017-07-06 01:00:00</th>      <td>2592.974565</td>      <td>229.561261</td>      <td>0.0102</td>      <td>-0.005044</td>      <td>1.007028</td>      <td>1.001879</td>      <td>1.004691</td>      <td>0.004088</td>      <td>-0.415935</td>      <td>1.872772</td>      <td>1.017680</td>      <td>1.541597</td>      <td>0.657009</td>      <td>0.011195</td>      <td>1.007028</td>      <td>0.988929</td>      <td>0.999000</td>      <td>0.009511</td>      <td>-0.622775</td>      <td>2.650935</td>      <td>1.003848</td>      <td>1.741677</td>      <td>0.698711</td>      <td>0.011259</td>      <td>1.007028</td>      <td>0.979381</td>      <td>0.991506</td>      <td>0.009179</td>      <td>-0.707043</td>      <td>3.505159</td>      <td>0.830303</td>      <td>1.872374</td>      <td>0.713401</td>      <td>0.009083</td>      <td>1.014744</td>      <td>0.979381</td>      <td>0.996615</td>      <td>0.006895</td>      <td>0.168152</td>      <td>4.434067</td>      <td>0.830303</td>      <td>1.872115</td>      <td>0.625493</td>      <td>0.052367</td>      <td>1.014744</td>      <td>0.921278</td>      <td>0.971965</td>      <td>0.011479</td>      <td>0.003091</td>      <td>8.867680</td>      <td>0.507507</td>      <td>1.805239</td>      <td>0.499861</td>    </tr>    <tr>      <th>2017-07-06 02:00:00</th>      <td>2595.240970</td>      <td>111.498601</td>      <td>0.0102</td>      <td>-0.005029</td>      <td>1.006148</td>      <td>0.999127</td>      <td>1.002969</td>      <td>0.005542</td>      <td>-0.624789</td>      <td>3.855797</td>      <td>2.058871</td>      <td>2.929583</td>      <td>1.561810</td>      <td>0.009963</td>      <td>1.006148</td>      <td>0.989687</td>      <td>0.999049</td>      <td>0.008379</td>      <td>-0.765640</td>      <td>4.551893</td>      <td>2.058871</td>      <td>3.302634</td>      <td>1.296594</td>      <td>0.016319</td>      <td>1.006148</td>      <td>0.978526</td>      <td>0.991104</td>      <td>0.009312</td>      <td>-0.861432</td>      <td>7.216670</td>      <td>1.709488</td>      <td>3.647934</td>      <td>1.347291</td>      <td>0.000808</td>      <td>1.013858</td>      <td>0.978526</td>      <td>0.995932</td>      <td>0.006872</td>      <td>-0.870219</td>      <td>9.129174</td>      <td>1.709488</td>      <td>3.860618</td>      <td>1.283035</td>      <td>0.063050</td>      <td>1.013858</td>      <td>0.920474</td>      <td>0.971530</td>      <td>0.011491</td>      <td>-0.765300</td>      <td>18.257410</td>      <td>1.044891</td>      <td>3.716808</td>      <td>1.029132</td>    </tr>    <tr>      <th>2017-07-06 03:00:00</th>      <td>2601.939179</td>      <td>154.465403</td>      <td>0.0102</td>      <td>0.001575</td>      <td>1.003558</td>      <td>0.996555</td>      <td>0.999547</td>      <td>0.005543</td>      <td>-0.640708</td>      <td>2.783251</td>      <td>0.721835</td>      <td>1.914348</td>      <td>1.612821</td>      <td>0.013029</td>      <td>1.003558</td>      <td>0.987139</td>      <td>0.997297</td>      <td>0.007360</td>      <td>-0.329707</td>      <td>3.285718</td>      <td>0.721835</td>      <td>2.187443</td>      <td>1.098140</td>      <td>0.017659</td>      <td>1.003558</td>      <td>0.976007</td>      <td>0.989220</td>      <td>0.009328</td>      <td>-0.719538</td>      <td>4.131480</td>      <td>0.721835</td>      <td>2.446232</td>      <td>0.882973</td>      <td>-0.004151</td>      <td>1.011248</td>      <td>0.976007</td>      <td>0.993385</td>      <td>0.006859</td>      <td>-0.848249</td>      <td>6.589761</td>      <td>0.721835</td>      <td>2.685895</td>      <td>0.903309</td>      <td>0.062422</td>      <td>1.011248</td>      <td>0.918104</td>      <td>0.969522</td>      <td>0.011449</td>      <td>-0.131612</td>      <td>13.178846</td>      <td>0.721835</td>      <td>2.663309</td>      <td>0.746976</td>    </tr>    <tr>      <th>2017-07-06 04:00:00</th>      <td>2594.198903</td>      <td>323.934946</td>      <td>0.0102</td>      <td>-0.006510</td>      <td>1.006553</td>      <td>0.999528</td>      <td>1.002792</td>      <td>0.005453</td>      <td>-0.093037</td>      <td>1.273228</td>      <td>0.344201</td>      <td>0.771118</td>      <td>0.713993</td>      <td>0.006701</td>      <td>1.006553</td>      <td>0.993343</td>      <td>1.001348</td>      <td>0.005868</td>      <td>-0.345152</td>      <td>1.566764</td>      <td>0.344201</td>      <td>1.023516</td>      <td>0.558260</td>      <td>0.021535</td>      <td>1.006553</td>      <td>0.978919</td>      <td>0.992897</td>      <td>0.009496</td>      <td>-0.492401</td>      <td>1.970058</td>      <td>0.344201</td>      <td>1.115490</td>      <td>0.427613</td>      <td>-0.005803</td>      <td>1.014265</td>      <td>0.978919</td>      <td>0.996261</td>      <td>0.006822</td>      <td>0.102404</td>      <td>2.598252</td>      <td>0.344201</td>      <td>1.225214</td>      <td>0.392388</td>      <td>0.057479</td>      <td>1.014265</td>      <td>0.920843</td>      <td>0.972906</td>      <td>0.011490</td>      <td>1.679001</td>      <td>6.284212</td>      <td>0.344201</td>      <td>1.269372</td>      <td>0.356447</td>    </tr>  </tbody></table><h1 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h1><p>Due to the large number of features created in the last step, we use PCA to reduce the dimensionality of the data. Aside from price, 15 other principal components are retained. Since we mostly care about predicting accuracy, therefore we are okay with losing some interpretability in the PCA process.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = StandardScaler().fit_transform(df.iloc[:, <span class="number">3</span>:])</span><br><span class="line">comp = <span class="number">15</span></span><br><span class="line">pca = PCA(n_components=comp)</span><br><span class="line">X_pca = pca.fit_transform(X)</span><br><span class="line">np.round(pca.explained_variance_ratio_, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.29, 0.23, 0.13, 0.06, 0.05, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01,       0.01, 0.01, 0.01, 0.01])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.round(np.sum(pca.explained_variance_ratio_), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>0.93</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_pca = pd.DataFrame(X_pca, index=df.index, columns = [<span class="string">'PC'</span> + str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, comp+<span class="number">1</span>)])</span><br><span class="line">df = pd.DataFrame(df.iloc[:, <span class="number">0</span>:<span class="number">3</span>]).join(df_pca)</span><br><span class="line">disp(df.head())</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: right;">      <th></th>      <th>price</th>      <th>volume</th>      <th>tr</th>      <th>PC1</th>      <th>PC2</th>      <th>PC3</th>      <th>PC4</th>      <th>PC5</th>      <th>PC6</th>      <th>PC7</th>      <th>PC8</th>      <th>PC9</th>      <th>PC10</th>      <th>PC11</th>      <th>PC12</th>      <th>PC13</th>      <th>PC14</th>      <th>PC15</th>    </tr>    <tr>      <th>time</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2017-07-06 00:00:00</th>      <td>2607.823311</td>      <td>233.619901</td>      <td>0.0102</td>      <td>1.204847</td>      <td>-1.442388</td>      <td>-0.936078</td>      <td>0.562964</td>      <td>-1.802252</td>      <td>-0.126177</td>      <td>-2.115852</td>      <td>0.258446</td>      <td>0.547159</td>      <td>-0.005956</td>      <td>-0.345683</td>      <td>-0.077257</td>      <td>-0.389290</td>      <td>-0.253596</td>      <td>0.501094</td>    </tr>    <tr>      <th>2017-07-06 01:00:00</th>      <td>2592.974565</td>      <td>229.561261</td>      <td>0.0102</td>      <td>1.072486</td>      <td>-0.509851</td>      <td>-1.208146</td>      <td>1.100969</td>      <td>-1.991122</td>      <td>0.106322</td>      <td>-1.995090</td>      <td>0.089313</td>      <td>0.690748</td>      <td>-0.003055</td>      <td>-0.152291</td>      <td>-0.266696</td>      <td>-0.403753</td>      <td>-0.415290</td>      <td>0.602009</td>    </tr>    <tr>      <th>2017-07-06 02:00:00</th>      <td>2595.240970</td>      <td>111.498601</td>      <td>0.0102</td>      <td>6.313332</td>      <td>0.286169</td>      <td>-0.274636</td>      <td>1.772318</td>      <td>-3.465762</td>      <td>0.816421</td>      <td>-5.245687</td>      <td>0.737407</td>      <td>1.652572</td>      <td>0.043234</td>      <td>0.118171</td>      <td>-0.658779</td>      <td>-0.606447</td>      <td>-0.557087</td>      <td>0.499793</td>    </tr>    <tr>      <th>2017-07-06 03:00:00</th>      <td>2601.939179</td>      <td>154.465403</td>      <td>0.0102</td>      <td>1.986983</td>      <td>-0.820551</td>      <td>-1.195466</td>      <td>0.697308</td>      <td>-1.574198</td>      <td>0.289253</td>      <td>-1.100313</td>      <td>0.593288</td>      <td>0.655685</td>      <td>-0.005791</td>      <td>-0.018679</td>      <td>-0.152047</td>      <td>-0.354950</td>      <td>-0.493463</td>      <td>0.640942</td>    </tr>    <tr>      <th>2017-07-06 04:00:00</th>      <td>2594.198903</td>      <td>323.934946</td>      <td>0.0102</td>      <td>-1.350755</td>      <td>-0.873287</td>      <td>-1.805126</td>      <td>0.663435</td>      <td>-0.972641</td>      <td>0.036059</td>      <td>-0.009574</td>      <td>0.000981</td>      <td>0.200082</td>      <td>0.315963</td>      <td>-0.225084</td>      <td>-0.120908</td>      <td>-0.308701</td>      <td>-0.390018</td>      <td>0.597231</td>    </tr>  </tbody></table><h1 id="Modeling"><a href="#Modeling" class="headerlink" title="Modeling"></a>Modeling</h1><p>Train and test sets are created for modeling purpose. Since it is time series data, randomization will not be performed. Rather, both train and test sets are chosen such that they both include a market upturn and market downturn.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train  = df.loc[<span class="string">'2017-07-01'</span>:<span class="string">'2018-06-30'</span>]</span><br><span class="line">test   = df.loc[<span class="string">'2018-07-01'</span>:<span class="string">'2019-06-30'</span>]</span><br></pre></td></tr></table></figure><p>Here we specify some modeling parameters. The trading frequency is set to one day.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trade_interval      = <span class="string">'1H'</span></span><br><span class="line">trade_interval_min  = <span class="number">60</span></span><br><span class="line">ann_factor          = <span class="number">24</span> * <span class="number">365</span></span><br><span class="line">training_threshold  = <span class="number">0.0075</span></span><br><span class="line">transaction_fee     = <span class="number">0.0025</span></span><br></pre></td></tr></table></figure><p>Create a model engine that fit the train data and use grid search CV to tune the parameter grid. A long trade will be executed only if the model predict a next-5-day up move in the last 24 consecutive hours. This limits the frequency of trade which reduce the impact of the relatively large transaction fee per trade. The training threshold is set to 75 bps, which means the model is train to identify a potential up move of more than 75 bps in the next 5 days.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_model</span><span class="params">(Model, model_name, param, param_init, param_grid, search=False)</span>:</span></span><br><span class="line">    <span class="comment"># prepare data</span></span><br><span class="line">    train_copy = train.resample(trade_interval).first()</span><br><span class="line">    test_copy = test.resample(trade_interval).first()</span><br><span class="line">    train_copy.dropna(inplace=<span class="keyword">True</span>)</span><br><span class="line">    test_copy.dropna(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    indicator = <span class="number">24</span>  <span class="comment"># hr</span></span><br><span class="line">    offset    = <span class="number">120</span> <span class="comment"># hr</span></span><br><span class="line"></span><br><span class="line">    X_train = train_copy.iloc[:-offset, <span class="number">3</span>:]</span><br><span class="line">    Y_train = (train_copy.price.shift(-offset)/train_copy.price)[:-offset] &gt; (<span class="number">1</span> + training_threshold)</span><br><span class="line">    X_test  = test_copy.iloc[:-offset, <span class="number">3</span>:]</span><br><span class="line">    Y_test  = (test_copy.price.shift(-offset)/test_copy.price)[:-offset] &gt; (<span class="number">1</span> + training_threshold)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># run model</span></span><br><span class="line">    <span class="keyword">if</span> search:</span><br><span class="line">        model = GridSearchCV(estimator=Model(**param_init),</span><br><span class="line">                             cv=KFold(n_splits=<span class="number">5</span>, random_state=<span class="number">0</span>),</span><br><span class="line">                             scoring=<span class="string">'precision'</span>,</span><br><span class="line">                             param_grid=param_grid).fit(X_train, Y_train)</span><br><span class="line">        print(<span class="string">f'cv precision: <span class="subst">&#123;round(model.best_score_, <span class="number">2</span>)&#125;</span>, best param: <span class="subst">&#123;model.best_params_&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model = Model(**param).fit(X_train, Y_train)</span><br><span class="line"></span><br><span class="line">    Y_pred    = model.predict(X_test)</span><br><span class="line">    cm        = confusion_matrix(Y_test, Y_pred)</span><br><span class="line">    precision = round(cm[<span class="number">1</span>][<span class="number">1</span>]/(cm[<span class="number">1</span>][<span class="number">1</span>] + cm[<span class="number">0</span>][<span class="number">1</span>]), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># calculate pnl</span></span><br><span class="line">    <span class="comment"># test_copy['ind']     = np.append(Y_pred, False)</span></span><br><span class="line">    <span class="comment"># test_copy['pnl']     = test_copy.ind * (test_copy.price.shift(-1) / test_copy.price)</span></span><br><span class="line">    test_copy[<span class="string">'pred'</span>] = np.append(Y_pred, [<span class="keyword">False</span>] * offset)</span><br><span class="line">    test_copy[<span class="string">'ind'</span>]  = test_copy.pred.rolling(indicator).sum() == indicator</span><br><span class="line">    test_copy[<span class="string">'buy'</span>]  = test_copy.ind.rolling(offset).sum() &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    test_copy[<span class="string">'pnl'</span>]  = test_copy.buy * (test_copy.price.shift(<span class="number">-1</span>) / test_copy.price)</span><br><span class="line">    test_copy.pnl.replace(<span class="number">0</span>, <span class="number">1</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">    test_copy.dropna(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    test_copy[<span class="string">'fee'</span>]  = np.where(test_copy.ind != test_copy.ind.shift(<span class="number">1</span>), <span class="number">1</span>-transaction_fee, <span class="number">1</span>)</span><br><span class="line">    test_copy.pnl     *= test_copy.fee</span><br><span class="line"></span><br><span class="line">    test_pnl  = round(test_copy.pnl.cumprod()[<span class="number">-1</span>], <span class="number">2</span>)</span><br><span class="line">    test_spr  = round(np.mean(test_copy.pnl - <span class="number">1</span> - test_copy.tr/(ann_factor))</span><br><span class="line">                      / (test_copy.pnl - <span class="number">1</span>).std() * np.sqrt(ann_factor), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'test precision: <span class="subst">&#123;precision&#125;</span>; pnl: <span class="subst">&#123;test_pnl&#125;</span>, spr: <span class="subst">&#123;test_spr&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> test_copy.pnl, precision, test_pnl, test_spr</span><br></pre></td></tr></table></figure><h2 id="Baseline"><a href="#Baseline" class="headerlink" title="Baseline"></a>Baseline</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">baseline        = test.resample(trade_interval).first()</span><br><span class="line">baseline[<span class="string">'pnl'</span>] = baseline.price / baseline.price.shift(<span class="number">1</span>) - <span class="number">1</span></span><br><span class="line">baseline_pnl    = round(baseline.price.iloc[<span class="number">-1</span>] / baseline.price.iloc[<span class="number">0</span>], <span class="number">2</span>)</span><br><span class="line">baseline_spr    = round(np.mean(baseline.pnl - baseline.tr/(ann_factor))</span><br><span class="line">                        / baseline.pnl.std() * np.sqrt(ann_factor), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">result = test[[<span class="string">'price'</span>]].copy().rename(&#123;<span class="string">'price'</span>: <span class="string">'Baseline'</span>&#125;, axis=<span class="number">1</span>)/test.price.iloc[<span class="number">0</span>]*<span class="number">1000</span></span><br><span class="line">comp = pd.DataFrame(&#123;<span class="string">'Strategy'</span>: <span class="string">'Baseline'</span>, <span class="string">'Precision'</span>: <span class="string">'NA'</span>,</span><br><span class="line">                     <span class="string">'P&amp;L'</span>: baseline_pnl, <span class="string">'Sharpe Ratio'</span>: baseline_spr&#125;, index=[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">f'test precision: <span class="subst">&#123;np.NaN&#125;</span>; pnl: <span class="subst">&#123;baseline_pnl&#125;</span>, spr: <span class="subst">&#123;baseline_spr&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>test precision: nan; pnl: 1.69, spr: 1.14</p><h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Model      = LogisticRegression</span><br><span class="line">model_name = <span class="string">'Logistic Regression'</span></span><br><span class="line">param      = &#123;<span class="string">'class_weight'</span>:<span class="string">'balanced'</span>,</span><br><span class="line">              <span class="string">'solver'</span>:<span class="string">'liblinear'</span>,</span><br><span class="line">              <span class="string">'random_state'</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="string">'C'</span>: <span class="number">0.001</span>,</span><br><span class="line">              <span class="string">'penalty'</span>: <span class="string">'l2'</span>&#125;</span><br><span class="line">param_init = &#123;<span class="string">'random_state'</span>: <span class="number">0</span>, <span class="string">'class_weight'</span>: <span class="string">'balanced'</span>&#125;</span><br><span class="line">param_grid = &#123;<span class="string">'C'</span>: [<span class="number">1e-2</span>, <span class="number">1e-1</span>, <span class="number">1</span>, <span class="number">10</span>], <span class="string">'penalty'</span>: [<span class="string">'l1'</span>, <span class="string">'l2'</span>]&#125;</span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.52, best param: {‘C’: 0.01, ‘penalty’: ‘l1’}<br>test precision: 0.47; pnl: 1.14, spr: 0.47</p><h2 id="Linear-Discriminant-Analysis"><a href="#Linear-Discriminant-Analysis" class="headerlink" title="Linear Discriminant Analysis"></a>Linear Discriminant Analysis</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Model      = LinearDiscriminantAnalysis</span><br><span class="line">model_name = <span class="string">'Linear Discriminant Analysis'</span></span><br><span class="line">param      = &#123;<span class="string">'solver'</span>: <span class="string">'svd'</span>, <span class="string">'n_components'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line">param_init = &#123;&#125;</span><br><span class="line">param_grid = &#123;<span class="string">'solver'</span>: [<span class="string">'svd'</span>, <span class="string">'lsqr'</span>], <span class="string">'n_components'</span>: [<span class="keyword">None</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>]&#125;</span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.5, best param: {‘n_components’: None, ‘solver’: ‘svd’}<br>test precision: 0.47; pnl: 0.85, spr: -0.17</p><h2 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Model      = KNeighborsClassifier</span><br><span class="line">model_name = <span class="string">'KNN'</span></span><br><span class="line">param      = &#123;<span class="string">'p'</span>: <span class="number">2</span>, <span class="string">'leaf_size'</span>: <span class="number">2</span>, <span class="string">'n_neighbors'</span>: <span class="number">100</span>&#125;</span><br><span class="line">param_init = &#123;<span class="string">'p'</span>: <span class="number">2</span>&#125;</span><br><span class="line">param_grid = &#123;<span class="string">'n_neighbors'</span>: [<span class="number">5</span>, <span class="number">25</span>, <span class="number">100</span>], <span class="string">'leaf_size'</span>: [<span class="number">2</span>, <span class="number">25</span>, <span class="number">100</span>]&#125;</span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.53, best param: {‘leaf_size’: 2, ‘n_neighbors’: 100}<br>test precision: 0.5; pnl: 1.95, spr: 1.85</p><h2 id="Decision-Tree"><a href="#Decision-Tree" class="headerlink" title="Decision Tree"></a>Decision Tree</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Model      = DecisionTreeClassifier</span><br><span class="line">model_name = <span class="string">'Decision Tree'</span></span><br><span class="line">param      = &#123;<span class="string">'random_state'</span>:<span class="number">0</span>, <span class="string">'criterion'</span>: <span class="string">'gini'</span>, <span class="string">'max_depth'</span>: <span class="keyword">None</span>, <span class="string">'max_features'</span>: <span class="number">10</span>&#125;</span><br><span class="line">param_init = &#123;<span class="string">'random_state'</span>:<span class="number">0</span>&#125;</span><br><span class="line">param_grid = &#123;<span class="string">'criterion'</span>: [<span class="string">'gini'</span>, <span class="string">'entropy'</span>],</span><br><span class="line">              <span class="string">'max_depth'</span>: [<span class="keyword">None</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>],</span><br><span class="line">              <span class="string">'max_features'</span>: [<span class="keyword">None</span>, <span class="string">'auto'</span>, <span class="number">5</span>, <span class="number">10</span>]&#125;</span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.53, best param: {‘criterion’: ‘gini’, ‘max_depth’: 10, ‘max_features’: 5}<br>test precision: 0.49; pnl: 1.61, spr: 1.84</p><h2 id="Random-Forest"><a href="#Random-Forest" class="headerlink" title="Random Forest"></a>Random Forest</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Model      = RandomForestClassifier</span><br><span class="line">model_name = <span class="string">'Random Forest'</span></span><br><span class="line">param      = &#123;<span class="string">'class_weight'</span>:<span class="string">'balanced'</span>,</span><br><span class="line">              <span class="string">'random_state'</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="string">'criterion'</span>: <span class="string">'entropy'</span>,</span><br><span class="line">              <span class="string">'max_depth'</span>: <span class="number">10</span>,</span><br><span class="line">              <span class="string">'max_features'</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">'n_estimators'</span>: <span class="number">200</span>&#125;</span><br><span class="line">param_init = &#123;<span class="string">'class_weight'</span>:<span class="string">'balanced'</span>, <span class="string">'random_state'</span>: <span class="number">0</span>, <span class="string">'n_estimators'</span>: <span class="number">200</span>&#125;</span><br><span class="line">param_grid = &#123;<span class="string">'criterion'</span>: [<span class="string">'gini'</span>, <span class="string">'entropy'</span>],</span><br><span class="line">              <span class="string">'max_depth'</span>: [<span class="number">5</span>, <span class="number">25</span>],</span><br><span class="line">              <span class="string">'max_features'</span>: [<span class="number">5</span>, <span class="number">10</span>]&#125;</span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.53, best param: {‘criterion’: ‘gini’, ‘max_depth’: 5, ‘max_features’: 10}<br>test precision: 0.53; pnl: 1.55, spr: 1.16</p><h2 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Model      = AdaBoostClassifier</span><br><span class="line">model_name = <span class="string">'AdaBoost'</span></span><br><span class="line">param      = &#123;<span class="string">'random_state'</span>: <span class="number">0</span>, <span class="string">'algorithm'</span>: <span class="string">'SAMME.R'</span>, <span class="string">'n_estimators'</span>: <span class="number">200</span>, <span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;</span><br><span class="line">param_init = &#123;<span class="string">'random_state'</span>: <span class="number">0</span>, <span class="string">'algorithm'</span>: <span class="string">'SAMME.R'</span>, <span class="string">'n_estimators'</span>: <span class="number">200</span>&#125;</span><br><span class="line">param_grid = &#123;<span class="string">'learning_rate'</span>: [<span class="number">1e-2</span>, <span class="number">1e-1</span>, <span class="number">1</span>, <span class="number">10</span>]&#125;</span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.52, best param: {‘learning_rate’: 0.01}<br>test precision: 0.5; pnl: 0.86, spr: -0.09</p><h2 id="Gradient-Boost"><a href="#Gradient-Boost" class="headerlink" title="Gradient Boost"></a>Gradient Boost</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Model      = GradientBoostingClassifier</span><br><span class="line">model_name = <span class="string">'Gradient Boost'</span></span><br><span class="line">param      = &#123;<span class="string">'random_state'</span>: <span class="number">0</span>, <span class="string">'warm_start'</span>: <span class="keyword">True</span>, <span class="string">'n_estimators'</span>: <span class="number">200</span>,</span><br><span class="line">              <span class="string">'max_depth'</span>: <span class="number">10</span>,</span><br><span class="line">              <span class="string">'max_features'</span>: <span class="number">10</span>,</span><br><span class="line">              <span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;</span><br><span class="line">param_init = &#123;<span class="string">'random_state'</span>: <span class="number">0</span>, <span class="string">'warm_start'</span>: <span class="keyword">True</span>, <span class="string">'n_estimators'</span>: <span class="number">200</span>,&#125;</span><br><span class="line">param_grid = &#123;<span class="string">'max_depth'</span>: [<span class="number">5</span>, <span class="number">25</span>],</span><br><span class="line">              <span class="string">'max_features'</span>: [<span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">              <span class="string">'learning_rate'</span>: [<span class="number">1e-2</span>, <span class="number">1e-1</span>, <span class="number">1</span>, <span class="number">10</span>]&#125;</span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.54, best param: {‘learning_rate’: 10, ‘max_depth’: 5, ‘max_features’: 5}<br>test precision: 0.48; pnl: 1.06, spr: 0.33</p><h2 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_start_method(<span class="string">'forkserver'</span>, force=<span class="keyword">True</span>) <span class="comment"># enabling multi-threading</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Model      = XGBClassifier</span><br><span class="line">model_name = <span class="string">'XGBoost'</span></span><br><span class="line">param      = &#123;<span class="string">'n_jobs'</span>:<span class="number">4</span>, <span class="string">'seed'</span>:<span class="number">0</span>, <span class="string">'n_estimators'</span>: <span class="number">200</span>,</span><br><span class="line">              <span class="string">'max_depth'</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">'min_child_weight'</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">'gamma'</span>: <span class="number">10</span>,</span><br><span class="line">              <span class="string">'learning_rate'</span>: <span class="number">0.01</span>&#125;</span><br><span class="line">param_init = &#123;<span class="string">'n_jobs'</span>:<span class="number">4</span>, <span class="string">'seed'</span>:<span class="number">0</span>, <span class="string">'n_estimators'</span>: <span class="number">200</span>&#125;</span><br><span class="line">param_grid = &#123;<span class="string">'max_depth'</span>: [<span class="number">5</span>, <span class="number">25</span>],</span><br><span class="line">              <span class="string">'min_child_weight'</span>: [<span class="number">1</span>, <span class="number">5</span>],</span><br><span class="line">              <span class="string">'gamma'</span>: [<span class="number">1e-2</span>, <span class="number">1e-1</span>, <span class="number">1</span>, <span class="number">10</span>],</span><br><span class="line">              <span class="string">'learning_rate'</span>: [<span class="number">1e-2</span>, <span class="number">1e-1</span>, <span class="number">1</span>, <span class="number">10</span>]&#125;</span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.52, best param: {‘gamma’: 10, ‘learning_rate’: 0.01, ‘max_depth’: 25, ‘min_child_weight’: 1}<br>test precision: 0.52; pnl: 1.33, spr: 0.86</p><h2 id="SVC"><a href="#SVC" class="headerlink" title="SVC"></a>SVC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Model      = SVC</span><br><span class="line">model_name = <span class="string">'SVC'</span></span><br><span class="line">param      = &#123;<span class="string">'probability'</span>:<span class="keyword">True</span>, <span class="string">'class_weight'</span>:<span class="string">'balanced'</span>, <span class="string">'C'</span>: <span class="number">10</span>, <span class="string">'gamma'</span>: <span class="number">0.01</span>&#125;</span><br><span class="line">param_init = &#123;<span class="string">'probability'</span>:<span class="keyword">True</span>, <span class="string">'class_weight'</span>:<span class="string">'balanced'</span>&#125;</span><br><span class="line">param_grid = &#123;<span class="string">'C'</span>: [<span class="number">1e-2</span>, <span class="number">1e-1</span>, <span class="number">1</span>, <span class="number">10</span>],</span><br><span class="line">              <span class="string">'gamma'</span>: [<span class="number">1e-2</span>, <span class="number">1e-1</span>, <span class="number">1</span>, <span class="number">10</span>]&#125;</span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.64, best param: {‘C’: 0.1, ‘gamma’: 1}<br>test precision: 0.47; pnl: 1.31, spr: 0.73</p><h2 id="MLP-Classificer"><a href="#MLP-Classificer" class="headerlink" title="MLP Classificer"></a>MLP Classificer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Model      = MLPClassifier</span><br><span class="line">model_name = <span class="string">'MLP Classifier'</span></span><br><span class="line">param      = &#123;<span class="string">'random_state'</span>: <span class="number">0</span>, <span class="string">'hidden_layer_sizes'</span>: (<span class="number">25</span>, <span class="number">25</span>), <span class="string">'alpha'</span>: <span class="number">0.01</span>&#125;</span><br><span class="line">param_init = &#123;<span class="string">'random_state'</span>: <span class="number">0</span>&#125;</span><br><span class="line">param_grid = &#123;<span class="comment"># 'hidden_layer_sizes': [x for x in itertools.product((5, 25, 100),repeat=2)],</span></span><br><span class="line">              <span class="string">'alpha'</span>             : [<span class="number">1e-2</span>, <span class="number">1e-1</span>, <span class="number">1</span>, <span class="number">10</span>],</span><br><span class="line">              <span class="comment"># 'activation'        : ['identity', 'logistic', 'tanh', 'relu'],</span></span><br><span class="line">              <span class="comment"># 'solver'            : ['lbfgs', 'sgd', 'adam'],</span></span><br><span class="line">              <span class="comment"># 'learning_rate'     : ['constant', 'invscaling', 'adaptive'],</span></span><br><span class="line">              <span class="comment"># 'max_itr'           : [100, 200, 1000]</span></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a, b, c, d = run_model(Model, model_name, param, param_init, param_grid, search=<span class="keyword">True</span>)</span><br><span class="line">result     = result.join(a.cumprod() * <span class="number">1000</span>).rename(&#123;<span class="string">'pnl'</span>: model_name&#125;, axis=<span class="number">1</span>).dropna()</span><br><span class="line">comp       = comp.append(&#123;<span class="string">'Strategy'</span>: model_name, <span class="string">'Precision'</span>: b, <span class="string">'P&amp;L'</span>: c, <span class="string">'Sharpe Ratio'</span>: d&#125;, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>cv precision: 0.53, best param: {‘alpha’: 1}<br>test precision: 0.55; pnl: 2.06, spr: 1.79</p><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>The results are summarized as follow.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disp(comp.replace(<span class="string">'NA'</span>, <span class="number">0</span>).sort_values(<span class="string">'P&amp;L'</span>, ascending=<span class="keyword">False</span>), <span class="number">20</span>)</span><br></pre></td></tr></table></figure><table>  <thead>    <tr style="text-align: center;">      <th></th>      <th>Strategy</th>      <th>Precision</th>      <th>P&amp;L</th>      <th>Sharpe Ratio</th>    </tr>  </thead>  <tbody>    <tr>      <th>10</th>      <td>MLP Classifier</td>      <td>0.55</td>      <td>2.06</td>      <td>1.79</td>    </tr>    <tr>      <th>3</th>      <td>KNN</td>      <td>0.50</td>      <td>1.95</td>      <td>1.85</td>    </tr>    <tr>      <th>0</th>      <td>Baseline</td>      <td>0.00</td>      <td>1.69</td>      <td>1.14</td>    </tr>    <tr>      <th>4</th>      <td>Decision Tree</td>      <td>0.49</td>      <td>1.61</td>      <td>1.84</td>    </tr>    <tr>      <th>5</th>      <td>Random Forest</td>      <td>0.53</td>      <td>1.55</td>      <td>1.16</td>    </tr>    <tr>      <th>8</th>      <td>XGBoost</td>      <td>0.52</td>      <td>1.33</td>      <td>0.86</td>    </tr>    <tr>      <th>9</th>      <td>SVC</td>      <td>0.47</td>      <td>1.31</td>      <td>0.73</td>    </tr>    <tr>      <th>1</th>      <td>Logistic Regression</td>      <td>0.47</td>      <td>1.14</td>      <td>0.47</td>    </tr>    <tr>      <th>7</th>      <td>Gradient Boost</td>      <td>0.48</td>      <td>1.06</td>      <td>0.33</td>    </tr>    <tr>      <th>6</th>      <td>AdaBoost</td>      <td>0.50</td>      <td>0.86</td>      <td>-0.09</td>    </tr>    <tr>      <th>2</th>      <td>Linear Discriminant Analysis</td>      <td>0.47</td>      <td>0.85</td>      <td>-0.17</td>    </tr>  </tbody></table><p>Plotting the cumulative return for each strategy with transaction fee reflected.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(result)</span><br><span class="line">plt.legend(result.columns, frameon=<span class="keyword">False</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">30</span>)</span><br><span class="line">plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(<span class="number">30</span>))</span><br><span class="line">plt.ylabel(<span class="string">'Cumulative Value Based on $1000 Investment'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_58_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this research I looked at intraday Bitcoin trading based on price and volume information using classification models.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: center;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Strategy&lt;/th&gt;
      &lt;th&gt;Precision&lt;/th&gt;
      &lt;th&gt;P&amp;amp;L&lt;/th&gt;
      &lt;th&gt;Sharpe Ratio&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;MLP Classifier&lt;/td&gt;
      &lt;td&gt;0.55&lt;/td&gt;
      &lt;td&gt;2.06&lt;/td&gt;
      &lt;td&gt;1.79&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;KNN&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
      &lt;td&gt;1.95&lt;/td&gt;
      &lt;td&gt;1.85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Baseline&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;1.69&lt;/td&gt;
      &lt;td&gt;1.14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Decision Tree&lt;/td&gt;
      &lt;td&gt;0.49&lt;/td&gt;
      &lt;td&gt;1.61&lt;/td&gt;
      &lt;td&gt;1.84&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Random Forest&lt;/td&gt;
      &lt;td&gt;0.53&lt;/td&gt;
      &lt;td&gt;1.55&lt;/td&gt;
      &lt;td&gt;1.16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;XGBoost&lt;/td&gt;
      &lt;td&gt;0.52&lt;/td&gt;
      &lt;td&gt;1.33&lt;/td&gt;
      &lt;td&gt;0.86&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;SVC&lt;/td&gt;
      &lt;td&gt;0.47&lt;/td&gt;
      &lt;td&gt;1.31&lt;/td&gt;
      &lt;td&gt;0.73&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Logistic Regression&lt;/td&gt;
      &lt;td&gt;0.47&lt;/td&gt;
      &lt;td&gt;1.14&lt;/td&gt;
      &lt;td&gt;0.47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Gradient Boost&lt;/td&gt;
      &lt;td&gt;0.48&lt;/td&gt;
      &lt;td&gt;1.06&lt;/td&gt;
      &lt;td&gt;0.33&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;AdaBoost&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
      &lt;td&gt;0.86&lt;/td&gt;
      &lt;td&gt;-0.09&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Linear Discriminant Analysis&lt;/td&gt;
      &lt;td&gt;0.47&lt;/td&gt;
      &lt;td&gt;0.85&lt;/td&gt;
      &lt;td&gt;-0.17&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Pricing A Variance Swap</title>
    <link href="http://jackliu234.com/2019/07/variance-swap/"/>
    <id>http://jackliu234.com/2019/07/variance-swap/</id>
    <published>2019-07-12T04:00:00.000Z</published>
    <updated>2019-09-04T13:45:46.666Z</updated>
    
    <content type="html"><![CDATA[<p>In this article I examine the risk-neutral pricing of a variance swap, which can be constructed with this elegant formula:</p><script type="math/tex; mode=display">\sigma^2_{strike} = \dfrac{2e^{rT}}{T}\Bigg[\int_0^{S_0e^{rT}} \dfrac{1}{K^2} P(K) dK + \int^{\infty}_{S_0e^{rT}} \dfrac{1}{K^2}C(K)dK\Bigg]</script><a id="more"></a><h1 id="Static-Portfolio-Replication"><a href="#Static-Portfolio-Replication" class="headerlink" title="Static Portfolio Replication"></a>Static Portfolio Replication</h1><p><strong><em>proposition</em></strong> Let <script type="math/tex">f:(0, \infty)\rightarrow\mathbb{R}</script> be twice continuous differentiable so that for any <script type="math/tex">k>0</script> and any <script type="math/tex">s>0</script>, then,</p><script type="math/tex; mode=display">f(s) = f(k) + f'(k)(s-k) + \int_0^kf''(K)(K-s)^+dK + \int_k^{\infty}f''(K)(s-K)^+dK</script><p><strong><em>proof</em></strong> We will prove the case in which <script type="math/tex">s>k</script>; similar proof can be sketched for the other case. When <script type="math/tex">s>k</script>, we have <script type="math/tex">\int_0^kf''(K)(K-s)^+dK = 0</script>. The the second integral can be simplified as:</p><script type="math/tex; mode=display">\int_k^{\infty}f''(K)(s-K)^+dK = \int_k^sf''(K)(s-K)dK</script><p>Using integration by part:</p><script type="math/tex; mode=display">du = f''(K)dK ,\;\; v = s-K \\\rightarrow u = f'(K) ,\;\; dv = -dK</script><p>And,</p><script type="math/tex; mode=display">\begin{align} \int_k^s vdu &= uv |^s_k - \int_k^s udv \\&= f'(K)(s-K) |^s_k - \int_k^s -f'(K)dK \\&= -f'(K)(s-k) + f(s) - f(k) \;\;\square \end{align}</script><p><br></p><p>The above formula shows that <code>any</code> twice-differentiable continuous time-T payoff <script type="math/tex">f(S_T)</script> can be replicated using a <code>static portfolio</code> of:</p><script type="math/tex; mode=display">f(k) \text{ zero-coupon bond} \\f'(k) \text{ forward at } k \\\f''(K) \text{ puts across a continuum of strike } K \text{ from } 0 \text{ to } k \\f''(K) \text{ calls across a continuum of strike } K \text{ from } k \text{ to } \infty</script><p>In practice, discrete set of strike can be used to approximately replicate. For example, given <script type="math/tex">S_0=100</script> and payoff function <script type="math/tex">f(S_T) = \log S_T</script>. Here we choose to replicate with <script type="math/tex">k=100</script> (Though we can theoretically replicate the payoff <script type="math/tex">f</script> with any <script type="math/tex">k\in(0, \infty)</script>, a <script type="math/tex">k</script> close to <script type="math/tex">S_0</script> is typically chosen) and a discrete set of option strikes with increment of <script type="math/tex">5</script> capping at <script type="math/tex">200</script>. In this replicating portfolio we will hold:</p><script type="math/tex; mode=display">\log 100 \text{ zero-coupon bond} \\\dfrac{1}{100} \text{ forward at } 100 \\-\dfrac{5}{97.5^2} \text{ put striked at } 97.5 \\\vdots \\-\dfrac{5}{2.5^2} \text{ put striked at } 2.5 \\\text{and} \\-\dfrac{5}{102.5^2} \text{ call striked at } 102.5 \\\vdots \\-\dfrac{5}{197.5^2} \text{ put striked at } 197.5 \\</script><h1 id="Variance-Swap"><a href="#Variance-Swap" class="headerlink" title="Variance Swap"></a>Variance Swap</h1><p>A <code>variance swap</code> is an over-the-counter financial derivative that allows a party to trade on the future variance of a given underlying security. For example, a trader would pay the <code>realized variance</code> of log-price changes in exchange of a fixed payment called <code>variance strike</code>, normalized by the <code>vega notional</code> into dollar terms. The payoff of the VS is:</p><script type="math/tex; mode=display">\text{Payoff (VS)} = N(\sigma^2_{realized} - \sigma^2_{strike})</script><p>We can calculate the variance strike which results in a zero discounted expectation of the payoff (per unit of vega notional).</p><script type="math/tex; mode=display">\sigma^2_{strike} = \mathbb{E}\sigma^2_{realized}</script><p>Assuming that the underlying process follows a geometric Brownian motion with local volatility <script type="math/tex">\sigma_t</script>:</p><script type="math/tex; mode=display">\dfrac{dS_t}{S_t} = \mu_t dt + \sigma_t dW \\\rightarrow d\log S_t = (\mu_t - \sigma_t^2/2)dt + \sigma_t dW \\\rightarrow logS_T \sim \mathcal{N}(logS_0 + rT -\dfrac{1}{2} \int_0^T \sigma^2_tdt, \;[\dfrac{1}{T}\int_0^T \sigma^2_tdt]\;T)</script><p>Therefore the <code>realized variance</code> of <script type="math/tex">\log S_T</script> is:</p><script type="math/tex; mode=display">\sigma^2_{realized} = \dfrac{1}{T}\int_0^T \sigma_t^2dt</script><p>Furthermore, if we combine the SDE of <script type="math/tex">dS_t</script> and <script type="math/tex">d\log S_t</script>,</p><script type="math/tex; mode=display">\dfrac{dS_t}{S_t} - d\log S_t = \dfrac{\sigma^2_t}{2}dt</script><p>Taking integral on both sides,</p><script type="math/tex; mode=display">\int_0^T\dfrac{dS_t}{S_t} - \log \dfrac{S_T}{S_0} = \int_0^T \dfrac{\sigma^2_t}{2}dt</script><p>Combining with the formula for the realizead variance of <script type="math/tex">\log S_t</script>,</p><script type="math/tex; mode=display">\sigma^2_{realized} = \dfrac{2}{T}[\int_0^T\dfrac{dS_t}{S_t} - \log \dfrac{S_T}{S_0}]</script><p>Using the proposition proven above, we can create a static replication portfolio and replicate the <script type="math/tex">\log S_T</script> payoff.</p><script type="math/tex; mode=display">\begin{align}\sigma^2_{strike} &= \mathbb{E}\sigma^2_{realized} \\&= \mathbb{E}\{\dfrac{2}{T}[\int_0^T\dfrac{dS_t}{S_t} - \log \dfrac{S_T}{S_0}]\} \\&= \dfrac{2}{T}[rT - \log \dfrac{S^{\ast}}{S_0} - \dfrac{Se^{rT} - S^{\ast}}{S^{\ast}} - \int_0^{S^{\ast}} \dfrac{-1}{K^2} (K-S_T)^+dK - \int^{\infty}_{S^{\ast}} \dfrac{-1}{K^2}(S_T-K)^+dK]\end{align}</script><p>If we choose the cutoff as the forward price <script type="math/tex">S^{\ast} = S_0e^{rT}</script>, we can largely simplified the formula as follow:</p><script type="math/tex; mode=display">\sigma^2_{strike} = \dfrac{2e^{rT}}{T}[\int_0^{S_0e^{rT}} \dfrac{1}{K^2} P(K) dK + \int^{\infty}_{S_0e^{rT}} \dfrac{1}{K^2}C(K)dK]</script><p>In conclusion, if we assume a GBM underlying process, the fair-value variance strike can be calculated as the sum of calls and puts across a continuum of strikes.</p><h1 id="Practical-Consideration"><a href="#Practical-Consideration" class="headerlink" title="Practical Consideration"></a>Practical Consideration</h1><p>In practice, variance swap is costly to implement, requires constant hedging and an entire array of options. The advantage of a variance swap is that it is <code>purely exposed to volatility risk</code>, as oppose to an option which contains directional risk.</p><p>The P&amp;L of a variance swap depends directly on the difference between realized and implied volatility. Since historically the implied volatility has been above realized volatility, a.k.a. <code>variance risk premium</code>, volatility arbitrage (rolling short variance trade) can be carried out with variance swaps.</p><p><br><br><br><br>Reference</p><ul><li><em>Variance and Volatility Swaps</em>, FinancialCAD Corporation, <a href="http://docs.fincad.com/support/developerFunc/mathref/VarianceSwaps.htm" target="_blank" rel="noopener">http://docs.fincad.com/support/developerFunc/mathref/VarianceSwaps.htm</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this article I examine the risk-neutral pricing of a variance swap, which can be constructed with this elegant formula:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sigma^2_{strike} = \dfrac{2e^{rT}}{T}\Bigg[\int_0^{S_0e^{rT}} \dfrac{1}{K^2} P(K) dK + \int^{\infty}_{S_0e^{rT}} \dfrac{1}{K^2}C(K)dK\Bigg]&lt;/script&gt;
    
    </summary>
    
    
    
      <category term="Math" scheme="http://jackliu234.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Star Gazing in Fiji</title>
    <link href="http://jackliu234.com/2019/07/fiji/"/>
    <id>http://jackliu234.com/2019/07/fiji/</id>
    <published>2019-07-08T04:00:00.000Z</published>
    <updated>2019-08-23T02:21:15.792Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>A sublime view of the galaxy from the Barefoot Kuata Island. Shot with the <a href="http://www.rokinon.com/lenses/digital-photo-lenses/10mm-f28" target="_blank" rel="noopener">Rokinon 10mm</a> lens.</p><p><img src="img1.jpeg" alt="img1.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;A sublime view of the galaxy from the Barefoot Kuata Island. Shot with the &lt;a href=&quot;http://www.rokinon.com/lenses/digit
      
    
    </summary>
    
    
    
      <category term="Travel" scheme="http://jackliu234.com/tags/Travel/"/>
    
  </entry>
  
  <entry>
    <title>Simluating A Financial Exchange with Socket Server</title>
    <link href="http://jackliu234.com/2019/06/financial-exchange/"/>
    <id>http://jackliu234.com/2019/06/financial-exchange/</id>
    <published>2019-06-24T04:00:00.000Z</published>
    <updated>2019-09-04T19:10:22.481Z</updated>
    
    <content type="html"><![CDATA[<p>On my 20-hour flight back to China, I created a simple financial exchange in python which multiple traders can connect to and place limit order on. This exchange will carry a basic order book, in order to process new orders and keep track of existing orders. The codes are uploaded to this <a href="https://github.com/jackliu234/financial-exchange" target="_blank" rel="noopener">repo</a>.</p><a id="more"></a><h3 id="Socket-Socket"><a href="#Socket-Socket" class="headerlink" title="Socket.Socket"></a>Socket.Socket</h3><p>The backbone of this exercise is built on the communication between an exchange (server) and a trader (client). The python socket library is used. Here we created a socket instance by passing two parameters: <code>AF_INET</code> refers to the address family <code>ipv4</code>; <code>SOCK_STREAM</code> refers to TCP protocols. We then set the options for this socket: here <code>SO_REUSEADDR</code> tells the kernel to reuse a local socket in TIME_WAIT state before timeout.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>For a server, we want to bind to all interfaces and not just the local host. Therefor we specify an empty string and a randomly chosen port when binding the server.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port = <span class="number">8000</span></span><br><span class="line">server.bind((<span class="string">""</span>, port))</span><br></pre></td></tr></table></figure><p>For the client, we need to bind and communicate to the server created above. We create another socket instance also called server in a separte file, and connect to the local host with the same port.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">port = <span class="number">8000</span></span><br><span class="line">server.connect((host, port))</span><br></pre></td></tr></table></figure><h3 id="Select-Select"><a href="#Select-Select" class="headerlink" title="Select.Select"></a>Select.Select</h3><p>We have now created server and client files and need to let them communicate in time. We use the select method from the select library to listen to a list of sockets while filtering out the ones which new activities. We will have infinite loops in both the serve and client files so that we are always listening.</p><p>The server will listen to itself (in order to broadcast new trader entrance) and all the clients.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connection_list = [server, &lt;potential new clients&gt;]</span><br><span class="line">read_sockets, write_sockets, error_sockets = select.select(</span><br><span class="line">        connection_list, [], [])</span><br><span class="line"><span class="keyword">for</span> socket <span class="keyword">in</span> read_sockets:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>The client will listen to the console input (for user input) and the server (for responses on previous request).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">socket_list = [server, sys.stdin]</span><br><span class="line">read_sockets, write_sockets, error_sockets = select.select(</span><br><span class="line">        socket_list, [], [])</span><br><span class="line"><span class="keyword">for</span> socket <span class="keyword">in</span> read_sockets:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="Code-file-amp-Illustration"><a href="#Code-file-amp-Illustration" class="headerlink" title="Code file &amp; Illustration"></a>Code file &amp; Illustration</h3><p>We now open up the <a href="https://github.com/jackliu234/financial-exchange" target="_blank" rel="noopener">exchange.py</a> and <a href="https://github.com/jackliu234/financial-exchange" target="_blank" rel="noopener">trader.py</a> files in order.</p><p>exchange.py:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Liu at RONGJIAs-MacBook <span class="keyword">in</span> ~/Desktop</span><br><span class="line">$ python3 exchange.py</span><br><span class="line">--- exchange initiated ---</span><br></pre></td></tr></table></figure></p><p>trader.py:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Liu at RONGJIAs-MacBook <span class="keyword">in</span> ~/Desktop</span><br><span class="line">$ python3 trader.py localhost 8000</span><br><span class="line">--- connected to exchange ---</span><br><span class="line">trader (127.0.0.1:54945) successfully connected to the exchange</span><br><span class="line">instructions:</span><br><span class="line">enter add_order &lt;price&gt; &lt;quantity&gt; &lt;is_bid&gt; to add <span class="built_in">limit</span> orders</span><br><span class="line">enter bid_ask to request the current bid-ask spread on the exchange</span><br></pre></td></tr></table></figure></p><p>Acting as trader, we added 6 new limit orders and requesting the current bid-ask spread information, which prints the top 3 levels from the bid and ask books.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[127.0.0.1:54945]: add_order 80 100 1</span><br><span class="line">[exchange]: trader (127.0.0.1:54945) has successfully added an <span class="built_in">limit</span> order (price:80 quantity:100)</span><br><span class="line">[127.0.0.1:54945]: add_order 90 100 1</span><br><span class="line">[exchange]: trader (127.0.0.1:54945) has successfully added an <span class="built_in">limit</span> order (price:90 quantity:100)</span><br><span class="line">[127.0.0.1:54945]: add_order 100 100 1</span><br><span class="line">[exchange]: trader (127.0.0.1:54945) has successfully added an <span class="built_in">limit</span> order (price:100 quantity:100)</span><br><span class="line">[127.0.0.1:54945]: add_order 110 100 0</span><br><span class="line">[exchange]: trader (127.0.0.1:54945) has successfully added an <span class="built_in">limit</span> order (price:110 quantity:100)</span><br><span class="line">[127.0.0.1:54945]: add_order 120 100 0</span><br><span class="line">[exchange]: trader (127.0.0.1:54945) has successfully added an <span class="built_in">limit</span> order (price:120 quantity:100)</span><br><span class="line">[127.0.0.1:54945]: add_order 130 100 0</span><br><span class="line">[exchange]: trader (127.0.0.1:54945) has successfully added an <span class="built_in">limit</span> order (price:130 quantity:100)</span><br><span class="line">[127.0.0.1:54945]: bid_ask</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"bids"</span>: &#123;</span><br><span class="line">        <span class="string">"100"</span>: 100,</span><br><span class="line">        <span class="string">"90"</span>: 100,</span><br><span class="line">        <span class="string">"80"</span>: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"asks"</span>: &#123;</span><br><span class="line">        <span class="string">"110"</span>: 100,</span><br><span class="line">        <span class="string">"120"</span>: 100,</span><br><span class="line">        <span class="string">"130"</span>: 100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>We can open up another terminal session and run the trader.py to simulate the entrance of a second trader (do not close the previous sessions). We can check that the bid-ask spread is what we last saw from trader 1.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Liu at RONGJIAs-MacBook <span class="keyword">in</span> ~/Desktop</span><br><span class="line">$ python3 trader.py localhost 8000</span><br><span class="line">--- connected to exchange ---</span><br><span class="line">trader (127.0.0.1:54950) successfully connected to the exchange</span><br><span class="line">instructions:</span><br><span class="line">enter add_order &lt;price&gt; &lt;quantity&gt; &lt;is_bid&gt; to add <span class="built_in">limit</span> orders</span><br><span class="line">enter bid_ask to request the current bid-ask spread on the exchange</span><br><span class="line">[127.0.0.1:54950]: bid_ask</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"bids"</span>: &#123;</span><br><span class="line">        <span class="string">"100"</span>: 100,</span><br><span class="line">        <span class="string">"90"</span>: 100,</span><br><span class="line">        <span class="string">"80"</span>: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"asks"</span>: &#123;</span><br><span class="line">        <span class="string">"110"</span>: 100,</span><br><span class="line">        <span class="string">"120"</span>: 100,</span><br><span class="line">        <span class="string">"130"</span>: 100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The second trader then add a bid order with price equals to 110 which is higher or equal to the current lowest ask price. This triggers an order execution on the exchange, and the order book ask quantity at price 100 is reduced by 10.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[127.0.0.1:54950]: add_order 110 10 1</span><br><span class="line">[exchange]: trader (127.0.0.1:54950) has successfully executed an <span class="built_in">limit</span> order (price:110 quantity:10)</span><br><span class="line">[127.0.0.1:54950]: bid_ask</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"bids"</span>: &#123;</span><br><span class="line">        <span class="string">"100"</span>: 100,</span><br><span class="line">        <span class="string">"90"</span>: 100,</span><br><span class="line">        <span class="string">"80"</span>: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"asks"</span>: &#123;</span><br><span class="line">        <span class="string">"110"</span>: 90,</span><br><span class="line">        <span class="string">"120"</span>: 100,</span><br><span class="line">        <span class="string">"130"</span>: 100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Further-Improvements"><a href="#Further-Improvements" class="headerlink" title="Further Improvements"></a>Further Improvements</h3><p>Obviously this is just a starting point towards building a more robust financial exchanges. Many improvements can be made to exchange functionality, orderbook data structure and user interface. Another interesting application would be extending this to create a strategy backtester.</p><p>During this project I came across <a href="http://beej.us/guide/bgnet/" target="_blank" rel="noopener">Beej’s Guide to Network Programming</a>, which is a valuable online resource for further studies on network programming. I also found the networking examples in this <a href="https://github.com/dnutiu/python-networking" target="_blank" rel="noopener">repo</a> super helpful.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;On my 20-hour flight back to China, I created a simple financial exchange in python which multiple traders can connect to and place limit order on. This exchange will carry a basic order book, in order to process new orders and keep track of existing orders. The codes are uploaded to this &lt;a href=&quot;https://github.com/jackliu234/financial-exchange&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Uncovering the Term Structure of Volatility Skew</title>
    <link href="http://jackliu234.com/2019/06/spx-vol-term-struct/"/>
    <id>http://jackliu234.com/2019/06/spx-vol-term-struct/</id>
    <published>2019-06-13T04:00:00.000Z</published>
    <updated>2019-09-04T19:14:12.568Z</updated>
    
    <content type="html"><![CDATA[<p>In this research, we aim to extract a term structure from the implied volatility skewness under the Black-Scholes framework and S&amp;P 500 adjusted close prices. With the daily close prices over the period of 1970-2018, we calibrate a local volatility function by fitting <code>the BS-implied density based on the Dupire formula</code> (which is the aggregation of a bunch of log-normal densities at each strike, since volatility is not constant and depended on strike) to <code>the observed S&amp;P 500 log return distribution.</code></p><a id="more"></a><p>We start by asssuming that the local volatility as a function of the log-in-the-moneyness <script type="math/tex">x</script> for a fixed maturity window of <script type="math/tex">T</script> business days.</p><script type="math/tex; mode=display">\sigma(x) = g(x) \\\text{ where } x=log(K/S_0)</script><p>Under the Black-Scholes framework with risk-free rate <script type="math/tex">r=0</script>, a call option premium for <script type="math/tex">S_0=1</script> is:</p><script type="math/tex; mode=display">C(K, T) = \Phi(d1) - K\Phi(d2) \\d_{\text{1, 2}} = \dfrac{log(1/K) \pm (\sigma^2/2)T}{\sigma\sqrt{T}}</script><p>If we assume that there exists a probability density function <script type="math/tex">f_{S_T}</script>, we have:</p><script type="math/tex; mode=display">C(K, T) = \int^{\infty}_K(S_T-K)f_{S_T}(S_T)dS_T</script><p>Taking partial derivative w.r.t. <script type="math/tex">K</script>, we get the Dupire formula:</p><script type="math/tex; mode=display">\dfrac{\partial C}{\partial K} = \int^{\infty}_K -f_{S_T}(S_T)dS_T \\\dfrac{\partial^2 C}{\partial K^2} = f_{S_T}(K)</script><p>We can approximate the second-order derivative numerically:</p><script type="math/tex; mode=display">f_{S_T}(K) \approx \dfrac{C(K + \Delta K) - 2C(K) + C(K - \Delta K)}{(\Delta K)^2}</script><p>We previously defined that <script type="math/tex">x = log(K)</script>. Given any <script type="math/tex">\Delta K</script>, let us define <script type="math/tex">\Delta x</script> such that:</p><script type="math/tex; mode=display">\Delta x = \dfrac{\Delta K}{K} \\\text{therefore, } \Delta K = e^{x}\Delta x</script><p>We define <script type="math/tex">r_T</script> as the <script type="math/tex">T</script> period log return, and that <script type="math/tex">r_T=log(S_T)</script>. Based on chain rule:</p><script type="math/tex; mode=display">f_{r_T}(x) = f_{S_T}(K) \times K</script><p>So in conclusion we have:</p><script type="math/tex; mode=display">f_{r_T}(x) = f_{S_T}(K) \times K \approx \dfrac{C(e^x + e^x\Delta x) - 2C(e^x) + C(e^x - e^x\Delta x)}{e^x(\Delta x)^2} \\\text{where } C(x) = \Phi(\dfrac{-x + (\sigma(x)^2/2)T}{\sigma(x)\sqrt{T}}) - e^x\Phi(\dfrac{-x - (\sigma(x)^2/2)T}{\sigma(x)\sqrt{T}}) \text{, and } \sigma(x) = g(x)</script><p>The goal is to find the optimal volatility function <script type="math/tex">g(x)</script> such that <script type="math/tex">f_{r_T}(x)</script> fits to the historical distribution of <script type="math/tex">r_T</script>. Here we use a quadratic form for <script type="math/tex">g(x)</script>:</p><script type="math/tex; mode=display">g(x) = ax^2 + bx + c</script><p>Using sum of square as the objective function, we obtained a set of coefficients of <script type="math/tex">a</script>, <script type="math/tex">b</script>, and <script type="math/tex">c</script> that fit the Dupire density to the empirical density of S&amp;P 500 log returns. This following graph shows the skewness coefficient <script type="math/tex">b</script> plotted against term windows.</p><p><img src="spx-vol-term-struct-output_16_0.png" alt="output_16_0.png"></p><p>We can observe that overall as the time-window increases, the skewness decreases (in absolute values). We also see that the skewness hit a local minimum (in absolute values) at <script type="math/tex">T=100</script>, or 6 month time. This phenomenon is also observed in future trading, and could potentially be explained by the fact that market tends to recover from the left-skewed losses in 6 month time on average.</p><p>Click on this <a href="https://jackliu234.com/project-lab">link</a> to see the jupyter notebook.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this research, we aim to extract a term structure from the implied volatility skewness under the Black-Scholes framework and S&amp;amp;P 500 adjusted close prices. With the daily close prices over the period of 1970-2018, we calibrate a local volatility function by fitting &lt;code&gt;the BS-implied density based on the Dupire formula&lt;/code&gt; (which is the aggregation of a bunch of log-normal densities at each strike, since volatility is not constant and depended on strike) to &lt;code&gt;the observed S&amp;amp;P 500 log return distribution.&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Math" scheme="http://jackliu234.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Creating a Tags Page for Apollo</title>
    <link href="http://jackliu234.com/2019/05/apollo-add-tags/"/>
    <id>http://jackliu234.com/2019/05/apollo-add-tags/</id>
    <published>2019-05-02T04:00:00.000Z</published>
    <updated>2019-09-14T13:55:34.684Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I updated my hexo theme, and as much as I love some of the perks in NexT (e.g. index side bar), I eventually decided to publish with a more simplistic design. I spent quite some time these two days to iron out the kinks during the transition to a cleaner, Apollo-based theme. I have uploaded my fully customized theme, named <code>arctic</code>, on <a href="https://github.com/jackliu234/hexo-theme-apollo" target="_blank" rel="noopener">github</a>. In this post I will discuss a solution for creating a customized tags page.</p><a id="more"></a><h1 id="Creating-the-Tags-Page"><a href="#Creating-the-Tags-Page" class="headerlink" title="Creating the Tags Page"></a>Creating the Tags Page</h1><p>The original <a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="noopener">Apollo</a> theme does not come with a tags layout. Though you can create a tags directory with built-in hexo command <code>hexo new page tags</code>, you have to create your own tags layout file in the <code>themmes/layout</code> directory. Most layouts suggested on the web are only showing the tags in the tags page, with links to another page which shows the articles, such as this <a href="http://aiellochan.com/categories/" target="_blank" rel="noopener">blog</a> and his <a href="https://github.com/AielloChan/hexo-theme-apolloc" target="_blank" rel="noopener">implementation</a>. I actually wanted to show the articles on the same page under each tags. Now the tags page looks like this:</p><p><img src="apollo-add-tags-Screen Shot 2019-05-02 at 1.01.53 PM.png" alt="Screen Shot 2019-05-02 at 1.01.53 PM.png"></p><p>Here a few simple steps to follow:</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>In <code>themes/layout/mixins/post.jade</code> add in the following codes directly below any existing code.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//- Tags Page</span></span><br><span class="line">mixin tagList()</span><br><span class="line">    .archive</span><br><span class="line">        - site.tags.each(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> t.name == <span class="string">'Math'</span></span><br><span class="line">                h2.archive-year!= __(t.name)</span><br><span class="line">                - site.tags.findOne(&#123;<span class="attr">name</span>: t.name&#125;).posts.sort(<span class="string">'date'</span>, <span class="number">-1</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                        .post-item</span><br><span class="line">                            +postInfo(item)</span><br><span class="line">                            a.post-title-link(href= url_for(item.path))</span><br><span class="line">                                != item.title</span><br><span class="line">                - &#125;)</span><br><span class="line">        - &#125;)</span><br><span class="line"></span><br><span class="line">        - site.tags.each(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> t.name == <span class="string">'Tech'</span></span><br><span class="line">                h2.archive-year!= __(t.name)</span><br><span class="line">                - site.tags.findOne(&#123;<span class="attr">name</span>: t.name&#125;).posts.sort(<span class="string">'date'</span>, <span class="number">-1</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                        .post-item</span><br><span class="line">                            +postInfo(item)</span><br><span class="line">                            a.post-title-link(href= url_for(item.path))</span><br><span class="line">                                != item.title</span><br><span class="line">                - &#125;)</span><br><span class="line">        - &#125;)</span><br><span class="line"></span><br><span class="line">        - site.tags.each(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> t.name == <span class="string">'Travel'</span></span><br><span class="line">                h2.archive-year!= __(t.name)</span><br><span class="line">                - site.tags.findOne(&#123;<span class="attr">name</span>: t.name&#125;).posts.sort(<span class="string">'date'</span>, <span class="number">-1</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                        .post-item</span><br><span class="line">                            +postInfo(item)</span><br><span class="line">                            a.post-title-link(href= url_for(item.path))</span><br><span class="line">                                != item.title</span><br><span class="line">                - &#125;)</span><br><span class="line">        - &#125;)</span><br></pre></td></tr></table></figure></p><p>The command <code>site.tags.findOne({name: t.name})</code> returns a <a href="https://github.com/hexojs/warehouse" target="_blank" rel="noopener">warehouse</a> object created by the developers of Hexo.</p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Under <code>themes/apollo/layout/</code> create a file named <code>tags.jade</code> with the following code.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">extends partial/layout</span><br><span class="line"></span><br><span class="line">block container</span><br><span class="line">    include mixins/post</span><br><span class="line">    +tagList()</span><br><span class="line"></span><br><span class="line">block pagination</span><br><span class="line">    include mixins/paginator</span><br><span class="line">    +home()</span><br><span class="line"></span><br><span class="line">block copyright</span><br><span class="line">    include partial/copyright</span><br></pre></td></tr></table></figure></p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>Configure your theme <code>.config.yml</code> file<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">    HOME:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">    TAGS:</span> <span class="string">/tags/</span></span><br><span class="line"><span class="attr">    ABOUT:</span> <span class="string">/about/</span></span><br></pre></td></tr></table></figure></p><p>Configure your site <code>.config.yml</code> file<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure></p><p>Now run command line code <code>hexo new page tags</code> to create the tags page and <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> to deploy the change.</p><p><br><br><br><br>Reference:</p><ul><li><a href="https://blessing.studio/get-hexo-posts-by-category-or-tag/" target="_blank" rel="noopener">https://blessing.studio/get-hexo-posts-by-category-or-tag/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I updated my hexo theme, and as much as I love some of the perks in NexT (e.g. index side bar), I eventually decided to publish with a more simplistic design. I spent quite some time these two days to iron out the kinks during the transition to a cleaner, Apollo-based theme. I have uploaded my fully customized theme, named &lt;code&gt;arctic&lt;/code&gt;, on &lt;a href=&quot;https://github.com/jackliu234/hexo-theme-apollo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;. In this post I will discuss a solution for creating a customized tags page.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>PCA: A Deeper Dive</title>
    <link href="http://jackliu234.com/2019/04/pca-deep-dive/"/>
    <id>http://jackliu234.com/2019/04/pca-deep-dive/</id>
    <published>2019-04-27T04:00:00.000Z</published>
    <updated>2019-09-04T13:18:06.526Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>PCA finds low dimensional representation of a dataset that contains as much as possible of the variation. As each of the <script type="math/tex">n</script> observations lives on a <script type="math/tex">p</script>-dimensional space, and not all dimensions are equally interesting.</p><h1 id="Linear-Algebra-Review"><a href="#Linear-Algebra-Review" class="headerlink" title="Linear Algebra Review"></a>Linear Algebra Review</h1><p>Let <script type="math/tex">A</script> be a <script type="math/tex">n\times n</script> matrix. With <script type="math/tex">n=2, \ 3</script>, the <code>determinant</code> of <script type="math/tex">A</script> can be calculated as follow.</p><script type="math/tex; mode=display">det(\begin{bmatrix}    a & b \\    c & d \\\end{bmatrix} ) = ad - bc</script><script type="math/tex; mode=display">\begin{align} det ( \begin{bmatrix}    a & b & c \\    d & e & f \\    g & h & i \\\end{bmatrix} ) &= aei + bfg + cdh - cdg - bdi - afh \\&= a \times det(    \begin{bmatrix}        e & f \\        h & i \\    \end{bmatrix}    ) + b \times det(        \begin{bmatrix}            d & f \\            g & i \\        \end{bmatrix}        ) + c \times det(            \begin{bmatrix}                d & e \\                g & h \\            \end{bmatrix}            ) \end{align}</script><p>Properties of determinant:</p><script type="math/tex; mode=display">\begin{align} det(A^T) &= det(A) \\det(A^{-1}) &= det(A)^{-1} \\det(AB) &= det(A)det(B) \end{align}</script><p>A real number <script type="math/tex">\lambda</script> is an <code>eigenvalue</code> of <script type="math/tex">A</script> if there exists a non-zero vector <script type="math/tex">x</script> (<code>eigenvector</code>) in <script type="math/tex">\mathbb{R}^n</script> such that:</p><script type="math/tex; mode=display">Ax = \lambda x</script><p>The determinant of matrix <script type="math/tex">A - \lambda I</script> is called the <code>characteristic polynomial</code> of <script type="math/tex">A</script>. The equation <script type="math/tex">det(A - \lambda I)</script> is called the <code>characteristic equation</code> of <script type="math/tex">A</script>, where the eigenvalues <script type="math/tex">\lambda</script> are the real roots of the equation. It can be shown that:</p><script type="math/tex; mode=display">\prod_{i=1}^n \lambda_i = det(A) \\\sum_{i=1}^n \lambda_i = \sum_{i=1}^n a_{i, \ i} = trace(A)</script><p>Matrix <script type="math/tex">A</script> is <code>invertible</code> if there exists a <script type="math/tex">n\times n</script> matrix <script type="math/tex">B</script> such that <script type="math/tex">AB = BA = I</script>. A square matrix is invertible if and only if its determinant is non-zero. A non-square matrix do not have an inverse.</p><p>Matrix <script type="math/tex">A</script> is called <code>diagonalizable</code> if and only if it has linearly independent eigenvectors. Let <script type="math/tex">\textbf{U}</script> denote the eigen vectors of A and <script type="math/tex">\textbf{D}</script> denote the diagonal <script type="math/tex">\lambda</script> vector. Then:</p><script type="math/tex; mode=display">A = \textbf{UDU}^{-1} \rightarrow A^x = \textbf{UD}^x\textbf{U}^{-1}</script><p>If matrix <script type="math/tex">A</script> is <code>symmmetric</code>, then:</p><ul><li>all eigenvalues of <script type="math/tex">A</script> are reall numbers</li><li>all eigenvectors of <script type="math/tex">A</script> from distrinct eigenvalues are orthogonal</li></ul><p>Matrix <script type="math/tex">A</script> is <code>positive semi-definite</code> if and only if any of the following:</p><ul><li>for any <script type="math/tex">n\times 1</script> matrix <script type="math/tex">x</script>, <script type="math/tex">x^TAx \geq 0</script></li><li>all eigenvalues of <script type="math/tex">A</script> are non-negative</li><li>all the upper left submatrices <script type="math/tex">A_K</script> have non-negative determinants.</li></ul><p>Matrix <script type="math/tex">A</script> is <code>positive definite</code> if and only if any of the following:</p><ul><li>for any <script type="math/tex">n\times 1</script> matrix <script type="math/tex">x</script>, <script type="math/tex">x^TAx > 0</script></li><li>all eigenvalues of <script type="math/tex">A</script> are positive</li><li>all the upper left submatrices <script type="math/tex">A_K</script> have positive determinants.</li></ul><p>All <code>covariance</code>, <code>correlation</code> matrices must be <code>symmetric</code> and <code>positive semi-definite</code>. If there is no perfect linear dependence between random variables, then it must be <code>positive definite</code>.</p><p>Let <script type="math/tex">A</script> be an invertible matrix, the <code>LU decomposition</code> breaks down <script type="math/tex">A</script> as the product of a lower triangle matrix <script type="math/tex">L</script> and upper triangle matrix <script type="math/tex">U</script>. Some applications are:</p><ul><li>solve <script type="math/tex">Ax=b</script>: <script type="math/tex">LUx=b \rightarrow Ly=b \text{ ; } Ux=y</script></li><li>solve <script type="math/tex">det(A)</script>: <script type="math/tex">det(A) = det(L)\ det(U)=\prod L_{i, \ i}\prod U_{j, \ j}</script></li></ul><p>Let <script type="math/tex">A</script> be a symmetric positive definite matrix, the <code>Cholesky decomponsition</code> expand on the <code>LU decomposition</code> and breaks down <script type="math/tex">A=U^TU</script>, where <script type="math/tex">U</script> is a <code>unique</code> upper triangular matrix with positive diagonal entries. Cholesky decomposition can be used to generate correltaed random variables in Monte Carlo simulation</p><h1 id="Matrix-Interpretation"><a href="#Matrix-Interpretation" class="headerlink" title="Matrix Interpretation"></a>Matrix Interpretation</h1><p>Consider a <script type="math/tex">n\times p</script> matrix:</p><script type="math/tex; mode=display">\begin{bmatrix}    x_{11}       & x_{12} & x_{13} & \dots & x_{1p} \\    x_{21}       & x_{22} & x_{23} & \dots & x_{2p} \\    \vdots & \vdots & \vdots & \ddots & \vdots \\    x_{n1}       & x_{n2} & x_{n3} & \dots & x_{np}\end{bmatrix}</script><p>To find the first principal component <script type="math/tex">F^1</script>, we define it as the normalized linear combination of <script type="math/tex">X</script> that has the largest variance, where its <code>loading</code> <script type="math/tex">\phi^1_j</script> are normalized: <script type="math/tex">\sum^p_{j=1} (\phi^1_j)^2 = 1</script></p><script type="math/tex; mode=display">F^1 = \phi^1_1X_1 + \phi^1_2X_2 + \dots + \phi^1_pX_p</script><p>Or equivalently, for each <code>score</code>: <script type="math/tex">F^1_i = \sum_{j=1}^{p} \phi^1_jx_{ij}</script></p><p>In matrix form:</p><script type="math/tex; mode=display">\begin{bmatrix}    x_{11}       & x_{12} & x_{13} & \dots & x_{1p} \\    x_{21}       & x_{22} & x_{23} & \dots & x_{2p} \\    \vdots & \vdots & \vdots & \ddots & \vdots \\    x_{n1}       & x_{n2} & x_{n3} & \dots & x_{np}\end{bmatrix}\times\begin{bmatrix}    \phi^1_1 \\    \phi^1_2 \\    \vdots \\    \phi^1_p \\\end{bmatrix}=\begin{bmatrix}    f^1_1 \\    f^1_2 \\    \vdots \\    f^1_n \\\end{bmatrix}</script><p>Finally, the first principal component loading vector <script type="math/tex">\phi^1</script> solves the optimization problem that maximize the sample variance of the scores <script type="math/tex">f^1</script>. An objective function can be formulated as follow and solved via an <code>eigen decomposition</code>:</p><script type="math/tex; mode=display">\text{maximize }\{\ \dfrac{1}{n}\sum_{i=1}^n(f^1_i)^2\ \} \text{ subject to } \sum^p_{j=1} (\phi^1_j)^2 = 1</script><p>To find the second principal component loading <script type="math/tex">\phi^2</script>, use the same objective function with <script type="math/tex">\phi^2</script> replacement and include an additional constraint that <script type="math/tex">\phi^2</script> is orthogonal to <script type="math/tex">\phi^1</script>.</p><h1 id="Geometric-Interpretation"><a href="#Geometric-Interpretation" class="headerlink" title="Geometric Interpretation"></a>Geometric Interpretation</h1><p>The <script type="math/tex">p\times k</script> <code>loading</code> matrix <script type="math/tex">L = [\phi^1 \dots \phi^k]</script> defines a linear transformation that projects the data from the feature space <script type="math/tex">\mathbb{R}^p</script> into a subspace <script type="math/tex">\mathbb{R}^k</script>, in which the data has the most variance. The result of the projection is the <code>factor</code> matrix <script type="math/tex">F = [F^1 \dots F^k]</script>, also known as the <code>principal components</code>.</p><script type="math/tex; mode=display">\underbrace{    \begin{bmatrix}        x_{11}       & x_{12} & x_{13} & \dots & x_{1p} \\        x_{21}       & x_{22} & x_{23} & \dots & x_{2p} \\        \vdots & \vdots & \vdots & \ddots & \vdots \\        x_{n1}       & x_{n2} & x_{n3} & \dots & x_{np}    \end{bmatrix}}_{data} \times\underbrace{    \begin{bmatrix}        \phi^1_1 & \dots & \phi^k_1\\        \phi^1_2 & \dots & \phi^k_2\\        \vdots & \ddots & \vdots \\        \phi^1_p & \dots & \phi^k_p\\    \end{bmatrix}}_{loadings}=\underbrace{    \begin{bmatrix}        f^1_1 & \dots & f^k_1 \\        f^1_2 & \dots & f^k_2 \\        \vdots & \ddots & \vdots \\        f^1_n & \dots & f^k_n \\    \end{bmatrix}}_{\text{principal components} \\\text{or, factor scores}}</script><p>In other words, the principal components vectors <script type="math/tex">F^1 ... F^k</script> forms a low-dimensional linear subspace that are the closest (shortest average squared Euclidean distance) to the observations.</p><h1 id="Eigen-Decomposition"><a href="#Eigen-Decomposition" class="headerlink" title="Eigen Decomposition"></a>Eigen Decomposition</h1><p>Given <script type="math/tex">n\times p</script> data matrix <script type="math/tex">X</script>, the objective of <code>PCA</code> is to find a lower dimension representation factor matrix <script type="math/tex">F</script>, from which a <script type="math/tex">n\times p</script> matrix <script type="math/tex">\tilde{X}</script> can be constructed where distance between the covariance matrices <script type="math/tex">cov(X)</script> and <script type="math/tex">cov(\tilde{X})</script> are minimized.</p><p>The covariance matrix of <script type="math/tex">X</script> is a <script type="math/tex">p\times p</script> symmetric positive semi-definite matrix, therefore we have the following decomposition where <script type="math/tex">\textbf{u}</script>‘s’ are <script type="math/tex">p\times 1</script> eigenvectors of <script type="math/tex">cov(X)</script> and <script type="math/tex">\lambda</script>‘s are the eigenvalues. Note that <script type="math/tex">\textbf{u}</script> can be a zero vector if the columns of <script type="math/tex">cov(X)</script> are linearly dependent.</p><script type="math/tex; mode=display">\begin{align}cov(X) &= \dfrac{1}{n-1}X^TX \\&=\dfrac{1}{n-1}\begin{bmatrix}    \textbf{u}_1 & \dots & \textbf{u}_p\end{bmatrix}\begin{bmatrix}    \lambda_1 & \dots & 0 \\    \vdots & \ddots & \vdots \\    0 & \dots & \lambda_p\end{bmatrix}\begin{bmatrix}    \textbf{u}_1 & \dots & \textbf{u}_p\end{bmatrix}^T \\&= \dfrac{1}{n-1}\sum_{i=1}^p \lambda_i\textbf{u}_i\textbf{u}_i^T \end{align}</script><p>If we ignore the constant <script type="math/tex">1/(n-1)</script>, and define the <script type="math/tex">p\times p</script> <code>loading</code> matrix <script type="math/tex">L_0=[\textbf{u}_1, \dots, \textbf{u}_p]</script> and <script type="math/tex">n\times p</script> <code>factor</code> matrix <script type="math/tex">F_0</script> where <script type="math/tex">F_0^TF_0=\Lambda</script>. Then:</p><script type="math/tex; mode=display">X = F_0L_0^T</script><p>Now comes the <code>PCA</code> idea: Let’s rank the <script type="math/tex">\lambda_i</script>‘s in descending order, pick <script type="math/tex">k < p</script> such that:</p><script type="math/tex; mode=display">\dfrac{1}{n-1}\sum_{i=1}^{k} \lambda_i\textbf{u}_i\textbf{u}_i^T \approx \dfrac{1}{n-1}\sum_{i=1}^p \lambda_i\textbf{u}_i\textbf{u}_i^T = cov(X) \\\text{and we denote it } cov(\tilde{X}) \text{, i.e. } cov(\tilde{X}) = \dfrac{1}{n-1}\sum_{i=1}^{k} \lambda_i\textbf{u}_i\textbf{u}_i^T</script><p>Now we observe that the matrix <script type="math/tex">cov(\tilde{X})</script> is also a <script type="math/tex">p\times p</script> positive semi-definite matrix. Following similar decomposition, we obtain a <script type="math/tex">p\times k</script> matrix <script type="math/tex">L</script> and <script type="math/tex">n\times k</script> matrix <script type="math/tex">F</script>, where:</p><script type="math/tex; mode=display">\tilde{X} = FL^T</script><p>Here we have it, a dimension-reduced <script type="math/tex">n\times k</script> factor matrix <script type="math/tex">F</script>, where its projection back to <script type="math/tex">n\times p</script> space, <script type="math/tex">\tilde{X}</script>, has similar covariance as the original <script type="math/tex">n\times p</script> dataset <script type="math/tex">X</script>.</p><h1 id="Practical-Considerations"><a href="#Practical-Considerations" class="headerlink" title="Practical Considerations"></a>Practical Considerations</h1><p>PCA excels at identifying <code>latent</code> variables from the <code>measurable</code> variables. PCA can only be applied to <code>numeric</code> data, while categorical variables need to be binarized beforehand.</p><ul><li><p><code>Centering</code>: yes.</p></li><li><p><code>Scaling</code>:</p><ul><li>if the range and scale of the variables are different, <code>correlation matrix</code> is typically used to perform PCA, i.e. each variables are scaled to have standard deviation of <script type="math/tex">1</script></li><li>otherwise if the variables are in the same units of measure, using the <code>covariance matrix</code> (not standardizing) the variables could reveal interesting properties of the data</li></ul></li><li><p><code>Uniqueness</code>: each loading vector <script type="math/tex">\phi^1</script> is unique up to a sign flip, as the it can take on opposite direction in the same subspace. Same applies to the score vector <script type="math/tex">Z^1</script>, as <script type="math/tex">var(Z^1) = var(-Z^1)</script></p></li><li><p><code>Propotional of Variance Explained</code>: we can compute the total variance in a data set in the first formula below. The variance explained by the <script type="math/tex">m</script>-th principal component is: <script type="math/tex">\dfrac{1}{n} \sum_{i=1}^n (z^m_i)^2</script>. Therefore, the second formula can be computed for the <script type="math/tex">PVE</script>:</p></li></ul><script type="math/tex; mode=display">\sum_{j=1}^p Var(X_j) = \sum_{j=1}^p [ \dfrac{1}{n} \sum_{i=1}^n x^2_{ij} ] \\PVE^m = \dfrac{\sum_{i=1}^n (z^m_i)^2}{\sum_{j=1}^p\sum_{i=1}^n x^2_{ij}}</script><p><br><br><br></p><p>Reference:</p><ul><li>An Introduction to Statistical Learning with Applications in R, James, Witten, Hastie and Tibshirani</li><li>FINM 33601 Lecture Note, Y. Balasanov, University of Chicago</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;PCA finds low dimensional representation of a dataset that contains as much as possible of the variation. As each of th
      
    
    </summary>
    
    
    
      <category term="Math" scheme="http://jackliu234.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Notes on ISLR</title>
    <link href="http://jackliu234.com/2019/04/islr/"/>
    <id>http://jackliu234.com/2019/04/islr/</id>
    <published>2019-04-13T04:00:00.000Z</published>
    <updated>2019-09-11T09:31:25.834Z</updated>
    
    <content type="html"><![CDATA[<p>This is a study note on the book <a href="http://faculty.marshall.usc.edu/gareth-james/ISL/" target="_blank" rel="noopener">An Introduction to Statistical Learning with Applications in R</a>, with my own experimental R-code for each topic.</p><a id="more"></a><h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a><span id="nav">Navigation</span></h1><p><a href="#00">00. Introduction</a><br><a href="#01">01. Linear Model</a><br><a href="#02">02. Tree-Based Method</a><br><a href="#03">03. Unsupervised Learning</a></p><h1 id="Introduction-8634"><a href="#Introduction-8634" class="headerlink" title="Introduction &#8634;"></a><span id="00">Introduction</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>Suppose we observe a quantitative response <script type="math/tex">Y</script> and <script type="math/tex">p</script> different predicting variables <script type="math/tex">X = (X_1, X_2...X_p)</script>. We assume that there is a underlying relationship <script type="math/tex">f</script> between <script type="math/tex">Y</script> and <script type="math/tex">X</script>:</p><script type="math/tex; mode=display">Y=f(X) + \epsilon</script><p>We want to estimate <script type="math/tex">f</script> mainly for two purpose:</p><ul><li><code>prediction</code>: in the case where <script type="math/tex">Y</script> is not easily obtained, we want to estimate <script type="math/tex">f</script> with <script type="math/tex">\hat{f}</script>, and use <script type="math/tex">\hat{f}</script> to predict Y with <script type="math/tex">\hat{Y}</script>. Here <script type="math/tex">\hat{f}</script> can be a black box, such as highly non-linear approaches which offers accuracy over interpretability.</li></ul><script type="math/tex; mode=display">\hat{Y} = \hat{f}(X)</script><ul><li><code>inference</code>: in the case where we are more interested in how <script type="math/tex">Y</script> is affected by the change in each <script type="math/tex">X_n</script>. We need to know the exact form of <script type="math/tex">\hat{f}</script>. For example, linear model is often used which offer interpretable inference but sometimes inaccurate.</li></ul><h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><p>There are important and subtle differences between a <code>feature</code> and a <code>variable</code>.</p><ul><li><code>variable</code>: raw data</li><li><code>feature</code>: data that is transformed, derived from raw data. A feature can be more predictive and have a direct relationship with the target variable, but it isn’t immediately represented by the raw variable.</li></ul><p>The need for feature engineering arises from limitations of modeling algorithms:</p><ol><li>the curse of dimensionality (leading to statistical insiginificance)</li><li>the need to represent the signal in a meaningful and interpretable way</li><li>the need to capture complex signals in the data accurately</li><li>computational feasibility when the number of features gets large.</li></ol><h3 id="Feature-Transformation"><a href="#Feature-Transformation" class="headerlink" title="Feature Transformation"></a>Feature Transformation</h3><p>The <a href="https://en.wikipedia.org/wiki/Occam&#39;s_razor" target="_blank" rel="noopener">Occam’s Razor</a> principle states that a simpler solutions are more likely to be corret than complex ones.</p><p>Consider the following example of modeling a exponentially distributed response. After applying a log transformation, we can view the relation from a different viewpoint provided by the new feature space, in which a simpler model may achieve more predictive power than a complex model in the original input space.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x1 &lt;- runif(<span class="number">100</span>, <span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">x2 &lt;- exp(x1)</span><br><span class="line">df &lt;- data.frame(x1 = x1, x2 = x2)</span><br><span class="line">df$logx2 &lt;- log(df$x2)</span><br><span class="line">ss</span><br><span class="line">options(repr.plot.width=<span class="number">6</span>, repr.plot.height=<span class="number">3</span>)</span><br><span class="line">p1 &lt;- ggplot(data = df, aes(x = x1, y = x2)) + geom_point(size=<span class="number">0.3</span>)</span><br><span class="line">p2 &lt;- ggplot(data = df, aes(x = x1, y = logx2)) + geom_point(size=<span class="number">0.3</span>)</span><br><span class="line">grid.arrange(p1, p2, nrow=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p><img src="statistical-learning-Screen Shot 2019-05-16 at 11.05.16 AM.png" alt="Screen Shot 2019-05-16 at 11.05.16 AM.png"></p><p><br></p><p>Consider another classification problem, in which we want to identify the boundary between the two classes. A complex model would draw a circle as the divider. A simpler approach would be to create a new feature with distances of each point from the origin. The divider becomes a much simpler straight line.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">x1 &lt;- runif(<span class="number">1000</span>,-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">x2 &lt;- runif(<span class="number">1000</span>,-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">class &lt;- ifelse(sqrt(x1^<span class="number">2</span> +x2^<span class="number">2</span>) &lt; <span class="number">0.5</span>, <span class="string">"A"</span>, <span class="string">"B"</span>)</span><br><span class="line"></span><br><span class="line">df &lt;- data.frame(x1 = x1, x2 = x2, class = class)</span><br><span class="line">p1 &lt;- ggplot(data = df, aes(x = x1, y = x2, color = class)) +</span><br><span class="line">      geom_point(size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">df$dist_from_0 &lt;- sqrt(df$x1^<span class="number">2</span> + df$x2^<span class="number">2</span>)</span><br><span class="line">p2 &lt;- ggplot(data = df, aes(x = <span class="number">0</span>, y = dist_from_0, color = class)) +</span><br><span class="line">      geom_point(position = <span class="string">"jitter"</span>, size=<span class="number">1</span>) +</span><br><span class="line">      theme(axis.title.x=element_blank(),</span><br><span class="line">            axis.text.x=element_blank(),</span><br><span class="line">            axis.ticks.x=element_blank()) +</span><br><span class="line">      annotate(<span class="string">"segment"</span>, x = -<span class="number">0.5</span>, xend = <span class="number">0.5</span>, y = <span class="number">0.5</span>, yend = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">options(repr.plot.width=<span class="number">8</span>, repr.plot.height=<span class="number">3</span>)</span><br><span class="line">grid.arrange(p1, p2, nrow=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p><img src="statistical-learning-Screen Shot 2019-05-16 at 11.41.39 AM.png" alt="Screen Shot 2019-05-16 at 11.41.39 AM.png"></p><h3 id="Feature-Selection"><a href="#Feature-Selection" class="headerlink" title="Feature Selection"></a>Feature Selection</h3><p>For <script type="math/tex">p</script> predictive variables, there are a total of <script type="math/tex">2^p</script> models. We use feature selection to choose a smaller subset of the variable to model.</p><ul><li><code>Forward Selection</code> We begin with the null model with no variables and an intercept. We then fit <script type="math/tex">n</script> simple linear regression to choose our first variable with the lowest <script type="math/tex">RSS</script>. Same way to choose the next variable to be added until some stoppoing rule.</li><li><code>Backward Selection</code> We begin with the full model and remove the variable with the largest coefficient <script type="math/tex">p</script>-value. Re-fit and remove the next.</li><li><code>Mixed Selection</code> We begin with the null model and the forward selection technique. Whenever the p-value for a variable exceeds a threshold we remove it.</li></ul><h2 id="Regression-Problems"><a href="#Regression-Problems" class="headerlink" title="Regression Problems"></a>Regression Problems</h2><p>In regression problems the variables are quantitative, we use <code>mean squared error</code>, or <script type="math/tex">MSE</script>, to measure the quality of estimator <script type="math/tex">\hat{f}</script>:</p><script type="math/tex; mode=display">MSE = \dfrac{\sum_{i=1}^n [y_i - \hat{f}(x_i)]^2}{n}</script><p>A fundamental property of statistical learning that holds regardless of the particular dataset and statistical method is that as model flexibility increases, we can observe a monotone decrease in training MSE and an <code>U-shape</code> in test <script type="math/tex">MSE</script>.</p><h3 id="Bias-vs-Variance"><a href="#Bias-vs-Variance" class="headerlink" title="Bias vs Variance"></a>Bias vs Variance</h3><p>The <code>bias-variance</code> trade off decompose the expected test MSE of a single data point <script type="math/tex">x_0</script>:</p><script type="math/tex; mode=display">\begin{align}\mathbb{E}MSE^{test}(x_0) &= \mathbb{E}[y_0 - \hat{f}(x_0)]^2 \\&= Var[\hat{f}(x_0)] + Bias[\hat{f}(x_0)]^2 + Var[\epsilon]\end{align}</script><p>where:</p><ul><li><code>variance</code> refers to the variance of the estimator  among different datasets. A highly flexible <script type="math/tex">\hat{f}</script> lead to a high variance, as even small variance in data induce change in the <script type="math/tex">\hat{f}</script>‘s form.</li><li><code>bias</code> refers to the error due to estimator <script type="math/tex">\hat{f}</script> inflexibility. For example, using linear <script type="math/tex">\hat{f}</script> to estimate non-linear relationship leads to high bias.</li></ul><h2 id="Classification-Problems"><a href="#Classification-Problems" class="headerlink" title="Classification Problems"></a>Classification Problems</h2><p>In regression problems the variables are qualitative, we use <code>error rate</code> to measure the quality of estimator <script type="math/tex">\hat{f}</script>:</p><script type="math/tex; mode=display">\text{error rate} = \dfrac{\sum_{i=1}^n \textbf{1}\{y_i \neq \hat{f}(x_i)\}}{n}</script><h3 id="The-Bayes-Classifier"><a href="#The-Bayes-Classifier" class="headerlink" title="The Bayes Classifier"></a>The Bayes Classifier</h3><p>The <code>Bayes classifier</code> predict the classification based on the combination of the prior probability and its likelihood given predictor values. With categories <script type="math/tex">C_1, C_2, C_3...</script>, and predictor values <script type="math/tex">\textbf{x} = (x_1, x_2, x_3...)</script>, <script type="math/tex">\hat{y}</script> is assigned to category <script type="math/tex">C_k</script> which has the maximum posterior probability:</p><script type="math/tex; mode=display">\hat{y} = \hat{f}^{Bayes}(\textbf{x}) = C_k, \;where\; k = argmax_k \;p(C_k | \textbf{x})</script><p>Where:</p><script type="math/tex; mode=display">p(C_k | \textbf{x}) = \dfrac{p(x_1, x_2, x_3...|C_k)p(C_k)}{p(x_1, x_2, x_3...)}</script><p>The <code>naive Bayes classifier</code> assumes independence between the predictor <script type="math/tex">X_i</script>‘s, and the formula becomes:</p><script type="math/tex; mode=display">\hat{y} = \hat{f}^{naiveBayes}(\textbf{x}) = C_k, where\; k = argmax_k \;p(C_k) \times \prod p(x_i | C_k)</script><p>When <script type="math/tex">x_i</script> is continuous, the <code>Guassian naive Bayes classifier</code> assumes that <script type="math/tex">p(x_i | C_k) \sim \mathcal{N}(\mu_{i, C_k}, \sigma^2_{i, C_k})</script></p><p>In R, we use the naiveBayes function from the e1071 package to predict Survival from the Titanic dataset.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(e1071)</span><br><span class="line"><span class="keyword">library</span>(caret)</span><br><span class="line">set.seed(<span class="number">9999</span>)</span><br><span class="line">df=as.data.frame(Titanic)</span><br><span class="line">df &lt;- df[rep.int(seq_len(nrow(df)), df$Freq),]</span><br><span class="line">df$Freq &lt;- <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a 75/25 train/test split</span></span><br><span class="line">partition &lt;- createDataPartition(df$Survived, list=<span class="literal">FALSE</span>, p=<span class="number">0.75</span>)</span><br><span class="line">train &lt;- df[partition, ]</span><br><span class="line">test &lt;- df[-partition, ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit naive bayes classifier</span></span><br><span class="line">bayes &lt;- naiveBayes(Survived ~ ., data=train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10-fold validation</span></span><br><span class="line">bayes.cv &lt;- train(Survived ~ ., data=train,</span><br><span class="line">                  method = <span class="string">"nb"</span>,</span><br><span class="line">                  trControl = trainControl(method = <span class="string">"cv"</span>,</span><br><span class="line">                                           number = <span class="number">10</span>))</span><br></pre></td></tr></table></figure></p><p>Viewing the model results, the prior probabilities <script type="math/tex">p(C_k)</script> are shown in the “A-priori probabilities” section.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; bayes</span><br><span class="line"></span><br><span class="line">Naive Bayes Classifier <span class="keyword">for</span> Discrete Predictors</span><br><span class="line"></span><br><span class="line">Call:</span><br><span class="line">naiveBayes.default(x = X, y = Y, laplace = laplace)</span><br><span class="line"></span><br><span class="line">A-priori probabilities:</span><br><span class="line">Y</span><br><span class="line">       No       Yes</span><br><span class="line"><span class="number">0.6767554</span> <span class="number">0.3232446</span></span><br></pre></td></tr></table></figure></p><p>The likelihood <script type="math/tex">p(x_i | C_k)</script> are shown in the “Conditional probabilities” section<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Conditional probabilities:</span><br><span class="line">     Class</span><br><span class="line">Y            1st        2nd        3rd       Crew</span><br><span class="line">  No  <span class="number">0.09481216</span> <span class="number">0.10554562</span> <span class="number">0.34615385</span> <span class="number">0.45348837</span></span><br><span class="line">  Yes <span class="number">0.28838951</span> <span class="number">0.15730337</span> <span class="number">0.24344569</span> <span class="number">0.31086142</span></span><br><span class="line"></span><br><span class="line">     Sex</span><br><span class="line">Y           Male     Female</span><br><span class="line">  No  <span class="number">0.91323792</span> <span class="number">0.08676208</span></span><br><span class="line">  Yes <span class="number">0.53183521</span> <span class="number">0.46816479</span></span><br><span class="line"></span><br><span class="line">     Age</span><br><span class="line">Y          Child      Adult</span><br><span class="line">  No  <span class="number">0.03130590</span> <span class="number">0.96869410</span></span><br><span class="line">  Yes <span class="number">0.06928839</span> <span class="number">0.93071161</span></span><br></pre></td></tr></table></figure></p><p><br></p><p>The confusionMatrix function from the caret package returns a test Accuracy of 0.7978, which corresponds to an <code>Bayes error rate</code> of <code>0.2023</code>.</p><script type="math/tex; mode=display">\text{error rate}^{Bayes} = 1 - \mathbb{E}max_k\;p[Y=C_k|X=(x_1, x_2, x_3...)]</script><p>Theoretically, the Bayes classifier produces the lowest error rate if we know the true conditional probability <script type="math/tex">p(C_k | \textbf{x})</script>, which is not the case with real data. Therefore, the Bayes classifier serves as an unattainable gold standard against which to compare other methods.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(predict(bayes, test), test$Survived)</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction  No Yes</span><br><span class="line">       No  <span class="number">343</span>  <span class="number">82</span></span><br><span class="line">       Yes  <span class="number">29</span>  <span class="number">95</span></span><br><span class="line"></span><br><span class="line">               Accuracy : <span class="number">0.7978</span></span><br></pre></td></tr></table></figure></p><p>With 10-fold cross validation, the test error rate is <code>0.2095</code>.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(predict(bayes.cv, test), test$Survived)</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction  No Yes</span><br><span class="line">       No  <span class="number">332</span>  <span class="number">75</span></span><br><span class="line">       Yes  <span class="number">40</span> <span class="number">102</span></span><br><span class="line"></span><br><span class="line">               Accuracy : <span class="number">0.7905</span></span><br></pre></td></tr></table></figure></p><h3 id="K-Nearest-Neighbors"><a href="#K-Nearest-Neighbors" class="headerlink" title="K-Nearest Neighbors"></a>K-Nearest Neighbors</h3><p>The <code>KNN classifier</code> estimate the conditional probability <script type="math/tex">p(C_k | \textbf{x})</script> based on the set of K predictors in the training data that are the most similar to <script type="math/tex">\textbf{x}</script>, representing by <script type="math/tex">\mathcal{N}</script>.</p><script type="math/tex; mode=display">\hat{y} = \hat{f}^{KNN}(\textbf{x}) = C_k, \;where\; k = argmax_k \;p(C_k | \textbf{x}) \\with\; p(C_k | \textbf{x}) = \dfrac{\sum_{i\in\mathcal{N}}\textbf{1}_{y_i = C_k}}{K}</script><p>Note that the <script type="math/tex">p(C_k | \textbf{x})</script> is one minus the <script type="math/tex">\mathcal{N}</script>-local error rate of a <script type="math/tex">C_k</script> estimate , and therefore with KNN we are picking the <script type="math/tex">C_k</script> that minimizes the <script type="math/tex">\mathcal{N}</script>-local error rate given <script type="math/tex">\textbf{x}</script>.</p><p>When <script type="math/tex">K=1</script>, the estimator <script type="math/tex">\hat{f}^{KNN}</script> produces a training error rate of <script type="math/tex">0</script>, but the test error rate might be quite high due to overfitting. The method is therefore very flexible with low bias and high variance. As <script type="math/tex">K\rightarrow\infty</script>, the estimator becomes more linear.  </p><p>In R, we use the knn function (with K=1) in the class library to predict Survival from the Titanic dataset.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(e1071)</span><br><span class="line"><span class="keyword">library</span>(class)</span><br><span class="line">set.seed(<span class="number">9999</span>)</span><br><span class="line">df &lt;- as.data.frame(Titanic)</span><br><span class="line">df &lt;- df[rep.int(seq_len(nrow(df)), df$Freq),]</span><br><span class="line">df$Freq &lt;- <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The "knn" function in the "class" library only works with numeric data</span></span><br><span class="line">df$iClass &lt;- as.integer(df$Class)</span><br><span class="line">df$iSex &lt;- as.integer(df$Sex)</span><br><span class="line">df$iAge &lt;- as.integer(df$Age)</span><br><span class="line">df$iSurvived &lt;- as.integer(df$Survived)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create random 75/25 train/test split</span></span><br><span class="line">train_ind &lt;- sample(seq_len(nrow(df)), size = floor(<span class="number">0.75</span> * nrow(df)))</span><br><span class="line">df_train &lt;- df[train_ind, c(<span class="number">5</span>:<span class="number">7</span>)]</span><br><span class="line">df_test &lt;- df[-train_ind, c(<span class="number">5</span>:<span class="number">7</span>)]</span><br><span class="line">df_train_cl &lt;- df[train_ind, <span class="number">4</span>]</span><br><span class="line">df_test_cl &lt;- df[-train_ind, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit KNN</span></span><br><span class="line">knn &lt;- knn(train = df_train,</span><br><span class="line">           test = df_test,</span><br><span class="line">           cl = df_train_cl,</span><br><span class="line">           k=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10-fold CV</span></span><br><span class="line">knn.cv &lt;- tune.knn(x = df[, c(<span class="number">5</span>:<span class="number">7</span>)],</span><br><span class="line">                  y = df[, <span class="number">4</span>],</span><br><span class="line">                  k = <span class="number">1</span>:<span class="number">20</span>,</span><br><span class="line">                  tunecontrol=tune.control(sampling = <span class="string">"cross"</span>),</span><br><span class="line">                  cross=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p>The confusion matrix shows an error rate of <code>0.1942</code>.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(knn, df_test_cl)</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction  No Yes</span><br><span class="line">       No  <span class="number">364</span> <span class="number">101</span></span><br><span class="line">       Yes   <span class="number">6</span>  <span class="number">80</span></span><br><span class="line"></span><br><span class="line">               Accuracy : <span class="number">0.8058</span></span><br></pre></td></tr></table></figure></p><p><br></p><p>Now run KNN with the tune wrapper to perform 10-fold cross validation. The result recommends KNN with K=1, which turns out to be the same as what we originally tested.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; knn.cv</span><br><span class="line"></span><br><span class="line">Parameter tuning of ‘knn.wrapper’:</span><br><span class="line"></span><br><span class="line">- sampling method: <span class="number">10</span>-fold cross validation</span><br><span class="line"></span><br><span class="line">- best parameters:</span><br><span class="line"> k</span><br><span class="line"> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">- best performance: <span class="number">0.2157576</span></span><br></pre></td></tr></table></figure></p><p>Summarizing the test error rate for naiveBayes and KNN.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">naiveBayes (cv10):          <span class="number">0.2095</span></span><br><span class="line">KNN (cv10, K=<span class="number">1</span>):            <span class="number">0.1942</span></span><br></pre></td></tr></table></figure></p><h1 id="Linear-Model-8634"><a href="#Linear-Model-8634" class="headerlink" title="Linear Model &#8634;"></a><span id="01">Linear Model</span> <sup><a href="#nav">&#8634;</a></sup></h1><h2 id="Simple-Linear-Regression"><a href="#Simple-Linear-Regression" class="headerlink" title="Simple Linear Regression"></a>Simple Linear Regression</h2><p>A simple linear regression assumes that:</p><script type="math/tex; mode=display">Y \sim \beta_0 + \beta_1X</script><h3 id="Coefficient-Estimate"><a href="#Coefficient-Estimate" class="headerlink" title="Coefficient Estimate"></a>Coefficient Estimate</h3><p>Given data points <script type="math/tex">(x_i, y_i)</script>, let <script type="math/tex">\hat{y_i} = \hat{\beta_0} + \hat{\beta_1}x_i</script>. We define the <code>residual sum of squares</code>, or <script type="math/tex">RSS</script>, as:</p><script type="math/tex; mode=display">RSS = \sum (y_i -  \hat{y_i})^2</script><p>Minimizing <script type="math/tex">RSS</script> as an objective function, we can solve for <script type="math/tex">\hat{\beta_0}, \hat{\beta_1}</script>:</p><script type="math/tex; mode=display">\begin{align}\hat{\beta_1} &= \dfrac{\sum (x_i - \bar{x})(y_i - \bar{y})}{\sum (x_i-\bar{x})^2} \\\hat{\beta_0} &= \bar{y} - \hat{\beta_1}\bar{x}\end{align}</script><h3 id="Coefficient-Estimate-Gaussian-Residual"><a href="#Coefficient-Estimate-Gaussian-Residual" class="headerlink" title="Coefficient Estimate - Gaussian Residual"></a>Coefficient Estimate - Gaussian Residual</h3><p>Furthermore, if we assume the <code>individual</code> error terms are i.i.d Gaussian, i.e.:</p><script type="math/tex; mode=display">Y = \beta_0 + \beta_1x + \epsilon \\\text{where, } \epsilon \sim \mathcal{N}(0, \sigma^2)</script><p>We now have a conditional pdf of <script type="math/tex">Y</script> given <script type="math/tex">x</script>:</p><script type="math/tex; mode=display">p(y_i|x_i; \beta_0, \beta_1, \sigma^2) = \dfrac{1}{\sqrt{2\pi\sigma^2}}e^{-\dfrac{[y_i - (\beta_0 + \beta_1x_i)]^2}{2\sigma^2}}</script><p>The maximum log-likelihood estimator <script type="math/tex">\hat{l}</script>for the paramter estimate <script type="math/tex">b_0</script>, <script type="math/tex">b_1</script>, and <script type="math/tex">s^2</script> can be computed as follow:</p><script type="math/tex; mode=display">\begin{align}\hat{l}(b_0, b_1, s^2| x_i, y_i) &= log \prod p(y_i|x_i; b_0, b_1, s^2) \\&= -\dfrac{n}{2}log{2\pi} - nlogs - \dfrac{1}{2s^2}\sum [y_i - (b_0+b_1x)]^2\end{align}</script><p>Setting the partial-derivative of the estimator with respect to each of the parameter to zero, we can obtain the maximum likelihood parameters:</p><script type="math/tex; mode=display">\begin{align}\hat{\beta_1} &= \dfrac{\sum (x_i - \bar{x})(y_i - \bar{y})}{\sum (x_i-\bar{x})^2} \\\hat{\beta_0} &= \bar{y} - \hat{\beta_1}\bar{x} \\\hat{\sigma^2} &= \dfrac{1}{n}\sum [y_i - (b_0+b_1x_i)]^2\end{align}</script><p>MLE, or maximum likelihood estimation, is a frequentist approach for estimating model parameters based on the assumed underlying model form and error distribution, by maximizing the probability of seeing what we saw in the data. MLE is a near-optimal method of estimation, and is optimal in many cases.</p><p>If we assume a Gaussian error distribution and a linear model, then the conclusion above states that maximizing the MLE objective function is the <code>SAME</code> as minimizing the RSS objective function.</p><p>More on <code>frequentist</code> vs <code>Bayesian</code> in <a href="https://cdn-files.soa.org/e-learning/Predictive_Analytics_ASA/Module_6/job_aid_MLE.pdf" target="_blank" rel="noopener">this SOA work paper</a>. Also see <a href="https://www.stat.cmu.edu/~cshalizi/mreg/15/lectures/06/lecture-06.pdf" target="_blank" rel="noopener">this CMU lecture note</a> and  for more detail regarding the derivation.</p><h3 id="Model-Fit"><a href="#Model-Fit" class="headerlink" title="Model Fit"></a>Model Fit</h3><p>Recall that we assume there is a underlying relationship <script type="math/tex">f</script> between <script type="math/tex">Y</script> and <script type="math/tex">X</script>:</p><script type="math/tex; mode=display">Y=f(X) + \epsilon</script><p>The <code>residual standard error</code>, or <script type="math/tex">RSE</script>, estimates the standard deviation of <script type="math/tex">\epsilon</script>. Note that RSE is an absolute measure of the <em>lack of fit</em> of the model and depends on units of <script type="math/tex">Y</script>.</p><script type="math/tex; mode=display">RSE = \sqrt{RSS/(n-2)}</script><p>The <script type="math/tex">R^2</script> measures the proportion of variance explained by the regression. <script type="math/tex">TSS</script> is the <code>total sum of squares</code> which measures the total variance in <script type="math/tex">Y</script></p><script type="math/tex; mode=display">R^2 = 1 - \dfrac{RSS}{TSS}</script><p>In a simple regression setting, <script type="math/tex">R^2 = Corr(X, Y)^2</script></p><h3 id="Residual-Plot"><a href="#Residual-Plot" class="headerlink" title="Residual Plot"></a>Residual Plot</h3><p>Here is a good <a href="http://docs.statwing.com/interpreting-residual-plots-to-improve-your-regression/#y-unbalanced-header" target="_blank" rel="noopener">article</a> on how to interpret your residual plot.</p><p>Summarizing the approaches for different residual issues:</p><ol><li><code>Y-axis Unbalanced</code>: transform target</li><li><code>X-axis Unbalanced</code>: transform predictor</li><li><code>Heteroscedasticity</code>: transform target/predictor</li><li><code>Non-Linearity</code>: transform predictor; create non-linear model</li><li><code>Outlier</code>: transform target/predictor; remove/assess the outlier;</li></ol><h2 id="Multiple-Linear-Regression"><a href="#Multiple-Linear-Regression" class="headerlink" title="Multiple Linear Regression"></a>Multiple Linear Regression</h2><p>The multiple linear regression takes the form:</p><script type="math/tex; mode=display">Y = \beta_0 + \beta_1X_1 + \beta_2X_2 + \dots + \beta_pX_p + \epsilon</script><h3 id="F-statistic"><a href="#F-statistic" class="headerlink" title="F-statistic"></a>F-statistic</h3><p>We use the F-statistic to test the null hypothesis that there are no relationships between the predictors and target variable.</p><script type="math/tex; mode=display">H_0: \beta_1 = \beta_2 = \dots = \beta_p = 0 \\H_a: \text{ at least one } \beta \text{ is non-zero}</script><p>We calculate the F-statistic as follow:</p><script type="math/tex; mode=display">F = \dfrac{(TSS - RSS)/p}{RSS/(n-p-1)}</script><p>We expect <script type="math/tex">F=1</script> if <script type="math/tex">H_0</script> is true.</p><h3 id="Potential-Problems"><a href="#Potential-Problems" class="headerlink" title="Potential Problems"></a>Potential Problems</h3><p><code>Non-Linearity</code> Residual plots are useful to detect whether the underlying relationship <script type="math/tex">f</script> is non-linear. One of the solutions to this problem is to fit transformations of the predictors such as <script type="math/tex">log{X}</script>, <script type="math/tex">\sqrt{X}</script>, and <script type="math/tex">X^2</script>.  </p><p><code>Collinearity</code> This is where two or more predictors are closely correlated with each other, or “collinear”. Collinearity reduces the accuracy of the coefficient estimates by increasing its standard deviation and p-value. One way to detect collinearity is from the correlation matrix or the “pairs” plot in R.</p><p>There are two solutions: dropping one of the collinear predictor, or combine the collinear predictors into a single predictor.</p><p><code>Multi-collinearity</code> This is where collinearity exist between three or more predictors when none of the pairwise correlations are high. The best way to assess multi-collinearity if through <code>variance inflation factor</code>, or VIF.</p><script type="math/tex; mode=display">VIF(\beta_j) = \dfrac{var(\beta_j) \text{ in full model}}{var(\beta_j) \text{ in single } \beta_j \text{ model}}</script><p>A VIF of <script type="math/tex">1</script> indicates no collinearity. A VIF of <script type="math/tex">10+</script> indicates high collinearity.</p><p><code>Outliers</code> Use residual plot to detect and potentially remove outliers.</p><h1 id="Linear-Model-Selection-and-Regularization"><a href="#Linear-Model-Selection-and-Regularization" class="headerlink" title="Linear Model Selection and Regularization"></a>Linear Model Selection and Regularization</h1><p>Linear model can be improved by using alternative fitting procedures, which produce better prediction accuracy and model interpretability.</p><ul><li><p><code>Subset Selection</code> Select a subset of the original predictors and then fit the model.</p></li><li><p><code>Shrinkage/Regularization</code> Fit the model by shrinking coefficient estimates towards zero, therefore reducing variances of the coefficient estimates.</p></li><li><p><code>Dimension Reduction</code> Project the predictors onto a M-dimensional subspace, then use the M projections as predictors to fit a linear model with least square.</p></li></ul><h2 id="Subset-Selection"><a href="#Subset-Selection" class="headerlink" title="Subset Selection"></a>Subset Selection</h2><p>The <code>beset subset selection</code> fits a separate least square regression for each combination from the <script type="math/tex">p</script> predictors, creating <script type="math/tex">2^p</script> models to compare.</p><p>The <code>forward stepwise selection</code> and <code>backward stepwise selection</code> fits a total of <script type="math/tex">1+p(p+1)/2</script> models. Specifically, at each step a predictor is added/removed to the model only if it gives the greatest additional improvement (lowest RSS or highest adjusted <script type="math/tex">R^2</script>) among all the predictors.</p><p>After the selection process, we need to determine the optimal model that gives the lowest potential test error, either through:</p><ul><li>Cross-validation, or</li><li><p>Adjusted train error</p><ul><li><p>Example 1: <script type="math/tex">\boldsymbol{C_p} := \dfrac{1}{n}(RSS + 2d\hat{\sigma}^2)</script>, where <script type="math/tex">d</script> is the number of predictors in the subset, and <script type="math/tex">\hat{\sigma}^2</script> is the variance of error estimated using the full models containing all <script type="math/tex">p</script>  predictors. Essentially, a penalty term <script type="math/tex">2d\hat{\sigma}^2</script> is added to the train RSS to adjust for the fact that the training error tends to <em>underestimate</em> the test error.</p></li><li><p>Example 2: <script type="math/tex">\boldsymbol{AIC} = \dfrac{1}{n\hat{\sigma}^2}(RSS + 2d\hat{\sigma}^2)</script>. The AIC, or Akaike information criterion, uses the maximum likelihood function to assess the relative quality of statistical models give a set of data. In linear models with Gaussian error terms, the maximum likelihood function is equivalent to <script type="math/tex">RSS</script>, and therefore <script type="math/tex">C_p</script> and <script type="math/tex">AIC</script> are proportional to each other.</p></li><li><p>Example 3: <script type="math/tex">\boldsymbol{BIC} = \dfrac{1}{n\hat{\sigma}^2}(RSS + log(n)d\hat{\sigma}^2)</script></p></li><li><p>Example 4: <script type="math/tex">\boldsymbol{Adjusted}\; \boldsymbol{R^2} = 1 - \dfrac{RSS/(n-d-1)}{TSS/(n-1)}</script>. While <script type="math/tex">RSS</script> always decreases in the stepwise selection as the number of predictors increases, <script type="math/tex">RSS/(n-d-1)</script> may or may not decrease.</p></li></ul></li></ul><h2 id="Shrinkage"><a href="#Shrinkage" class="headerlink" title="Shrinkage"></a>Shrinkage</h2><h3 id="Ridge-Regression"><a href="#Ridge-Regression" class="headerlink" title="Ridge Regression"></a>Ridge Regression</h3><p>Recall that in least square regression, the coefficient <script type="math/tex">\beta</script> are estimated by minimizing the objective function RSS.</p><script type="math/tex; mode=display">Objective\ Function = RSS = \sum (y_i -  \hat{y_i})^2</script><p>In <code>ridge regression</code>, the objective function include an additional <em>shrinkage penalty</em>, where <script type="math/tex">\lambda>0</script> is a <em>tuning parameter</em>. Note that we do not want to shrink the intercept <script type="math/tex">\beta_0</script>, which is simply a measure of the mean of the responses:</p><script type="math/tex; mode=display">Objective\ Function = RSS + \lambda\sum_{i>0}\beta_i^2</script><ul><li>As <script type="math/tex">\lambda</script> increases, the variance decreases and the bias increases. The model fit usually is improved initially as the variance decreases, but worsen at some point when bias starts to increases rapidly. Cross-validation is often used to select the optimal <script type="math/tex">\lambda</script>.</li><li>As <script type="math/tex">\lambda\rightarrow\infty</script>, the coefficient approaches <script type="math/tex">0</script>.</li></ul><p>The ridge regression works when the linear model has low bias and high variance, e.g. when the underlying relationship is close to linear. The ridge regression trades off a small increase in bias for large decrease in variance.</p><p>Additionally, it is important to standardize all features when applying regularization. Imagining a feature in dollar and in thousand dollar: the model with the dollar feature will have much higher coefficient compared to the thousand dollar one, leading to larger regularization effect for the dollar feature.</p><h3 id="Lasso-Regression"><a href="#Lasso-Regression" class="headerlink" title="Lasso Regression"></a>Lasso Regression</h3><p>Although the ridge regression shrinks the coefficients, it does not eliminiate excess predictors. Model interpretation might be an issue for the ridge regression where the number of predictors are large. The <code>lasso regression</code> overcomes this issue and force some coefficients to be exactly <script type="math/tex">0</script>.</p><script type="math/tex; mode=display">Objective\ Function = RSS + \lambda\sum_{i>0}|\beta_i|</script><p>However, there are <code>limitations</code> of feature selections using regularization techniques such as lasso, such as model interpretability. In addition, the feature we selected are optimized in linear models, and may not necessarily translate to other model forms.</p><p>Note the difference between <script type="math/tex">L2</script> (ridge) and <script type="math/tex">L1</script> (lasso) penalty:</p><ul><li>when the coefficients (absolute value) are <code>greater</code> than 1 (when the parameters are large), the <script type="math/tex">L2</script> penalty is greater than the <script type="math/tex">L1</script>, and <code>ridge</code> provides more shrinkage.</li><li>when the coefficients (absolute value) are <code>smaller</code> than 1 (when the parameters are small), the <script type="math/tex">L1</script> penalty is greater than the <script type="math/tex">L2</script>, and <code>lasso</code> provides more shrinkage.</li></ul><p>In R, we use the <code>glmnet</code> package to compute ridge and lasso regressions to predict mpg from the mtcars built-in data set.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(glmnet)</span><br><span class="line"><span class="keyword">library</span>(caret)</span><br><span class="line">set.seed(<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data</span></span><br><span class="line">df &lt;- as.data.frame(mtcars)</span><br><span class="line">x &lt;- model.matrix(mpg~., df)[, -<span class="number">1</span>]</span><br><span class="line">y &lt;- df$mpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 75/25 train/test split</span></span><br><span class="line">partition &lt;- createDataPartition(df$mpg, list = <span class="literal">FALSE</span>, p = <span class="number">.75</span>)</span><br><span class="line">df_train &lt;- df[partition, ]</span><br><span class="line">df_test &lt;- df[-partition, ]</span><br><span class="line">x_train &lt;- x[partition, ]</span><br><span class="line">x_test &lt;- x[-partition, ]</span><br><span class="line">y_train &lt;- y[partition]</span><br><span class="line">y_test &lt;- y[-partition]</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit regression</span></span><br><span class="line">m1 &lt;- lm(mpg ~ ., df_train)</span><br><span class="line">m1.pred &lt;- predict(m1, df_test)</span><br><span class="line">m1.mse &lt;- round(mean((y_test - m1.pred)^<span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit ridge regression</span></span><br><span class="line">m2 &lt;- cv.glmnet(x_train, y_train, alpha=<span class="number">0</span>, nfolds=<span class="number">6</span>)</span><br><span class="line">m2.bestlambda &lt;- m2$lambda.min</span><br><span class="line">m2.pred &lt;- predict(m2, s=m2.bestlambda, x_test)</span><br><span class="line">m2.mse &lt;- round(mean((y_test - m2.pred)^<span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit lasso regression</span></span><br><span class="line">m3 &lt;- cv.glmnet(x_train, y_train, alpha=<span class="number">1</span>, nfolds=<span class="number">6</span>)</span><br><span class="line">m3.bestlambda &lt;- m3$lambda.min</span><br><span class="line">m3.pred &lt;- predict(m3, s=m3.bestlambda, x_test)</span><br><span class="line">m3.mse &lt;- round(mean((y_test - m3.pred)^<span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get coefficients</span></span><br><span class="line">m2.best &lt;- glmnet(x_train, y_train, alpha=<span class="number">0</span>, lambda=m2.bestlambda)</span><br><span class="line">m3.best &lt;- glmnet(x_train, y_train, alpha=<span class="number">1</span>, lambda=m3.bestlambda)</span><br><span class="line">comp &lt;- cbind(coef(m1), coef(m2.best), coef(m3.best))</span><br><span class="line">colnames(comp) &lt;- c(<span class="string">"original"</span>, <span class="string">"ridge"</span>, <span class="string">"lasso"</span>)</span><br></pre></td></tr></table></figure></p><p>The test MSE are as follow. Note that both ridge and lasso regression perform better than the original regression.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; m1.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">16.64</span></span><br><span class="line">&gt; m2.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.66</span></span><br><span class="line">&gt; m3.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">6.61</span></span><br></pre></td></tr></table></figure></p><p>We also made a comparison of the coefficients, based on the normal regression and the regularized regression with cv-optimal <script type="math/tex">lambda</script>.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; comp</span><br><span class="line"><span class="number">11</span> x <span class="number">3</span> sparse Matrix of class <span class="string">"dgCMatrix"</span></span><br><span class="line">                original        ridge        lasso</span><br><span class="line">(Intercept) -<span class="number">19.52071389</span> <span class="number">19.420775180</span> <span class="number">14.002192375</span></span><br><span class="line">cyl           <span class="number">1.69431225</span> -<span class="number">0.275408324</span>  .          </span><br><span class="line">disp          <span class="number">0.01185998</span> -<span class="number">0.004705579</span>  .          </span><br><span class="line">hp           -<span class="number">0.01449594</span> -<span class="number">0.011129305</span> -<span class="number">0.002545135</span></span><br><span class="line">drat          <span class="number">3.08676192</span>  <span class="number">1.272808791</span>  <span class="number">1.334526777</span></span><br><span class="line">wt           -<span class="number">3.19280650</span> -<span class="number">1.137507747</span> -<span class="number">2.254408320</span></span><br><span class="line">qsec          <span class="number">1.02473436</span>  <span class="number">0.117671597</span>  <span class="number">0.331182874</span></span><br><span class="line">vs            <span class="number">0.97127211</span>  <span class="number">0.677494227</span>  .          </span><br><span class="line">am            <span class="number">2.63740010</span>  <span class="number">1.633418877</span>  <span class="number">1.703501439</span></span><br><span class="line">gear          <span class="number">3.36943552</span>  <span class="number">0.794847062</span>  <span class="number">1.571031414</span></span><br><span class="line">carb         -<span class="number">1.45443855</span> -<span class="number">0.588427657</span> -<span class="number">1.162118484</span></span><br></pre></td></tr></table></figure></p><h2 id="Resampling-Method"><a href="#Resampling-Method" class="headerlink" title="Resampling Method"></a>Resampling Method</h2><p>Resampling methods involve repeatedly drawing samples from a training set to re-fit the model.</p><h3 id="Cross-Validation"><a href="#Cross-Validation" class="headerlink" title="Cross-Validation"></a>Cross-Validation</h3><p>We often use the <code>test error rate</code> to determine and compare how well a statistical learning model perform. However, in the absence of a large designated test set, the test error rate can be difficult to estimate. The train error rate is often quite different from the test error rate. Therefore, cross-validation can be used to estimate the test error rates by creating validation sets off the train data.</p><p>A <code>k-fold cross validation</code> involves randomly dividing the observations into <script type="math/tex">k</script>-groups. The process is repeated <script type="math/tex">k</script>-times where each group is treated as a validation set while fitting the remaining <script type="math/tex">k-1</script> groups. The <script type="math/tex">k</script>-fold CV test MSE is the average of all the MSE from each validation set:</p><script type="math/tex; mode=display">MSE_{CV} = \dfrac{1}{k}\sum_{i=1}^{k} MSE_i</script><p>The <code>leave-one-out cross validation</code>, or LOOCV, is a special case of <script type="math/tex">k</script>-fold CV with <script type="math/tex">k=1</script>. Since LOOCV requires fitting the model <script type="math/tex">n</script> times, with <script type="math/tex">n</script> being equal to number of train data points. The <script type="math/tex">k</script>-fold CV with <script type="math/tex">k=5\ or \ 10</script> are more feasible computationally as it only needs to fit the model <script type="math/tex">5\ or\ 10</script> times.</p><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><p>Bootstrap provides a <code>measure of accruacy</code> of either a parameter estimate or a given statistical learning method. It can be used to estimate variance of a parameter by repeatedly re-sampling the same data set with replacement (i.e. duplicate data entries allowed) while re-calculating the parameter based on each re-sample.</p><h2 id="Hyper-Parameter-Tuning"><a href="#Hyper-Parameter-Tuning" class="headerlink" title="Hyper-Parameter Tuning"></a>Hyper-Parameter Tuning</h2><p>We specify numerious constants called <code>hyperparameter</code> during our modeling process, e.g. <script type="math/tex">\lambda</script>, <script type="math/tex">\alpha</script>, etc. To set these constant such that our model can predict accruately while avoiding over-complexity and overfitting, we <code>tune</code> our hyperparameter with cross validation. For more details see the <a href="https://jackliu234.com/pa-review-notebook/auto-claim/">auto claim notebook</a>.</p><h1 id="Generalized-Linear-Model"><a href="#Generalized-Linear-Model" class="headerlink" title="Generalized Linear Model"></a>Generalized Linear Model</h1><p><code>Generalized linear models</code> were developed by Nelder and Wedderburn in a <a href="https://docs.ufpr.br/~taconeli/CE225/Artigo.pdf" target="_blank" rel="noopener">paper</a> published in 1972 to provide a flexible framework which introduces a link function that transform the linear combinations of predictors.</p><p>An <code>Ordinary Linear Model</code> has many limitations:</p><ol><li>As ordinary linear model produces a numeric response, it requires the assumptions of orderings to predict qualitative responses.</li><li>Negative values may be predicted when not allowed.</li><li>When the variance of the target variable depends on the mean, the homoscedasticity assumption is violated, and therefore the least square estimator is no longer the MLE estimator and various statistical test would not hold.</li><li>Sensitive to outliers.</li><li>Does not perform well with non-linear relationships.</li></ol><p><br></p><p>The <code>Generalized Linear Models</code> relaxes the assumptions of OLM. First, GLM relaxes the normal residual assumption of OLM, and allow the target variable <script type="math/tex">Y</script> to follow any distribution within the exponential distribution family:</p><script type="math/tex; mode=display">f(y_i|x_i) \sim \text{exponential distribution family}</script><p>With regard to this distribution, there exists a <code>canonical</code> link function associated with it that simplifies the mathematics of solving GLM analytically.</p><ul><li>Normal =&gt; Identity: <script type="math/tex">\phi(a) = a</script></li><li>Exponential/Gamma =&gt; Negative Inverse: <script type="math/tex">\phi(a) = - a^{-1}</script></li><li>Inverse Gaussian =&gt; Inverse Square: <script type="math/tex">\phi(a) = a^{-2}</script></li><li>Poisson =&gt; Log: <script type="math/tex">\phi(a) = ln(a)</script></li><li>Bernoulli/Binomial/Multinomial =&gt; Logit: <script type="math/tex">\phi(a) = ln[a/(1-a)]</script></li></ul><p>We can either choose the canonical link function or pick another one (which may not lead to a converged GLM solution, however). With this link function, GLM assumes that the expectation of the target is the inverse linked linear combination of predictors:</p><script type="math/tex; mode=display">\mathbb{E}(y_i|x_i) = \phi^{-1}(\beta x_i)</script><p>With all above assumptions satisfy, the coefficient <script type="math/tex">\beta</script> of a GLM model can then be solved:</p><script type="math/tex; mode=display">\phi(Y) \sim \beta X</script><h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h2><p>The <code>logistic regression</code> model is popular for classification problems. With two response classes, we can calculate the probability of assigning the response in each class and predict the response by choosing the class with the higher probability. or more than two response classes, multiple-class logistic regression is available but the <code>discrimentant analysis</code> is more popular.</p><p>We define <script type="math/tex">p(X) = \mathbb{P}[Y = 1|X]</script> as our new response variable and the <code>link</code> function: <code>logit</code> function, short for logistic function, as such:</p><script type="math/tex; mode=display">\phi(p(X)) = logit(p(X)) = log[\dfrac{p(X)}{1-p(X)}]</script><p>Since we assume a linear relationship between our predictor <script type="math/tex">X</script> and the linked reponse <script type="math/tex">logit(p(X))</script>, we have:</p><script type="math/tex; mode=display">log[\dfrac{p(X)}{1-p(X)}] = \beta_0+\beta_1X_1+\beta_2X_2\dots</script><p>Therefore,</p><script type="math/tex; mode=display">p(X) =  \dfrac{e^{\beta_0+\beta_1X_1+\beta_2X_2\dots}}{1+e^{\beta_0+\beta_1X_1+\beta_2X_2\dots}}</script><p>Now we have a nice property of <script type="math/tex">p(X) \in (0, 1)</script>, which is exactly what we wanted to model probability responses. The quantity <script type="math/tex">p(X)/(1-p(X))</script> is called the <code>odds</code>.</p><p>In R, we use the glm function (with family=binomial) in the predict Survival from the Titanic dataset.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(e1071)</span><br><span class="line"><span class="keyword">library</span>(caret)</span><br><span class="line">set.seed(<span class="number">9999</span>)</span><br><span class="line">df &lt;- as.data.frame(Titanic)</span><br><span class="line">df &lt;- df[rep.int(seq_len(nrow(df)), df$Freq), ]</span><br><span class="line">df &lt;- subset(df, select = -c(Freq))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Binarize class, sex and age</span></span><br><span class="line">df.new &lt;- predict(dummyVars(<span class="string">"~Class+Sex+Age"</span>,</span><br><span class="line">                            df,</span><br><span class="line">                            sep=<span class="string">"_"</span>,</span><br><span class="line">                            fullRank=<span class="literal">TRUE</span>), df)</span><br><span class="line">df.new &lt;- as.data.frame(df.new)</span><br><span class="line">df.new[<span class="string">"Survived"</span>] &lt;- df$Survived</span><br><span class="line">df &lt;- df.new</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create random 80/20 train/test split</span></span><br><span class="line">train_ind &lt;- sample(seq_len(nrow(df)), size = floor(<span class="number">0.80</span> * nrow(df)))</span><br><span class="line">df_train &lt;- df[train_ind, ]</span><br><span class="line">df_test &lt;- df[-train_ind, ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit Logistic Regression</span></span><br><span class="line">model &lt;- glm(Survived~.,</span><br><span class="line">             df_train,</span><br><span class="line">             family=binomial)</span><br><span class="line">summary(model)</span><br><span class="line">contrasts(df$Survived)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict In-Sample</span></span><br><span class="line">prob_train &lt;- predict(model, df_train, type=<span class="string">"response"</span>)</span><br><span class="line">pred_train &lt;- rep(<span class="string">"No"</span>, nrow(df_train))</span><br><span class="line">pred_train[prob_train &gt; <span class="number">.5</span>] &lt;- <span class="string">"Yes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict Out-Of-Sample</span></span><br><span class="line">prob_test &lt;- predict(model, df_test, type=<span class="string">"response"</span>)</span><br><span class="line">pred_test &lt;- rep(<span class="string">"No"</span>, nrow(df_test))</span><br><span class="line">pred_test[prob_test &gt; <span class="number">.5</span>] &lt;- <span class="string">"Yes"</span></span><br></pre></td></tr></table></figure></p><p>From <code>summary(model)</code>, note that most coeefficients are significant.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; summary(model)</span><br><span class="line">Coefficients:</span><br><span class="line">            Estimate Std. Error z value Pr(&gt;|z|)    </span><br><span class="line">(Intercept)   <span class="number">0.3094</span>     <span class="number">0.3132</span>   <span class="number">0.988</span>    <span class="number">0.323</span>    </span><br><span class="line">Class_2nd    -<span class="number">1.1163</span>     <span class="number">0.2187</span>  -<span class="number">5.105</span> <span class="number">3.31e-07</span> `</span><br><span class="line">Class_3rd    -1.7041     0.1918  -8.883  &lt; 2e-16 `</span><br><span class="line">Class_Crew   -<span class="number">0.8848</span>     <span class="number">0.1773</span>  -<span class="number">4.991</span> <span class="number">6.01e-07</span> `</span><br><span class="line">Sex_Female    2.3691     0.1555  15.235  &lt; 2e-16 `</span><br><span class="line">Age_Adult    -<span class="number">0.6289</span>     <span class="number">0.2767</span>  -<span class="number">2.273</span>    <span class="number">0.023</span> *</span><br></pre></td></tr></table></figure></p><p>Note that probability of 1 correspond to “Yes” in the Survived variable.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; contrasts(df$Survived)</span><br><span class="line">    Yes</span><br><span class="line">No    <span class="number">0</span></span><br><span class="line">Yes   <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>From in-sample confusion matrix.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(as.factor(pred_train), df_train$Survived)</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction   No  Yes</span><br><span class="line">       No  <span class="number">1087</span>  <span class="number">296</span></span><br><span class="line">       Yes  <span class="number">102</span>  <span class="number">275</span></span><br><span class="line"></span><br><span class="line">               Accuracy : <span class="number">0.7739</span></span><br></pre></td></tr></table></figure></p><p>From out-of-sample confusion matrix.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(as.factor(pred_test), df_test$Survived)</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction  No Yes</span><br><span class="line">       No  <span class="number">277</span>  <span class="number">66</span></span><br><span class="line">       Yes  <span class="number">24</span>  <span class="number">74</span></span><br><span class="line"></span><br><span class="line">               Accuracy : <span class="number">0.7959</span></span><br></pre></td></tr></table></figure></p><p>Comparing the test error rate between naiveBayes, KNN and logistic regression.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">naiveBayes (cv10):          <span class="number">0.2095</span></span><br><span class="line">KNN (cv10, K=<span class="number">1</span>):            <span class="number">0.1942</span></span><br><span class="line">logistic regression:        <span class="number">0.2041</span></span><br></pre></td></tr></table></figure></p><h2 id="Poisson-Regression"><a href="#Poisson-Regression" class="headerlink" title="Poisson Regression"></a>Poisson Regression</h2><p>The <code>Poisson distribution</code> expresses the probability of a given number of events occurring in a fixed interval of time or space if these events occur with a known constant rate and independently of the time since the last event.</p><script type="math/tex; mode=display">\mathbb{P}(\text{k events in interval}) = e^{\lambda}\dfrac{\lambda^k}{k!}</script><p>We can fit <code>Posisson regression</code> if we observe that the frequencies of response variable <script type="math/tex">Y</script> exhibits a Poisson shape. We will create a new response vector <script type="math/tex">\theta</script> and assumes that <script type="math/tex">log(\theta)</script> has an underlying linear relationship in <script type="math/tex">X</script>.</p><script type="math/tex; mode=display">Y \sim poisson(\boldsymbol {\theta}) \\\text{and, } log(\boldsymbol {\theta}) = \beta X</script><p>That is, we assume that for each <script type="math/tex">X_i</script>, <script type="math/tex">Y_i \sim poisson(e^{\beta X_i})</script>. The log link function ensures that <script type="math/tex">\boldsymbol{\theta}</script> is strictly positive.</p><p>Note that we had made a strong assumption that for each <script type="math/tex">X_i</script>, the mean and variance of <script type="math/tex">Y_i</script> are the same, as dictated by the Poisson distribution. However, if the data shows larger variance than expected, or <code>overdispersion</code>, we can then use the <code>quasi-Poisson regression</code>, which is essenstially the negative binomial distribution with looser assumptions than Poisson.</p><p>In the <code>diamonds</code> dataset from the <code>ggplot2</code> package, we plotted the histogram of the price data from 50,000 observations.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line">df &lt;- as.data.frame(diamonds)</span><br><span class="line">ggplot(df, aes(x=price)) + geom_histogram(binwidth=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>The price data shows resemblence to a Poisson distribution.</p><p><img src="statistical-learning-Rplot1.png" alt="Rplot1.png"></p><p>We fitted four different models: linear, ridge, lasso, and Poisson regressions.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(e1071)</span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(caret)</span><br><span class="line"><span class="keyword">library</span>(glmnet)</span><br><span class="line">set.seed(<span class="number">9999</span>)</span><br><span class="line">df &lt;- as.data.frame(diamonds)</span><br><span class="line"></span><br><span class="line"><span class="comment"># caret::dummyVars does not work well with ordered factor. change to unordered.</span></span><br><span class="line">df[<span class="string">"cut_1"</span>] &lt;- factor(df$cut, order=<span class="literal">FALSE</span>)</span><br><span class="line">df[<span class="string">"color_1"</span>] &lt;- factor(df$color, order=<span class="literal">FALSE</span>)</span><br><span class="line">df[<span class="string">"clarity_1"</span>] &lt;- factor(df$clarity, order=<span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Binarize Category Variable</span></span><br><span class="line">dummy &lt;- dummyVars(~ cut_1 + color_1 + clarity_1, df, sep=<span class="string">"_"</span>, fullRank=<span class="literal">TRUE</span>)</span><br><span class="line">df.new &lt;- as.data.frame(predict(dummy, newdata = df))</span><br><span class="line">df.new[<span class="string">"carat"</span>] &lt;- df$carat</span><br><span class="line">df.new[<span class="string">"price"</span>] &lt;- df$price</span><br><span class="line">df &lt;- df.new</span><br><span class="line">x &lt;- model.matrix(price~., df)[, -<span class="number">1</span>]</span><br><span class="line">y &lt;- df$price</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create random 80/20 train/test split</span></span><br><span class="line">partition &lt;- sample(seq_len(nrow(df)), size = floor(<span class="number">0.80</span> * nrow(df)))</span><br><span class="line">df_train &lt;- df[partition, ]</span><br><span class="line">df_test &lt;- df[-partition, ]</span><br><span class="line">x_train &lt;- x[partition, ]</span><br><span class="line">x_test &lt;- x[-partition, ]</span><br><span class="line">y_train &lt;- y[partition]</span><br><span class="line">y_test &lt;- y[-partition]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit Linear Regression</span></span><br><span class="line">m1 &lt;- lm(price~., df_train)</span><br><span class="line">m1.pred &lt;- predict(m1, df_test)</span><br><span class="line">m1.mse &lt;- round(mean((y_test - m1.pred)^<span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit Ridge Regression</span></span><br><span class="line">m2 &lt;- cv.glmnet(x_train, y_train, alpha=<span class="number">0</span>, nfolds=<span class="number">10</span>)</span><br><span class="line">m2.bestlambda &lt;- m2$lambda.min</span><br><span class="line">m2.pred &lt;- predict(m2, s=m2.bestlambda, x_test)</span><br><span class="line">m2.mse &lt;- round(mean((y_test - m2.pred)^<span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit Lasso Regression</span></span><br><span class="line">m3 &lt;- cv.glmnet(x_train, y_train, alpha=<span class="number">1</span>, nfolds=<span class="number">10</span>)</span><br><span class="line">m3.bestlambda &lt;- m3$lambda.min</span><br><span class="line">m3.pred &lt;- predict(m3, s=m3.bestlambda, x_test)</span><br><span class="line">m3.mse &lt;- round(mean((y_test - m3.pred)^<span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit Poisson Regression</span></span><br><span class="line">m4 &lt;- glm(price~., df_train, family=poisson(link=<span class="string">"log"</span>))</span><br><span class="line">m4.pred &lt;- predict(m4, df_test)</span><br><span class="line">m4.mse &lt;- round(mean((y_test - exp(m4.pred))^<span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit quasiPoisson Regression</span></span><br><span class="line">m5 &lt;- glm(price~., df_train, family=quasipoisson(link=<span class="string">"log"</span>))</span><br><span class="line">m5.pred &lt;- predict(m5, df_test)</span><br><span class="line">m5.mse &lt;- round(mean((y_test - exp(m5.pred))^<span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compare Coefficient</span></span><br><span class="line">m2.best &lt;- glmnet(x_train, y_train, alpha=<span class="number">0</span>, lambda=m2.bestlambda)</span><br><span class="line">m3.best &lt;- glmnet(x_train, y_train, alpha=<span class="number">1</span>, lambda=m3.bestlambda)</span><br><span class="line">comp &lt;- cbind(coef(m1), coef(m2.best), coef(m3.best), coef(m4), coef(m5))</span><br><span class="line">colnames(comp) &lt;- c(<span class="string">"original"</span>, <span class="string">"ridge"</span>, <span class="string">"lasso"</span>, <span class="string">"Poisson"</span>, <span class="string">"quasiPoi"</span>)</span><br></pre></td></tr></table></figure></p><p>Showing the results. We can see that lasso regression improved upon ridge. However, the Poisson regression show very high MSE, and not improved by using quasi-Poisson to deal with overdispersion.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; m1.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">1296082</span></span><br><span class="line"></span><br><span class="line">&gt; m2.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">1662769</span></span><br><span class="line"></span><br><span class="line">&gt; m3.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">1296773</span></span><br><span class="line"></span><br><span class="line">&gt; m4.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">5237564</span></span><br><span class="line"></span><br><span class="line">&gt; m5.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">5237564</span></span><br></pre></td></tr></table></figure></p><p>Comparing coefficients:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; comp</span><br><span class="line"><span class="number">19</span> x <span class="number">5</span> sparse Matrix of class <span class="string">"dgCMatrix"</span></span><br><span class="line">                    original        ridge      lasso     Poisson    quasiPoi</span><br><span class="line">(Intercept)       -<span class="number">7369.2859</span> -<span class="number">2751.693983</span> -<span class="number">7083.4777</span>  <span class="number">5.17185599</span>  <span class="number">5.17185599</span></span><br><span class="line">cut_1_Good          <span class="number">686.6877</span>   <span class="number">112.163397</span>   <span class="number">657.1100</span>  <span class="number">0.17515789</span>  <span class="number">0.17515789</span></span><br><span class="line">`cut_1_Very Good`   <span class="number">864.3160</span>   <span class="number">319.828814</span>   <span class="number">838.9901</span>  <span class="number">0.20528993</span>  <span class="number">0.20528993</span></span><br><span class="line">cut_1_Premium       <span class="number">893.6342</span>   <span class="number">367.364011</span>   <span class="number">866.6581</span>  <span class="number">0.18009057</span>  <span class="number">0.18009057</span></span><br><span class="line">cut_1_Ideal        <span class="number">1025.5579</span>   <span class="number">421.231162</span>   <span class="number">999.8031</span>  <span class="number">0.20406528</span>  <span class="number">0.20406528</span></span><br><span class="line">color_1_E          -<span class="number">225.3985</span>   -<span class="number">23.486004</span>  -<span class="number">205.5637</span> -<span class="number">0.05660526</span> -<span class="number">0.05660526</span></span><br><span class="line">color_1_F          -<span class="number">294.1807</span>     <span class="number">2.717515</span>  -<span class="number">274.2126</span> -<span class="number">0.03079075</span> -<span class="number">0.03079075</span></span><br><span class="line">color_1_G          -<span class="number">522.9599</span>  -<span class="number">112.556133</span>  -<span class="number">501.1661</span> -<span class="number">0.10597258</span> -<span class="number">0.10597258</span></span><br><span class="line">color_1_H          -<span class="number">997.6266</span>  -<span class="number">490.885083</span>  -<span class="number">975.9837</span> -<span class="number">0.25411004</span> -<span class="number">0.25411004</span></span><br><span class="line">color_1_I         -<span class="number">1452.1455</span>  -<span class="number">749.323400</span> -<span class="number">1426.9279</span> -<span class="number">0.42200863</span> -<span class="number">0.42200863</span></span><br><span class="line">color_1_J         -<span class="number">2343.2864</span> -<span class="number">1450.247841</span> -<span class="number">2315.1429</span> -<span class="number">0.63819087</span> -<span class="number">0.63819087</span></span><br><span class="line">clarity_1_SI2      <span class="number">2612.5463</span>  -<span class="number">472.362109</span>  <span class="number">2345.9392</span>  <span class="number">1.14176901</span>  <span class="number">1.14176901</span></span><br><span class="line">clarity_1_SI1      <span class="number">3555.6013</span>   <span class="number">149.192295</span>  <span class="number">3287.0687</span>  <span class="number">1.38540593</span>  <span class="number">1.38540593</span></span><br><span class="line">clarity_1_VS2      <span class="number">4210.3193</span>   <span class="number">671.522828</span>  <span class="number">3940.7103</span>  <span class="number">1.50843614</span>  <span class="number">1.50843614</span></span><br><span class="line">clarity_1_VS1      <span class="number">4507.7144</span>   <span class="number">861.334888</span>  <span class="number">4235.9431</span>  <span class="number">1.58850692</span>  <span class="number">1.58850692</span></span><br><span class="line">clarity_1_VVS2     <span class="number">4965.2210</span>  <span class="number">1192.175019</span>  <span class="number">4691.8855</span>  <span class="number">1.66443836</span>  <span class="number">1.66443836</span></span><br><span class="line">clarity_1_VVS1     <span class="number">5072.6388</span>  <span class="number">1162.725817</span>  <span class="number">4796.5710</span>  <span class="number">1.61060572</span>  <span class="number">1.61060572</span></span><br><span class="line">clarity_1_IF       <span class="number">5436.6567</span>  <span class="number">1476.377453</span>  <span class="number">5158.0224</span>  <span class="number">1.72336616</span>  <span class="number">1.72336616</span></span><br><span class="line">carat              <span class="number">8899.8818</span>  <span class="number">7672.223943</span>  <span class="number">8883.8976</span>  <span class="number">1.65798106</span>  <span class="number">1.65798106</span></span><br></pre></td></tr></table></figure></p><p>We are curious as to why the Poisson regression perform much worse than a simple linear regression, when the reponse variable clearly shows Poisson patterns.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p1 &lt;- ggplot() +</span><br><span class="line">  geom_point(data=df_test, aes(x=as.numeric(row.names(df_test)), y=price),</span><br><span class="line">             shape=<span class="string">"."</span>, color=<span class="string">"black"</span>) +</span><br><span class="line">  geom_point(aes(x=as.numeric(row.names(df_test)), y=m1.pred),</span><br><span class="line">             shape=<span class="string">"."</span>, color=<span class="string">"red"</span>)</span><br><span class="line"></span><br><span class="line">p2 &lt;- ggplot() +</span><br><span class="line">  geom_point(data=df_test, aes(x=as.numeric(row.names(df_test)), y=price),</span><br><span class="line">             shape=<span class="string">"."</span>, color=<span class="string">"black"</span>) +</span><br><span class="line">  geom_point(aes(x=as.numeric(row.names(df_test)), y=exp(m4.pred)),</span><br><span class="line">           shape=<span class="string">"."</span>, color=<span class="string">"red"</span>)</span><br></pre></td></tr></table></figure><p>We first look at the linear regression fit, where the black dots are the original data and the red dots are the fitted data:</p><p><img src="statistical-learning-Rplotp1.png" alt="Rplotp1.png"></p><p>We then look at the Poisson regression fit. Unfortunately the Poisson regression create ultra-high predictions for some values, which skew the MSE matrix. This is we forget to log the numerical variable (carat) when we use log link function, which results in a exponential shape for the prediction.</p><p><img src="statistical-learning-Rplotp2.png" alt="Rplotp2.png"></p><p>We change the code as follow:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fit Poisson Regression</span></span><br><span class="line">m4 &lt;- glm(price~-carat+log(carat), df_train, family=poisson(link=<span class="string">"log"</span>))</span><br><span class="line">m4.pred &lt;- predict(m4, df_test)</span><br><span class="line">m4.mse &lt;- round(mean((y_test - exp(m4.pred))^<span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit quasiPoisson Regression</span></span><br><span class="line">m5 &lt;- glm(price~-carat+log(carat)., df_train, family=quasipoisson(link=<span class="string">"log"</span>))</span><br><span class="line">m5.pred &lt;- predict(m5, df_test)</span><br><span class="line">m5.mse &lt;- round(mean((y_test - exp(m5.pred))^<span class="number">2</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>The mse are now better:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; m4.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">2544181</span></span><br><span class="line">&gt; m5.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">2544181</span></span><br></pre></td></tr></table></figure></p><p>Plotting the prediction. We can see that other than one prediction outlier, the overall predictions are better than when we did not log the carat.</p><p><img src="statistical-learning-Rplot.new.png" alt="Rplot.new.png"></p><h2 id="Goodness-of-Fit"><a href="#Goodness-of-Fit" class="headerlink" title="Goodness of Fit"></a>Goodness of Fit</h2><p><code>Deviance</code> is a measure of the goodness of fit of a generalized linear model, similar to a <script type="math/tex">RSS</script> in the simple linear model. . The default value is called <code>null deviance</code> and is the deviance calculated when the response variable is predicted using its sample mean.</p><p><code>Adding</code> additional feature to the model would generally <code>decrease</code> the deviance and <code>decrease</code> the degree of freedoms.</p><h1 id="Tree-Based-Method-8634"><a href="#Tree-Based-Method-8634" class="headerlink" title="Tree-Based Method &#8634;"></a><span id="02">Tree-Based Method</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>The <code>tree-based</code> method involve segmenting the predictor space into several regions to make a prediction for a given observation. There are several advantages to the tree-based methods:</p><ul><li>Easy to explain</li><li>Intuitive to human reasoning</li><li>Graphic and interpretable</li><li>No need to dummy variables for qualitative data</li></ul><p>On the other hand, disadvantages:</p><ul><li>Lower predictive accuracy</li><li>Sensitive to change in data</li></ul><p>Several techniques can make significant improvement to compensate the disadvantages, namely bagging, random forest and boosting.  </p><h2 id="Regression-Tree"><a href="#Regression-Tree" class="headerlink" title="Regression Tree"></a>Regression Tree</h2><p>In a linear regression model, the underlying relationship is assumed to be:</p><script type="math/tex; mode=display">f(X) = \beta_0 + \sum\beta_iX_i</script><p>Whereas in a <code>regression tree</code> model, the underlying is assumed to be:</p><script type="math/tex; mode=display">f(X) = \sum c_i\textbf{1}_{X_i\in R_i}</script><p>Where each <script type="math/tex">R_i</script> represent a partition of the feature space. The goal is to solve for the partition set <script type="math/tex">\{R_i\}_{i\in I}</script> which minimize the objective function:</p><script type="math/tex; mode=display">Objective\; Function = RSS = \sum_{i\in I}\sum_{X_j\in R_i} (y_j-\bar{y}_{R_i})^2</script><p>To find <script type="math/tex">\{R_i\}_{i\in I}</script> efficiently, we introduce <code>recursive binary splitting</code>, which is a top-down and greedy approach. It is greedy because it is short-sighted in that it always chooses the current best split, instead of the optimal split overall.</p><p>Due to the greedy nature, it is preferred that we first grow a complex tree and then <code>prune</code> it back, so that all potential large reductions in RSS are captured.</p><h3 id="Cost-Complexity-Pruning"><a href="#Cost-Complexity-Pruning" class="headerlink" title="Cost Complexity Pruning"></a>Cost Complexity Pruning</h3><p>The <code>cost complexity pruning</code> approach aim to minimize the objective function, give each value of <script type="math/tex">\alpha</script>:</p><script type="math/tex; mode=display">Objective\; Function = \sum_{i\in I_T}\sum_{X_j\in R_i} (y_j-\bar{y}_{R_i})^2 + \alpha|T|</script><p>Where <script type="math/tex">|T|</script> is the number of terminal nodes of subtree <script type="math/tex">T\subset T_0</script> where <script type="math/tex">T_0</script> is the original un-prune tree. The tuning parameter <script type="math/tex">\alpha</script> controls the complexity of the subtree <script type="math/tex">T</script>, penalizing any increase in nodes. The goal is to prune the tree with various <script type="math/tex">\alpha</script> and then use cross-validation to select the best <script type="math/tex">\alpha</script>.</p><p>This is similar to the lasso equation, which also introduce a tuning parameter <script type="math/tex">\lambda</script> to control the complexity of a linear model.</p><script type="math/tex; mode=display">Objective\; Function = RSS + \lambda\sum_{i>0}|\beta_i|</script><p>In R, we use the <code>rpart</code> library, which stands for recursive partitioning and regression trees, to fit a regression tree to predict <code>mpg</code> in our <code>mtcars</code> dataset.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(caret)</span><br><span class="line"><span class="keyword">library</span>(rpart)</span><br><span class="line"><span class="keyword">library</span>(rpart.plot)</span><br><span class="line">set.seed(<span class="number">9999</span>)</span><br><span class="line">df &lt;- as.data.frame(mtcars)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a 75/25 train/test split</span></span><br><span class="line">partition &lt;- createDataPartition(df$mpg, list=<span class="literal">FALSE</span>, p=<span class="number">0.75</span>)</span><br><span class="line">train &lt;- df[partition, ]</span><br><span class="line">test &lt;- df[-partition, ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit regression tree</span></span><br><span class="line">t1 &lt;- rpart(mpg ~ ., train)</span><br><span class="line">t1.predict &lt;- predict(t1, test)</span><br><span class="line">t1.mse &lt;- round(mean((test$mpg - t1.predict)^<span class="number">2</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>The test MSE, as compared to the previous linear models.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># regression tree</span></span><br><span class="line">&gt; t1.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">11.59</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linear regression</span></span><br><span class="line">&gt; m1.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">16.64</span></span><br><span class="line">&gt; m2.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.66</span></span><br><span class="line">&gt; m3.mse</span><br><span class="line">[<span class="number">1</span>] <span class="number">6.61</span></span><br></pre></td></tr></table></figure></p><p>Plotting the tree with <code>rpart.plot(t1)</code> command.<br><img src="statistical-learning-Rplot.png" alt="Rplot.png"></p><h2 id="Classification-Tree"><a href="#Classification-Tree" class="headerlink" title="Classification Tree"></a>Classification Tree</h2><p>Classification tree is very similar to regression trees expect we need an alternative method to RSS when deciding a split. There are three common approaches.</p><ul><li><code>Classification error rate</code>: <script type="math/tex">E = 1 - \underset{k}{max}(\hat{p}_{mk})</script></li></ul><p>Where <script type="math/tex">\hat{p}_{mk}</script> represents the porportion of train observations from the <script type="math/tex">m</script>-th parent node that are from the <script type="math/tex">k</script>-th child node. However, the this approach is not sufficiently sensitive to node impurity for tree-growing, compared to the next two.</p><ul><li><code>Gini index</code>: <script type="math/tex">G = \sum_k \hat{p}_{mk}(1-\hat{p}_{mk})</script></li></ul><p>Note that the Gini index decreases as all <script type="math/tex">\hat{p}_{mk}</script> get closer to <script type="math/tex">0</script> or <script type="math/tex">1</script>. Therefore it is a measure of the <em>node purity</em>.  </p><ul><li><code>Entropy</code>: <script type="math/tex">D = -\sum_k \hat{p}_{mk} log_2(\hat{p}_{mk})</script></li></ul><p>The Entropy is also a measure of the <em>node purity</em> and similar to the Gini index numerically.</p><p>For a two-class decision tree, the impurity measures calculated from different methods for a given <script type="math/tex">\hat{p}_{mk}</script> are simulated below with python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.001</span>)</span><br><span class="line">y1 = x*np.log(x)/np.log(<span class="number">2</span>)*<span class="number">-1</span> + (<span class="number">1</span>-x)*np.log(<span class="number">1</span>-x)/np.log(<span class="number">2</span>)*<span class="number">-1</span></span><br><span class="line">y2 = x*(<span class="number">1</span>-x) + (<span class="number">1</span>-x)*(<span class="number">1</span>-(<span class="number">1</span>-x))</span><br><span class="line">y3 = <span class="number">1</span>-np.maximum(x, <span class="number">1</span>-x)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(x, y1)</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y3)</span><br><span class="line">plt.legend([<span class="string">'entropy'</span>, <span class="string">'gini'</span>, <span class="string">'class error'</span>], loc=<span class="string">'upper right'</span>)</span><br></pre></td></tr></table></figure><p><img src="statistical-learning-2-Unknown.png" alt="Unknown.png"></p><p>We can see that all three method are similar and consistent with each other. Entropy and the Gini are more sensitive to changes in the node probabilities, therefore preferrable when <code>growing</code> the trees. The classification error is more often used during <code>complexity pruning</code>.</p><h3 id="Information-Gain"><a href="#Information-Gain" class="headerlink" title="Information Gain"></a>Information Gain</h3><p>When the measure of node purity is calculated, we want to maximize the <code>information gain</code> after each split. We use <script type="math/tex">P</script> and <script type="math/tex">C</script> to denote the parent and child node, with entropy as the measure. <script type="math/tex">N</script> is the number of observations under the parent node:</p><script type="math/tex; mode=display">IG = Entropy(P) - \sum_{k=1}^{K}\dfrac{N_k}{N}Entropy(C_k)</script><p>In R, we use the <code>rpart</code> library to create a classification tree to predict <code>Survived</code> in the <code>Titanic</code> data set.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(caret)</span><br><span class="line"><span class="keyword">library</span>(rpart)</span><br><span class="line"><span class="keyword">library</span>(rpart.plot)</span><br><span class="line">set.seed(<span class="number">9999</span>)</span><br><span class="line">df &lt;- as.data.frame(Titanic)</span><br><span class="line">df &lt;- df[rep.int(seq_len(nrow(df)), df$Freq), ]</span><br><span class="line">df &lt;- subset(df, select = -c(Freq))</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a 75/25 train/test split</span></span><br><span class="line">partition &lt;- createDataPartition(df$Survived, list=<span class="literal">FALSE</span>, p=<span class="number">0.75</span>)</span><br><span class="line">train &lt;- df[partition, ]</span><br><span class="line">test &lt;- df[-partition, ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit classification tree</span></span><br><span class="line">t2 &lt;- rpart(Survived ~ ., train)</span><br><span class="line">t2.prob &lt;- predict(t2, test)</span><br><span class="line">t2.pred &lt;- rep(<span class="string">"No"</span>, nrow(t2.prob))</span><br><span class="line">t2.pred[t2.prob[, <span class="number">2</span>] &gt; <span class="number">.5</span>] &lt;- <span class="string">"Yes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pruning</span></span><br><span class="line">t2.prune &lt;- prune(t2, cp = <span class="number">0.05</span>)</span><br><span class="line">rpart.plot(t2.prune)</span><br></pre></td></tr></table></figure></p><p>The confusion matrix shows:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(as.factor(t2.pred), test$Survived)</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction  No Yes</span><br><span class="line">       No  <span class="number">368</span> <span class="number">105</span></span><br><span class="line">       Yes   <span class="number">4</span>  <span class="number">72</span></span><br><span class="line"></span><br><span class="line">               Accuracy : <span class="number">0.8015</span></span><br></pre></td></tr></table></figure></p><p>Plotting the tree with <code>rpart.plot(t2)</code>.<br><img src="statistical-learning-Rplot2.png" alt="Rplot2.png"></p><p>Plotting the complexity parameter against the cross-validation relative error with <code>plotcp(t2)</code>. Although the relative error is at the lowest at <script type="math/tex">5</script> nodes, comparable level of relative error was achieved at <script type="math/tex">2</script> nodes. Because decision tree is prone to overfitting, here we manually prune the tree back to 2 nodes.</p><p><img src="statistical-learning-Rplot3.png" alt="Rplot3.png"></p><p>Plotting the tree with <code>rpart.plot(t2.prune)</code>.</p><p><img src="statistical-learning-Rplot4.png" alt="Rplot4.png"></p><p>The confusion matrix after pruning. We lose a small bit of out-of-sample accuracy due to manual pruning.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(as.factor(t2.prune.pred), test$Survived)</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction  No Yes</span><br><span class="line">       No  <span class="number">343</span>  <span class="number">83</span></span><br><span class="line">       Yes  <span class="number">29</span>  <span class="number">94</span></span><br><span class="line"></span><br><span class="line">               Accuracy : <span class="number">0.796</span></span><br></pre></td></tr></table></figure></p><p>Comparing the test error rate with naiveBayes, KNN and logistic regression.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">naiveBayes (cv10):           <span class="number">0.2095</span></span><br><span class="line">KNN (cv10, K=<span class="number">1</span>):             <span class="number">0.1942</span></span><br><span class="line">classification tree:         <span class="number">0.1985</span></span><br><span class="line">classification tree (prune): <span class="number">0.2040</span></span><br></pre></td></tr></table></figure></p><h3 id="Confusion-Matrix"><a href="#Confusion-Matrix" class="headerlink" title="Confusion Matrix"></a>Confusion Matrix</h3><p>The <code>confusion matrix</code> is a convenient summary of the model prediction. In our previous example with the un-pruned tree:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(as.factor(t2.pred), test$Survived)</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction     No    Yes</span><br><span class="line">       No     <span class="number">368</span>    <span class="number">105</span></span><br><span class="line">       Yes      <span class="number">4</span>     <span class="number">72</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mapping the number to definition</span></span><br><span class="line">          Reference</span><br><span class="line">Prediction     No    Yes</span><br><span class="line">       No      TN     FN</span><br><span class="line">       Yes     FP     TP</span><br></pre></td></tr></table></figure><p>There are four types of prediction:</p><ul><li>True Positive (TP): 72</li><li>True Negative (TN): 368</li><li>False Positive (FP), or Type I Error: 4</li><li>False Negative (FN), or Type II Error: 105</li></ul><p>Several metrics can be computed:</p><ul><li>Accuracy: (TP + TN) / N = (72 + 368) / 549 = 0.8015</li><li>Error Rate: (FP + FN) / N = 1 - Accuracy = 0.1985</li><li>Precision: TP / (Predicted Positive) = 72 / (72 + 4) = 0.9474</li><li>Sensitivity: TP / (Actually Positive) = 72 / (72 + 105) = 0.4068</li></ul><h3 id="Receiver-Operator-Characteristic-Curve"><a href="#Receiver-Operator-Characteristic-Curve" class="headerlink" title="Receiver Operator Characteristic Curve"></a>Receiver Operator Characteristic Curve</h3><p>The <code>ROC</code> curve can be used to evaluate the performacne of our model. The ROC curve plots the <code>TPR</code> (true positive rate) against <code>FPR</code> (false positive rate) over a range of <code>cutoff</code> values:</p><ul><li>TPR = TP / (Actually Positive) = 0.4068</li><li>FPR = FP / (Actually Negative) = 0.0107</li></ul><p>In python, we can create a ROC curve from our previous prediction TPR and FPR:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.0001</span>)</span><br><span class="line">plt.plot(x, x)</span><br><span class="line">plt.xlabel(<span class="string">'FPR'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'TPR'</span>)</span><br><span class="line"></span><br><span class="line">x2=<span class="number">0.0107</span></span><br><span class="line">y2=<span class="number">0.4680</span></span><br><span class="line">plt.scatter(x2, y2, s=<span class="number">20</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>, x2], [<span class="number">0</span>, y2], <span class="string">'r-'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.plot([x2, <span class="number">1</span>], [y2, <span class="number">1</span>], <span class="string">'r-'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.title(<span class="string">'ROC Plot'</span>)</span><br></pre></td></tr></table></figure></p><p><img src="statistical-learning-2-Unknown-1.png" alt="Unknown-1.png"></p><p>The baseline line refers to a model/cutoff where all observations in the <code>testing</code> set are predicted to be positive (point x=1, y=1), or negative (point x=0, y=0). The area under the red lines and above the x-axis is an <code>estimate of the model fit</code> and is called <code>AUC</code>, or area under the ROC curve.</p><p>An AUC of 1 means that the model has a TPR of 1 and FPR of 0.</p><h2 id="Ensemble-Methods"><a href="#Ensemble-Methods" class="headerlink" title="Ensemble Methods"></a>Ensemble Methods</h2><h3 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h3><p>The decision tree method in general suffer from high model variance, compared to linear regression which shows low variance. <code>Bootstrap aggregation</code>, or <code>bagging</code> is a general-purpose procedure for <code>reducing variance</code> of a statistical model without affecting the bias. It is particular useful in the decision tree model context.</p><ul><li><p>For regression trees, construct <script type="math/tex">B</script> regression trees using <script type="math/tex">B</script> bootstrapped (repeatedly sampled) training sets. These trees grow deep and are not pruned, therefore having high variance. At the end, average the trees to reduce the variance.</p></li><li><p>For classification trees, construct <script type="math/tex">B</script> classification trees. When predicting a test observation, take the majority classification resulted from the <script type="math/tex">B</script> trees.</p></li></ul><p>Note that the bagging results are more accruate but less visual. We can obtain the variable importances by computing the total RSS/Gini decreases by splits over each predictors, hence providing better interpretations of the results.</p><h3 id="Random-Forest"><a href="#Random-Forest" class="headerlink" title="Random Forest"></a>Random Forest</h3><p>Random forest improves upon bagged trees by de-correlating the trees. At each split, only <script type="math/tex">m\approx\sqrt{p}</script> predictors are considered, isolating effects on single feature with large influences.</p><p>In R, use the <code>randomForest</code> package:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(caret)</span><br><span class="line"><span class="keyword">library</span>(randomForest)</span><br><span class="line">set.seed(<span class="number">9999</span>)</span><br><span class="line">df &lt;- as.data.frame(Titanic)</span><br><span class="line">df &lt;- df[rep.int(seq_len(nrow(df)), df$Freq), ]</span><br><span class="line">df &lt;- subset(df, select = -c(Freq))</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a 75/25 train/test split</span></span><br><span class="line">partition &lt;- createDataPartition(df$Survived, list=<span class="literal">FALSE</span>, p=<span class="number">0.75</span>)</span><br><span class="line">train &lt;- df[partition, ]</span><br><span class="line">test &lt;- df[-partition, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># fit random forest</span></span><br><span class="line">rf &lt;- randomForest(formula = Survived ~ .,</span><br><span class="line">                      data = train,</span><br><span class="line">                      ntree = <span class="number">100</span>,</span><br><span class="line">                      importance = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure></p><p>In-sample confusion matrix:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; rf</span><br><span class="line"></span><br><span class="line">Call:</span><br><span class="line"> randomForest(formula = Survived ~ ., data = train, ntree = <span class="number">100</span>,      importance = <span class="literal">TRUE</span>)</span><br><span class="line">               Type of random forest: classification</span><br><span class="line">                     Number of trees: <span class="number">100</span></span><br><span class="line">No. of variables tried at each split: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        OOB estimate of  error rate: <span class="number">23.43</span>%</span><br><span class="line">Confusion matrix:</span><br><span class="line">      No Yes class.error</span><br><span class="line">No  <span class="number">1063</span>  <span class="number">55</span>  <span class="number">0.04919499</span></span><br><span class="line">Yes  <span class="number">332</span> <span class="number">202</span>  <span class="number">0.62172285</span></span><br></pre></td></tr></table></figure></p><p>Out-of-sample confusino matrix:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(as.factor(predict(rf, test)), test$Survived)</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction  No Yes</span><br><span class="line">       No  <span class="number">368</span> <span class="number">108</span></span><br><span class="line">       Yes   <span class="number">4</span>  <span class="number">69</span></span><br><span class="line"></span><br><span class="line">               Accuracy : <span class="number">0.796</span></span><br></pre></td></tr></table></figure></p><p>Comparing the test error rate with naiveBayes, KNN and logistic regression.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">naiveBayes (cv10):           <span class="number">0.2095</span></span><br><span class="line">KNN (cv10, K=<span class="number">1</span>):             <span class="number">0.1942</span></span><br><span class="line">classification tree:         <span class="number">0.1985</span></span><br><span class="line">classification tree (prune): <span class="number">0.2040</span></span><br><span class="line">random forest:               <span class="number">0.2040</span></span><br></pre></td></tr></table></figure></p><h3 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h3><p><code>Boosting</code> is also a general-purpose procedure for improving accuracy of the statistical model. In boosting, we repeatedly fit new trees to the residuals from the previous tree, and add the new trees to the main tree such that a <code>loss function</code> is minimized (subject to shrinkage parameter <script type="math/tex">\lambda</script>, typical 0.01, to control overfitting). CV is often used to determine the total number of trees to be fitted.</p><p>A <code>gradient boosting machine</code> is an algorithm that calculates the gradient of the loss function and update the paramters such that the model moves in the direction of the negative gradient, thus closer to a minimum point of the loss function.</p><ul><li><code>XGBoost</code> is an open-source software library that provides a <code>gradient boosting</code> framework for R. XGBoost initially started as a research project by <a href="https://homes.cs.washington.edu/~tqchen/" target="_blank" rel="noopener">Tianqi Chen</a> as part of the Distributed (Deep) Machine Learning Community (DMLC) group</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">llibrary(caret)</span><br><span class="line"><span class="keyword">library</span>(xgboost)</span><br><span class="line"><span class="keyword">library</span>(pROC)</span><br><span class="line">set.seed(<span class="number">9999</span>)</span><br><span class="line">df &lt;- as.data.frame(Titanic)</span><br><span class="line">df &lt;- df[rep.int(seq_len(nrow(df)), df$Freq), ]</span><br><span class="line">df &lt;- subset(df, select = -c(Freq))</span><br><span class="line"></span><br><span class="line"><span class="comment"># turn survival into 0 and 1</span></span><br><span class="line">Survived_Ind &lt;- rep(<span class="number">0</span>, nrow(df))</span><br><span class="line">Survived_Ind[df$Survived == <span class="string">"Yes"</span>] &lt;- <span class="number">1</span></span><br><span class="line">df$Survived_Ind &lt;- Survived_Ind</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a 75/25 train/test split</span></span><br><span class="line">partition &lt;- createDataPartition(df$Survived_Ind, list=<span class="literal">FALSE</span>, p=<span class="number">0.75</span>)</span><br><span class="line">train &lt;- df[partition, ]</span><br><span class="line">test &lt;- df[-partition, ]</span><br><span class="line">test_2 &lt;- test</span><br><span class="line">train &lt;- subset(train, select = -c(Survived))</span><br><span class="line">test &lt;- subset(test, select = -c(Survived))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># create model frame for xgboost input</span></span><br><span class="line">train.mf  &lt;- model.frame(as.formula(<span class="string">"Survived_Ind ~."</span>), data = train)</span><br><span class="line">test.mf  &lt;- model.frame(as.formula(<span class="string">"Survived_Ind ~."</span>), data = test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a model matrix only contains numerical values.</span></span><br><span class="line">train.mm  &lt;- model.matrix(attr(train.mf, <span class="string">"terms"</span>), data = train)</span><br><span class="line">test.mm  &lt;- model.matrix(attr(test.mf, <span class="string">"terms"</span>), data = test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [optional] create A XGB dense matrix contains an R matrix and metadata</span></span><br><span class="line">train.dm  &lt;- xgb.DMatrix(train.mm, label = train$Survived, missing = -<span class="number">1</span>)</span><br><span class="line">test.dm  &lt;- xgb.DMatrix(test.mm, label = test$Survived, missing = -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># create xgboost parameter list</span></span><br><span class="line">params  &lt;-  list(<span class="string">"booster"</span> = <span class="string">"gbtree"</span>, <span class="comment"># "gblinear" for glm</span></span><br><span class="line">              <span class="string">"objective"</span> = <span class="string">"binary:logistic"</span>, <span class="comment"># the output here is a probability</span></span><br><span class="line">              <span class="string">"eval_metric"</span> = <span class="string">"auc"</span>,   </span><br><span class="line">              <span class="string">"eta"</span> = <span class="number">0.1</span>, <span class="comment"># lambda</span></span><br><span class="line">              <span class="string">"subsample"</span> = <span class="number">0.6</span>, <span class="comment"># proportion of observations</span></span><br><span class="line">              <span class="string">"colsample_bytree"</span> = <span class="number">0.6</span>, <span class="comment"># proportion of features</span></span><br><span class="line">              <span class="string">"max_depth"</span> = <span class="number">5</span>) <span class="comment"># depth of the decision tree</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># train xgboost model</span></span><br><span class="line">model.cv &lt;- xgb.cv(params = params,</span><br><span class="line">                   data = train.dm,</span><br><span class="line">                   nrounds = <span class="number">1000</span>, <span class="comment"># the number of trees / iterations</span></span><br><span class="line">                   prediction = <span class="literal">FALSE</span>, <span class="comment"># storage of prediction under each tree</span></span><br><span class="line">                   print_every_n = <span class="number">25</span>,</span><br><span class="line">                   early_stopping_rounds = <span class="number">50</span>,</span><br><span class="line">                   maximize = <span class="literal">TRUE</span>, <span class="comment"># AUC metric -&gt; maximize</span></span><br><span class="line">                   nfold = <span class="number">6</span>) <span class="comment"># cv</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fit final model</span></span><br><span class="line">model &lt;- xgb.train(params = params,</span><br><span class="line">                   data = train.dm,</span><br><span class="line">                   nrounds = model.cv$best_iteration,</span><br><span class="line">                   prediction = <span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># format prediction</span></span><br><span class="line">xgb.prob &lt;- predict(model, test.dm)</span><br><span class="line">xgb.pred &lt;- rep(<span class="string">"No"</span>, sum(lengths(xgb.prob)))</span><br><span class="line">xgb.pred[xgb.prob &gt; <span class="number">0.5</span>] &lt;- <span class="string">"Yes"</span></span><br></pre></td></tr></table></figure><p>Feature importance:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; xgb.importance(feature_names = dimnames(train.dm)[[<span class="number">2</span>]], model = model)</span><br><span class="line">    Feature      Gain     Cover Frequency</span><br><span class="line"><span class="number">1</span>: Class3rd <span class="number">0.8347889</span> <span class="number">0.5957944</span>       <span class="number">0.5</span></span><br><span class="line"><span class="number">2</span>: Class2nd <span class="number">0.1652111</span> <span class="number">0.4042056</span>       <span class="number">0.5</span></span><br></pre></td></tr></table></figure></p><p>AUC result:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auc(test$Survived_Ind, xgb.prob)</span><br><span class="line">Area under the curve: <span class="number">0.6033</span></span><br></pre></td></tr></table></figure></p><p>Confusion matrix:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; confusionMatrix(as.factor(xgb.pred), as.factor(test_2$Survived))</span><br><span class="line">Confusion Matrix and Statistics</span><br><span class="line"></span><br><span class="line">          Reference</span><br><span class="line">Prediction  No Yes</span><br><span class="line">       No  <span class="number">370</span> <span class="number">180</span></span><br><span class="line">       Yes   <span class="number">0</span>   <span class="number">0</span></span><br><span class="line"></span><br><span class="line">               Accuracy : <span class="number">0.6727</span></span><br></pre></td></tr></table></figure></p><p>Unfortunately xgboost predict everything to be “No”</p><p>Comparing the test error rate with naiveBayes, KNN and logistic regression.<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">naiveBayes (cv10):           <span class="number">0.2095</span></span><br><span class="line">KNN (cv10, K=<span class="number">1</span>):             <span class="number">0.1942</span></span><br><span class="line">classification tree:         <span class="number">0.1985</span></span><br><span class="line">classification tree (prune): <span class="number">0.2040</span></span><br><span class="line">random forest:               <span class="number">0.2040</span></span><br><span class="line">xgboost:                     <span class="number">0.3273</span></span><br></pre></td></tr></table></figure></p><h3 id="Ensemble-Model-Interpretation"><a href="#Ensemble-Model-Interpretation" class="headerlink" title="Ensemble Model Interpretation"></a>Ensemble Model Interpretation</h3><p><code>Feature Importance</code> ranks the contribution of each feature.<br><code>Partial Dependence Plots</code> visualizes the model’s <code>average</code> dependence on a specific feature (or a pair of features).</p><h1 id="Unsupervised-Learning-8634"><a href="#Unsupervised-Learning-8634" class="headerlink" title="Unsupervised Learning &#8634;"></a><span id="03">Unsupervised Learning</span> <sup><a href="#nav">&#8634;</a></sup></h1><p>In <code>supervised learning</code>, we are provided a set of <script type="math/tex">n</script> observations <script type="math/tex">X</script>, each containing <script type="math/tex">p</script> features, and a response variable <script type="math/tex">Y</script>. We are interested at predicting <script type="math/tex">Y</script> using the observations and features.</p><p>In <code>unsupervised learning</code>, we are interested at exploring hidden relationships within the data themself without involving any response variables. It is “unsupervised” in the sense that the learning outcome is subjective, unlike supervised learning in which specific metrics such as error rates are used to evaluate learning outcomes.</p><h2 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h2><p>See another <a href="https://jackliu234.com/2019/04/pca-deep-dive/">blog post</a> on PCA.</p><h2 id="K-Mean-Clustering"><a href="#K-Mean-Clustering" class="headerlink" title="K-Mean Clustering"></a>K-Mean Clustering</h2><p><code>Clustering</code> seek to partition data into homogeneous subgroups. The <code>K-Mean</code> clustering partitions data into <script type="math/tex">K</script> distinct and non-overlapping clusters <script type="math/tex">C</script>, by minimizing the <code>objective function</code> of total in-cluster variation <script type="math/tex">W(C)</script>, which is the sum of all pair-wise squared Euclidean distances between the observations in the cluster, divided by the number of observations in the cluster.</p><script type="math/tex; mode=display">\text{minimize } \{\ \sum_{k=1}^K W(C_k)\ \}</script><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>The algorithm divides data into <script type="math/tex">K</script> <code>initial cluster</code>, and reassign observations to the cluster with the closest cluster <code>centroid</code> (mean of all previous observations in the cluster).</p><p>The K-Mean clustering algorithm finds a <code>local optimum</code>, and therefore depend on the initial cluster. So it is important to repeat the process with different initial points, and then select the best result based on minimum total in-cluster variation.</p><ul><li>The <code>nstart</code> parameter in the <code>kmean</code> function in R specifies the number of random starting centers to try and the one ended with the optimal objective function value will be selected.</li></ul><p>It is also important to check for <code>outliers</code>, as the algorithm would let the outlier become its own cluster and stops improving.</p><h3 id="Standardization"><a href="#Standardization" class="headerlink" title="Standardization"></a>Standardization</h3><p>It is a must to standardize the variables before performing k-mean cluster analysis, as the objective function (Euclidean distance, etc.) is calculated from the actual value of the variable.</p><h3 id="Curse-of-Dimensionality"><a href="#Curse-of-Dimensionality" class="headerlink" title="Curse of Dimensionality"></a>Curse of Dimensionality</h3><p>The <code>curse of dimensionality</code> describe the problems when performing clustering on three or more dimensional space, where:</p><ul><li>visualization becomes harder</li><li>as the number of dimensions increases, the Euclidean distance between data points are the same on average.</li></ul><p>The solution is to reduce the dimensionality before using clustering technique.</p><h3 id="The-Elbow-Method"><a href="#The-Elbow-Method" class="headerlink" title="The Elbow Method"></a>The Elbow Method</h3><p>Each cluster replaces its data with its center. In other words, with a clustering model we try to predict which cluster a data point belongs to.</p><p>A good model would explain more variance in the data with its cluster assignments. The <code>elbow</code> method looks at the <script type="math/tex">F</script> statistics defined as:</p><script type="math/tex; mode=display">F = \dfrac{\text{between-group variance}}{\text{total variance}}</script><p>As soon as the additional F statistics drops/stops increasing when adding a new cluster, we use that number of clusters.</p><h2 id="Hierarchical-Clustering"><a href="#Hierarchical-Clustering" class="headerlink" title="Hierarchical Clustering"></a>Hierarchical Clustering</h2><p>The <code>hierarchical</code> clustering provide flexibilities in terms of the number of clusters <script type="math/tex">K</script>. It results in a tree-based representation of the data called <code>dendrogram</code>, which is built either <code>bottom-up/agglomerative</code> or <code>top-down/divisive</code>.</p><p>Hierarchical clustering assumes that there exists a hierarchical structure. In most feature generation cases, we prefer k-means clustering instead.</p><h3 id="Agglomerative"><a href="#Agglomerative" class="headerlink" title="Agglomerative"></a>Agglomerative</h3><p>An <code>agglomerative</code> hierarchical cluster starts off by assigning each data point in its own cluster. Each step in the clustering process two similar clusters with minimum <code>distance</code> among all are merged, where the distance is calculated between the elements within the cluster that are closest (<code>single-linkage</code>) or furthest (<code>complete-linkage</code>)</p><p><br><br><br></p><p>Reference:</p><ul><li>An Introduction to Statistical Learning with Applications in R, James, Witten, Hastie and Tibshirani</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a study note on the book &lt;a href=&quot;http://faculty.marshall.usc.edu/gareth-james/ISL/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;An Introduction to Statistical Learning with Applications in R&lt;/a&gt;, with my own experimental R-code for each topic.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Math" scheme="http://jackliu234.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Notes on C++</title>
    <link href="http://jackliu234.com/2019/04/cpp/"/>
    <id>http://jackliu234.com/2019/04/cpp/</id>
    <published>2019-04-06T04:00:00.000Z</published>
    <updated>2019-08-23T02:14:24.803Z</updated>
    
    <content type="html"><![CDATA[<p>C++ is a <code>complied</code> （vs interpreted: python), <code>general-purpose</code> (vs domain-specific: HTML) programming language created by Danish programmer <code>Bjarne Stroustrup</code> as an extension to C.</p><h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h2><p>A compiler translate a high level language into a low level language and create an executable program.</p><ol><li>Pre-processor: read preprocessing lines <code>#include &quot;foo.hpp&quot;</code></li><li>Compiler: turn the above code it into assembly code (ASM).<ul><li><strong><em>front end</em></strong> create IR (intermediate representation) with SSA (static singale assignment). The runtime is <script type="math/tex">O(n)</script>.</li><li><strong><em>middle end</em></strong> optimize IR. remove unnecessary operations, <script type="math/tex">O(n^2)</script> or more.</li><li><strong><em>back end</em></strong> produce ASM</li></ul></li><li>Assembler: turn ASM into binary code</li><li>Linker: link all relevant headers, libraries together</li><li>Debugger: type checking</li><li>Object Copy: generate .exe (for windows), and .bin (for mac)</li></ol><h3 id="G"><a href="#G" class="headerlink" title="G++"></a>G++</h3><p>Compile with g++ at the command line:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ g++ toto.cpp</span><br><span class="line">$ g++ toto.cpp -E (show c pre-processor)</span><br><span class="line">$ g++ toto.cpp --verbose (ask compile to give different steps)</span><br></pre></td></tr></table></figure></p><p>Running the complied result:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /a.exe</span><br></pre></td></tr></table></figure></p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>The <code>C++ standard library</code> is a collection of classes and functions, represented by different headers. For example, include the <code>&lt;iostream&gt;</code> header to handle input and outputs and other non-standard headers using double quoto.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"foo.h"</span></span></span><br></pre></td></tr></table></figure></p><h3 id="Macro"><a href="#Macro" class="headerlink" title="Macro"></a>Macro</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">define N <span class="number">4</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; N + <span class="number">2</span>; <span class="comment">// show 6</span></span><br></pre></td></tr></table></figure><h3 id="Guards"><a href="#Guards" class="headerlink" title="Guards"></a>Guards</h3><p>In C++, function, class and variable can only be declared once. We use <code>guards</code> to make sure we do not duplicate declaration in multiple files.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#ifndef &quot;foo.h&quot;</span><br><span class="line">#define &quot;foo.h&quot;</span><br></pre></td></tr></table></figure></p><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><p>Some classes and functions are grouped under the same name, which divides the global scope into sub-scopes, each with its own namespaces.</p><p>Functions and classes in the C++ standard library are defined in the <code>std</code> namespace. For example, the <code>cin</code> (standard input), <code>cout</code> (standard output) and <code>end</code> (end line) objects.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p><p>Alternatively, we can use <code>using namespace std;</code>.</p><h2 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h2><p>Every variable has to have a <code>type</code> in C++, and the type has to be declared and cannot be changed. There are fundamental types and user-defined types (classes)</p><p><strong><em>Characters</em></strong> In computer, each <code>bit</code> stores a binary (0/1) value. A <code>byte</code> is 8 bits.  The computer stores characters in a byte using the <a href="https://www.ascii-code.com" target="_blank" rel="noopener">ASCII</a> format.</p><p><strong><em>Numbers</em></strong> The computer stores numbers in binary format with bits. The <code>leftmost</code> bit is used to store the sign of a number. (See <a href="http://en.wikipedia.org/wiki/Two’s_complement" target="_blank" rel="noopener">twos-complement method</a>). Real values are stored using a <code>mantissa</code> and an exponent:</p><script type="math/tex; mode=display">Value = Mantissa \times 2^{Exponent}</script><p>Note that very few values can be exactly represented, and how close we can get depends on the number of bits available.</p><div class="table-container"><table><thead><tr><th>Type</th><th>Size (Bytes)</th><th>Value Range</th></tr></thead><tbody><tr><td>bool</td><td>1</td><td>true or false</td></tr><tr><td>char</td><td>1</td><td>-128 to 127</td></tr><tr><td>short</td><td>2</td><td>-32,768 to 32,767</td></tr><tr><td>int</td><td>4</td><td>-2,147,483,648 to 2,147,483,647</td></tr><tr><td>float</td><td>4</td><td>3.4E +/- 38</td></tr><tr><td>double</td><td>8</td><td>1.7E +/- 308</td></tr></tbody></table></div><p>C++ is a <code>strongly typed</code> language, which means type errors needs to be resolved for all variables at <code>compile</code> time.</p><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>Every console application has to have a <code>main()</code> function, which takes no argument and returns an integer value by default.</p><p>A function that adds two numbers:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = Add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" Result: "</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Overloading</code> allows 2 or more functions to have the same name, but they must have different input argument <code>types</code>.</p><h3 id="Function-Object"><a href="#Function-Object" class="headerlink" title="Function Object"></a>Function Object</h3><p>Function object, or <code>functors</code>, are objects that behave like functions, are functions with state.</p><p>A regular function looks like this:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddOne</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> result = AddOne(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>A function object implementaion:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddOne</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span>&amp; val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AddOne addone;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> result = addone(val)</span><br></pre></td></tr></table></figure></p><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>Lambdas is a new feature introduced in C++11, which is an inline function that can be used as a parameter or local object.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] (<span class="built_in">string</span> s) <span class="comment">// [] is the lambda introducer/capture clause</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>Example 1</em></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>&#125;;</span><br><span class="line">for_each(v.cbegin(), v.cend(),                  <span class="comment">//range</span></span><br><span class="line">         [](<span class="keyword">int</span> elem) &#123;<span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="built_in">endl</span>;&#125;)  <span class="comment">//lambda</span></span><br></pre></td></tr></table></figure></p><p><strong><em>Example 2</em></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>&#125;;</span><br><span class="line">transform(v.begin(), v.end(),</span><br><span class="line">          v.begin(), [] (<span class="keyword">int</span> elem) &#123;<span class="keyword">return</span> elem * elem&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><em>Example 3</em></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;Person&gt; ppl;</span><br><span class="line">sort(ppl.begin(), ppl.end(),</span><br><span class="line">     [](<span class="keyword">const</span> Person&amp; p1, <span class="keyword">const</span> Person&amp;p2)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1.GetAge() &lt; p2.GetAge()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Extern"><a href="#Extern" class="headerlink" title="Extern"></a>Extern</h3><p>The keyword extern means the function is declared in another file.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> foo(<span class="number">100</span>); &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Inline-Function"><a href="#Inline-Function" class="headerlink" title="Inline Function"></a>Inline Function</h3><p>C++ provides <code>inline</code> funcitons such that the overhead of a small function can be reduced. When inline function is called the entire code of the function is inserted at the point of the inline function call.</p><h2 id="Typedef"><a href="#Typedef" class="headerlink" title="Typedef"></a>Typedef</h2><p>Use <code>typedef</code> keyword to define a type alias.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> OptionPrice;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> StockPrice;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> Strike;</span><br><span class="line"><span class="function">OptionPrice <span class="title">BSPrice</span><span class="params">(StockPrice S, Strike K)</span></span></span><br></pre></td></tr></table></figure></p><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><p>Standard operations:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Arithmetic: +, -, *, /</span><br><span class="line">Comparison: &lt;, &gt;, &lt;=, &gt;=</span><br><span class="line">Negate: !</span><br><span class="line">Equality, non Equality: ==, !=</span><br><span class="line">Logical <span class="keyword">and</span>, <span class="keyword">or</span>, &amp;&amp;, ||</span><br><span class="line">Assignment: =</span><br><span class="line">Modulo: %</span><br><span class="line">Increment, Decrement: i++, i--</span><br><span class="line">Multiple Operations: i += <span class="number">1</span>, i -= <span class="number">1</span>, i *= <span class="number">1</span>, i /= <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>Note the difference between <code>i++</code> and <code>++i</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i++; <span class="comment">// return (old) i and increment i</span></span><br><span class="line">++i; <span class="comment">// increment i and return new i</span></span><br></pre></td></tr></table></figure></p><h2 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h2><p>Use the <code>const</code> keyword to define a constant value. The <code>compiler</code> will stop any attempt to alter the constant values.</p><p>Since C++ is a strongly typed language, it is preferred to use <code>const int N = 4</code>, instead of <code>#define N 4</code>, as the former defines a type.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><strong><em>Example 1</em></strong> A reference is an alias for a variable and cannot rebind to a different variable. We can change <code>val</code> by changing <code>ref</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; ref = val;</span><br><span class="line">ref = <span class="number">20</span>; <span class="comment">// this will change val to 20</span></span><br></pre></td></tr></table></figure></p><p><strong><em>Example 2</em></strong> We can also bind a const reference to a const object. An error will be raised if attempt to change the value or the reference.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = val;</span><br><span class="line">val = <span class="number">20</span>; <span class="comment">// error</span></span><br><span class="line">ref = <span class="number">20</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p><p><strong><em>Example 3</em></strong> We can also bind a const reference to a non-const object, thereafter we can NOT change the object using the reference.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = val;</span><br><span class="line">val = <span class="number">20</span>; <span class="comment">// ok</span></span><br><span class="line">ref = <span class="number">20</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p><p><br></p><p><strong><em>Pass By Value</em></strong> In a function, we can pass an argument by either <code>value</code> or <code>reference</code>. When passing by <code>value</code>, the variable <code>x</code> will NOT be changed. In this case, we waste time to both create a copy inside the function and memory to store the copy<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoubleValue</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    number = number * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    DoubleValue(x);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"x = "</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong><em>Pass By Reference</em></strong> When passing by <code>reference</code> (by adding <code>&amp;</code> in the function argument parameter), the variable <code>x</code> WILL be changed.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoubleValue</span><span class="params">(<span class="keyword">int</span>&amp; number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    number = number * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    DoubleValue(x);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"x = "</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong><em>Pass By Const Reference</em></strong> We add const when we do not want the specific function argument to be tempered when passed by reference. In this example, there will be a compiler error as we are trying to change the const reference <code>number</code> in the function.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoubleValue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    number = number * <span class="number">2</span>; <span class="comment">// error, cannot change const ref "number"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    DoubleValue(x);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"x = "</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h2><p>In computer memory, each stored values has an address associated with it. We use a <code>pointer</code> object to store address of another object and access it indirectly.</p><p>There are two pointer operator:</p><ol><li><code>&amp;</code>: <code>address of</code> operator, used to get the address of an object</li><li><code>*</code>: <code>de-reference</code> operator, used to access the object</li></ol><p><strong><em>Example 1</em></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* ptr = <span class="literal">nullptr</span>; <span class="comment">// initiate an empty pointer</span></span><br><span class="line"><span class="keyword">int</span>* ptr = &amp;val; <span class="comment">// initiate ptr with the address of val</span></span><br><span class="line">*ptr = <span class="number">20</span>; <span class="comment">// change val using the ptr pointer</span></span><br></pre></td></tr></table></figure></p><p><strong><em>Example 2</em></strong>  If the object is const, a pointer cannot be used to change it.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* ptr = &amp;val;</span><br><span class="line">*ptr = <span class="number">20</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p><p><strong><em>Example 3</em></strong>  You can have a pointer that itself is const<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> ptr = &amp;val;</span><br><span class="line">*ptr = <span class="number">20</span>; <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> val2 = <span class="number">20</span>;</span><br><span class="line">ptr = &amp;val2 <span class="comment">// error, as the pointer is const</span></span><br></pre></td></tr></table></figure></p><h2 id="Casting"><a href="#Casting" class="headerlink" title="Casting"></a>Casting</h2><p>C++ allows <code>implicit</code> and <code>explicit</code> conversions of types.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">b = a; <span class="comment">// implicit conversion</span></span><br><span class="line">b = (<span class="keyword">int</span>) a; <span class="comment">// explicit conversion</span></span><br></pre></td></tr></table></figure></p><p>However, the traditional explicit type-casting allows conversions between any types, and leads to run-time error. To control these conversions, we introduce four specific casting operators:</p><ul><li><code>dynamic_cast&lt;new_type&gt;( )</code>: used only with pointers (and/or references to objects); can cast a <code>derived</code> class to its <code>base</code> class; <code>base-to-derived</code> conversions are allowed only with <code>polymorphic</code> base class</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Derived* derived_ptr;</span><br><span class="line">    Base* base_ptr = <span class="keyword">dynamic_cast</span>&lt;Base*&gt; (derived_ptr);</span><br><span class="line"></span><br><span class="line">    Base* base_ptr_2 = <span class="keyword">new</span> Derived;</span><br><span class="line">    Derived* derived_ptr_2 = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt; (base_ptr_2);</span><br><span class="line">    <span class="comment">// ok, base class polymorphic</span></span><br><span class="line"></span><br><span class="line">    Base* base_ptr_3 = <span class="keyword">new</span> Base;</span><br><span class="line">    Derived* derived_ptr_3 = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt; (base_ptr_3);</span><br><span class="line">    <span class="comment">// will not work, derived_ptr_3 will be assigned a nullptr</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"derived_ptr_2: "</span> &lt;&lt; derived_ptr_2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"derived_ptr_3: "</span> &lt;&lt;  derived_ptr_3 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">derived_ptr_2: <span class="number">0x7fa5cec00630</span></span><br><span class="line">derived_ptr_3: <span class="number">0x0</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><code>static_cast &lt; new_type&gt;( )</code>: used only with pointers (and/or references to objects); can cast <code>base-to-derived</code> or <code>derived-to-base</code>, but no safety check at run-time;</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Base* base_ptr_3 = <span class="keyword">new</span> Base;</span><br><span class="line">Derived* derived_ptr_3 = <span class="keyword">static_cast</span>&lt;Derived*&gt; (base_ptr_3);</span><br><span class="line"><span class="comment">// not nullptr this time, but lead to error when de-referencing derived_ptr_3</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">derived_ptr_3: <span class="number">0x7fc3d7400690</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><code>reinterpret_cast &lt;new_type&gt;( )</code>: convert pointer to another unrelated class; often lead to unsafe de-referencing</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line">A* a = <span class="keyword">new</span> A;</span><br><span class="line">B* b = <span class="keyword">reinterpret_cast</span>&lt;B*&gt; (a);</span><br></pre></td></tr></table></figure><p><br></p><ul><li><code>const_cast &lt;new_type&gt;( )</code>: remove/set the constant-ness of an object</li></ul><h2 id="Array-C-Style"><a href="#Array-C-Style" class="headerlink" title="Array (C-Style)"></a>Array (C-Style)</h2><p>An array is a fixed collection of similar kinds of items that are stored in a contiguous block in memory. We define the size of the array at creation, and the array index starts a 0 in C++.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> a[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// uniform initializer syntax</span></span><br></pre></td></tr></table></figure></p><p>The address of the array is the same as the address of the first element of the array. Therefore, we can access an array using pointer increment - very efficient.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span>* ptr = &amp;a[<span class="number">0</span>]; <span class="comment">// the same as int* ptr = a</span></span><br><span class="line"><span class="keyword">int</span> a0 = a[<span class="number">0</span>]; <span class="comment">// the same as int a0 = *ptr</span></span><br><span class="line"><span class="keyword">int</span> a3 = a[<span class="number">3</span>]; <span class="comment">// the same as int a3 = *(ptr+3) or *(a+3)</span></span><br></pre></td></tr></table></figure></p><h2 id="Dynamic-Allocation"><a href="#Dynamic-Allocation" class="headerlink" title="Dynamic Allocation"></a>Dynamic Allocation</h2><p><code>Dynamic memory allocation</code> is necessary when you do NOT know the size of the array at compile time. We use a <code>new</code> keyword paired with a <code>delete</code> keyword.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span>[] = a; <span class="comment">// correct. this tells the CPU that it needs to clean up multiple variables instead of a single variable</span></span><br><span class="line"><span class="keyword">delete</span> a; <span class="comment">// incorrect. using this version will lead to a memory leak.</span></span><br></pre></td></tr></table></figure></p><p>Dynamic allocate a <script type="math/tex">4\times4</script> matrix with cast.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span>** a)</span> </span>&#123;</span><br><span class="line">    * a = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">16</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> (* a)[<span class="number">4</span>];</span><br><span class="line">    func( (<span class="keyword">double</span>**)&amp;a );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++) &#123;</span><br><span class="line">            a[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 1 1 1</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 1 1</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><p>A C++ <code>library</code> is a package of reusable code typically with these two components:</p><ul><li>header file</li><li>precompiled binary containing the machine code for functionality implemntation</li></ul><p>There are two types of c++ libraries: <code>static</code> and <code>dynamic</code> libraries.</p><ul><li>a <code>static</code> library has a <code>.a</code> (<code>.lib</code> on Windows) extension and the library codes are complied as part of the executable - so that user only need to distribute the executable for other users to run the file with a static library.</li><li>a <code>dynamic</code> library has a <code>.so</code> (<code>.dll</code> on Windows) extension and is loaded at run times. It saves space as many program can share a copy of dynamic library code, and it can be upgraded to new versions without replacing all the executables using it.</li></ul><h1 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h1><h2 id="If-Else"><a href="#If-Else" class="headerlink" title="If/Else"></a>If/Else</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition_1)</span><br><span class="line">&#123;</span><br><span class="line">   statement1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition_2)</span><br><span class="line">&#123;</span><br><span class="line">  statement2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  statement2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><p>A switch statement tests an integral or enum value against a set of constants. we can NOT use a string in the switch statement.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; value;</span><br><span class="line">    <span class="keyword">switch</span>(value)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"value is zero"</span>;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// if remove this break, it will also show case 1 even if value is 0</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"value is one"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"value is not 0 or 1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="While-Do-While-For-Loop"><a href="#While-Do-While-For-Loop" class="headerlink" title="While / Do While / For Loop"></a>While / Do While / For Loop</h2><p>While loop:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" n: "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    n = n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Do while loop:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter number (0 to end): "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"You entered: "</span> &lt;&lt; n &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"> &#125; <span class="keyword">while</span> (n != <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>For loop:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; ++n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"n: "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>For loop with two variables:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">10</span> &amp;&amp; j &lt; <span class="number">10</span>; ++i, j+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"i:"</span> &lt;&lt; i &lt;&lt; <span class="string">", j:"</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><p>The <code>enum</code> (enumerated) type is used to define collections of named integar constants.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> CurrencyType &#123;USD, EUR, GBP&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; USD &lt;&lt; <span class="string">" "</span> &lt;&lt; EUR &lt;&lt; <span class="string">" "</span> &lt;&lt; GBP;</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> CurrencyType &#123;USD, EUR=<span class="number">10</span>, GBP&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; USD &lt;&lt; <span class="string">" "</span> &lt;&lt; EUR &lt;&lt; <span class="string">" "</span> &lt;&lt; GBP;</span><br><span class="line"><span class="number">0</span> <span class="number">10</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></p><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>A <code>class</code> achieve data <code>abstraction</code> and <code>encapsulation</code>.</p><ul><li>abstraction refers to the separation of interface and implementation</li><li>encapsulation refers to combining data and functions so that data is only accessible through functions.</li></ul><h2 id="Member-Variable-amp-Function"><a href="#Member-Variable-amp-Function" class="headerlink" title="Member Variable &amp; Function"></a>Member Variable &amp; Function</h2><p>Define a customer class with member variable and function.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Customer(); <span class="comment">// default constructor</span></span><br><span class="line">    Customer(<span class="built_in">string</span> name, <span class="built_in">string</span> address);</span><br><span class="line">    ~Customer(); <span class="comment">// destructor, to free up resources</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetAddress</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetAddress</span><span class="params">(<span class="built_in">string</span> address)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> name_;</span><br><span class="line">    <span class="built_in">string</span> address_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Instantiate Customer class instances to represent different customer.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Customer <span class="title">c1</span><span class="params">(<span class="string">"Joe"</span>, <span class="string">"Hyde Park"</span>)</span></span>;</span><br><span class="line"><span class="function">Customer <span class="title">c2</span><span class="params">(<span class="string">"Jim"</span>, <span class="string">"Chicago"</span>)</span></span>;</span><br><span class="line"><span class="function">Customer <span class="title">c3</span><span class="params">(<span class="string">"John"</span>, <span class="string">"New York"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use `.` to access member function.</span></span><br><span class="line">c1.GetName()</span><br><span class="line">c2.SetAddress(<span class="string">"Beijing"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="Protection-Level"><a href="#Protection-Level" class="headerlink" title="Protection Level"></a>Protection Level</h2><p>There are three protection levels to keep class data member internal to the class.</p><ol><li><strong><em>public</em></strong> accessible to all.</li><li><strong><em>protected</em></strong> accessible in the class that defines them and in classes that <code>inherit</code> from that class.</li><li><strong><em>private</em></strong> only accessible within the class defining them.</li></ol><h2 id="Constructor-Destructor"><a href="#Constructor-Destructor" class="headerlink" title="Constructor / Destructor"></a>Constructor / Destructor</h2><p>A <code>constructor</code> is a special member functions used to initialize the data members when an object is created. This is an example to use <code>initializer list</code> to create more efficient constructors<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Customer::Customer()</span><br><span class="line">    : name_(<span class="string">""</span>),</span><br><span class="line">    address_(<span class="string">""</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// name_ = "";</span></span><br><span class="line">    <span class="comment">// address_ = "";</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Customer::Customer(<span class="built_in">string</span> name, <span class="built_in">string</span> address)</span><br><span class="line">    : name_(name),</span><br><span class="line">    address_(address)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">Customer::~Customer()</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Free-Store"><a href="#Free-Store" class="headerlink" title="Free-Store"></a>Free-Store</h2><p>There are several ways to create objects on a computer:</p><ul><li><p><strong><em>Automatic/Stack</em></strong> <code>int a;</code></p></li><li><p><strong><em>Dynamic Allocated</em></strong></p><ul><li><strong><em>Free Store</em></strong> <code>int* ptr = new a[10];</code></li><li><strong><em>Heap</em></strong> allocated/freed by <code>malloc/free</code></li></ul></li></ul><p>Summarized in a table from <a href="https://www.geeksforgeeks.org/stack-vs-heap-memory-allocation/" target="_blank" rel="noopener">geeksforgeeks</a></p><div class="table-container"><table><thead><tr><th>Parameter</th><th>Stack</th><th>Heap</th></tr></thead><tbody><tr><td>Basic</td><td>Memory is allocated in a contiguous block</td><td>Memory is allocated in any random order</td></tr><tr><td>Allocated and de-allocation</td><td>Automatic by compiler instructions</td><td>Manual by programmer</td></tr><tr><td>Cost</td><td>Less</td><td>More</td></tr><tr><td>Access time</td><td>Faster</td><td>Slower</td></tr><tr><td>Main issue</td><td>Shortage of memory</td><td>Memory leak/fragmentation</td></tr></tbody></table></div><p>We use <code>-&gt;</code> to access free-store object’s member functions:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Customer* c = <span class="keyword">new</span> Customer(<span class="string">"Joe"</span>, <span class="string">"Chicago"</span>);</span><br><span class="line">c-&gt;GetName()</span><br><span class="line">c-&gt;SetAddress(<span class="string">"New York"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="Const-Member-Functions"><a href="#Const-Member-Functions" class="headerlink" title="Const Member Functions"></a>Const Member Functions</h2><p>A <code>const object</code> can only invoke <code>const member function</code> on the class. A const member function is not allowed to modify any of the data members on the object on which it is invoked. However, if a data member is marked <code>mutable</code>, it then can be modified inside a const member function.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> Customer <span class="title">c1</span><span class="params">(<span class="string">"Joe"</span>, <span class="string">"Hyde Park"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.GetName(); <span class="comment">// ok if GetName() is a const member function.</span></span><br></pre></td></tr></table></figure></p><h2 id="Static-Member"><a href="#Static-Member" class="headerlink" title="Static Member"></a>Static Member</h2><p>We use <code>static</code> keyword to associate a member with the class, as oppose to class instances. A static data member can NOT be accessed directly using a non-static member function.</p><p>Static member variables can NOT be initialized through the class constructor, rather, they are initialized once outside the class body. However, a const static member variable can be initialized within the class body.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Counter();</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetCount</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Increment</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count_; <span class="comment">// non-const static need to be initialized outside</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> count_2_ = <span class="number">0</span>; <span class="comment">// const static can be initialized within</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Counter::count_ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Counter c;</span><br><span class="line">c.Increment(); <span class="comment">// or Counter::Increment()</span></span><br></pre></td></tr></table></figure></p><h2 id="This"><a href="#This" class="headerlink" title="This"></a>This</h2><p>Every non-static member function has access to a <code>this</code> pointer, which is initialized with the address of the object when the member function is invoked.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> Currency::GetExchangeRate()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> exchangeRate_;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>-&gt;exchangeRate_; <span class="comment">// equivalent</span></span><br><span class="line">   <span class="keyword">return</span> (*<span class="keyword">this</span>).exchangeRate_; <span class="comment">// equivalent</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Copy-Constructor"><a href="#Copy-Constructor" class="headerlink" title="Copy Constructor"></a>Copy Constructor</h2><p>We use the copy constructor to construct an object from another already constructed object of the same type.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Customer(<span class="keyword">const</span> Customer&amp; other);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Customer::Customer(<span class="keyword">const</span> Customer&amp; other)</span><br><span class="line">    : name_(other.name_)</span><br><span class="line">    address_(other.address_)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Customer <span class="title">c2</span><span class="params">(c1)</span></span>;</span><br></pre></td></tr></table></figure></p><h2 id="Assignment-Operator"><a href="#Assignment-Operator" class="headerlink" title="Assignment Operator"></a>Assignment Operator</h2><p>We use the assignment operator to assign an object of the same type.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Customer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Customer&amp; other);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Customer&amp; Customer::<span class="keyword">operator</span>=(<span class="keyword">const</span> Customer&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other)  <span class="comment">//checking for self assignment</span></span><br><span class="line">   &#123;</span><br><span class="line">       name_    =  other.name_;</span><br><span class="line">       address_ =  other.address_;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//return the object on which the function was invoked</span></span><br><span class="line">   <span class="keyword">return</span> (*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Shallow-Deep-Copy"><a href="#Shallow-Deep-Copy" class="headerlink" title="Shallow / Deep Copy"></a>Shallow / Deep Copy</h2><p>The default copy constructor and assignment operator provides <code>shallow copy</code>, which copies each member of the class individually. For pointer member, the shallow copying copies the address of the pointer, resulting in both members pointing to the same object on the free store.</p><p>A <code>deep copy</code>, however, creates a new object on the free store and copy the contents of the object the original pointer is pointing to.</p><p><strong><em>Deep Copy</em></strong> copy constructor<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Customer::Customer(<span class="keyword">const</span> Customer&amp; other)</span><br><span class="line">    :name_(other.name_),</span><br><span class="line">     address_(other.address_),</span><br><span class="line">     account_(<span class="keyword">new</span> Account(other.account_-&gt;GetAccountNumber(),</span><br><span class="line">              other.account_-&gt;GetAccountBalance()))</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>Deep Copy</em></strong> assignment operator<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Customer&amp; Customer::<span class="keyword">operator</span>=(<span class="keyword">const</span> Customer&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other)</span><br><span class="line">    &#123;</span><br><span class="line">       name_ = other.name_;</span><br><span class="line">       address_ = other.address_;</span><br><span class="line">       <span class="keyword">delete</span> account_;</span><br><span class="line">       account_= <span class="keyword">new</span> Account(other.account_-&gt;GetAccountNumber(),</span><br><span class="line">                           other.account_-&gt;GetAccountBalance());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="The-Rule-of-3"><a href="#The-Rule-of-3" class="headerlink" title="The Rule of 3"></a>The Rule of 3</h2><p>There are 3 operations that control the copies of an object: copy constructor, assignment operator, and destructor. If you define one of them, you will most likely need to define the other two as well.</p><h2 id="Singleten-Class"><a href="#Singleten-Class" class="headerlink" title="Singleten Class"></a>Singleten Class</h2><p>The <code>Singleton</code> design pattern makes sure only one instance of an object of a given type is instantiated in a program, and provides a global point of access to it</p><ol><li>change the access level of the constructor to private</li><li>add new public member function <code>Instance()</code> to create the object</li><li>use static member variable to hold the object</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrencyFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">static</span> CurrencyFactory* <span class="title">Instance</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function">Currency <span class="title">CreateCurrency</span><span class="params">(<span class="keyword">int</span> currencyType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   CurrencyFactory();</span><br><span class="line">   <span class="keyword">static</span> CurrencyFactory* instance_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CurrencyFactory* CurrencyFactory::Instance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance_)</span><br><span class="line">        instance_ = <span class="keyword">new</span> CurrencyFactory;</span><br><span class="line">    <span class="keyword">return</span> instance_; <span class="comment">// no more than one CurrencyFactory object.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Currency CurrencyFactory::CreateCurrency(<span class="keyword">int</span> currencyType)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span>(currencyType)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> EUR:</span><br><span class="line">         <span class="keyword">return</span> Currency(<span class="string">"EUR"</span>, <span class="number">0.7901</span>);</span><br><span class="line">      <span class="keyword">case</span> GBP:</span><br><span class="line">         <span class="keyword">return</span> Currency(<span class="string">"GBP"</span>, <span class="number">0.6201</span>);</span><br><span class="line">      <span class="keyword">case</span> CAD:</span><br><span class="line">         <span class="keyword">return</span> Currency(<span class="string">"CAD"</span>, <span class="number">1.1150</span>);</span><br><span class="line">      <span class="keyword">case</span> AUD:</span><br><span class="line">         <span class="keyword">return</span> Currency(<span class="string">"AUD"</span>, <span class="number">1.1378</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">return</span> Currency(<span class="string">"USD"</span>, <span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CurrencyFactory.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter amount in USD:"</span>;</span><br><span class="line">    <span class="keyword">double</span> amount;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; amount;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter currency to convert to (ECU/GBP/CHF/JPY): "</span>;</span><br><span class="line">    <span class="built_in">string</span> symbol;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; symbol;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> convertedAmount = <span class="number">0.0</span>;</span><br><span class="line">    Currency currency = CurrencyFactory::Instance()-&gt;CreateCurrency(symbol);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; currency.ConvertFromUSD(amount) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>Classes related by <code>inheritance</code> form a hierachy consisting of base and derived classes. The <code>derived</code> class inherit some members from the base class subject to protection level restrictions, and may extend/override implementation of member functions in the base class.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">string</span> name_;</span><br><span class="line">    <span class="built_in">string</span> address_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span> <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> school_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><img src="cpp-review-Screen Shot 2019-05-09 at 2.34.31 PM.png" alt="Screen Shot 2019-05-09 at 2.34.31 PM.png"></p><h2 id="Virtual"><a href="#Virtual" class="headerlink" title="Virtual"></a>Virtual</h2><p>Different derived classes may inplement member functions from the base class differently. The base class uses <code>virtual</code> keyword to indicate a member function that may be specialized by derived classes.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Method2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Method3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span></span>; <span class="comment">// specializes Method1()</span></span><br><span class="line">    <span class="comment">// uses default implementation of Method2()</span></span><br><span class="line">    <span class="comment">// can NOT specialize Method3()</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="Abstract-Class"><a href="#Abstract-Class" class="headerlink" title="Abstract Class"></a>Abstract Class</h2><p>The base class <code>has to</code> either provide a default implementation for that function or declare it <code>pure virtual</code>. If a class has one or more pure virtual function, it is called an <code>abstract class</code> or <code>interface</code>. An abstract class cannot be instantiated.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// this derived is also an abstract</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="Virtual-Destructor"><a href="#Virtual-Destructor" class="headerlink" title="Virtual Destructor"></a>Virtual Destructor</h2><p>When we delete a derived class we should execute both the derived class destructor and the base class destructor. A <code>virtual base class destructor</code> is needed to make sure the destructors are called properly when a derived class object is <code>deleted through a pointer to a base class</code>.</p><p>If we delete a derived class object through a pointer to a base class when the base class destructor is non-virtual, the result is <code>undefined</code>.</p><h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><p>The types related by inheritance are known as <code>polymorphic</code>. types. We can use polymorphic types interchangeably.</p><p>We can use a <code>pointer</code> or a <code>reference</code> to a base class object to point to an object of a derived class – this is known as the <code>Liskov Substitution Principle</code> (LSP). This allows us to write code without needing to know the dynamic type of an object</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BankAccount* acc1 = <span class="keyword">new</span> Savings();</span><br><span class="line">acc1-&gt;ApplyInterest(); <span class="comment">// ApplyInterest() on the Savings object</span></span><br><span class="line"></span><br><span class="line">BankAccount* acc2 = <span class="keyword">new</span> Checking();</span><br><span class="line">acc2-&gt;ApplyInterest(); <span class="comment">// ApplyInterest() on the Checking object</span></span><br></pre></td></tr></table></figure><p>We can write one function which applies to all account types.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateAccount</span><span class="params">(BankAccount* acc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    acc-&gt;ApplyBankingFees();</span><br><span class="line">    acc-&gt;ApplyInterest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateAccount</span><span class="params">(BankAccount&amp; acc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    acc.ApplyBankingFees();</span><br><span class="line">    acc.ApplyInterest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Standard-Template-Library-STL"><a href="#Standard-Template-Library-STL" class="headerlink" title="Standard Template Library (STL)"></a>Standard Template Library (STL)</h1><h2 id="Sequential-Container"><a href="#Sequential-Container" class="headerlink" title="Sequential Container"></a>Sequential Container</h2><h3 id="std-array"><a href="#std-array" class="headerlink" title="std::array"></a>std::array</h3><p>The STL array class from offers a more efficient and reliable alternative for C-style arrays, where size is known and we do not have to pass size of array as separate parameter.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="built_in">array</span> &lt;<span class="keyword">int</span>&gt; a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">a1.front();</span><br><span class="line">a1.back();</span><br><span class="line">a1.size();</span><br><span class="line">a1.at(<span class="number">1</span>);</span><br><span class="line">get&lt;<span class="number">1</span>&gt;(a1);</span><br></pre></td></tr></table></figure></p><h3 id="std-vector"><a href="#std-vector" class="headerlink" title="std::vector"></a>std::vector</h3><p>Vectors are the stored contiguously same as <em>dynamic arrays</em> with the ability to resize itself automatically when an element is inserted or deleted. Vector size is double whenever half is reached.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"></span><br><span class="line">v1.begin();</span><br><span class="line">v1.end();</span><br><span class="line">v1.size();</span><br><span class="line"></span><br><span class="line">v1.push_back(); <span class="comment">// pushes the elements into a vector from the back</span></span><br><span class="line">v1.pop_back(); <span class="comment">// removes the elements from a vector from the back.</span></span><br><span class="line"></span><br><span class="line">v1.insert(i); <span class="comment">// inserts new elements before the element at the specified position</span></span><br><span class="line">v1.assign(i); <span class="comment">// assigns new value to the vector elements by replacing old ones</span></span><br><span class="line">v1.erase(i); <span class="comment">// removes elements from a container from the specified position or range</span></span><br></pre></td></tr></table></figure></p><h3 id="std-list"><a href="#std-list" class="headerlink" title="std::list"></a>std::list</h3><p>Different from arrays and vectors, A <strong><em>list</em></strong> is  a sequential container that allows non-contiguous memory allocation.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    l1.front(); <span class="comment">// returns the value of the first element</span></span><br><span class="line">    l1.back(); <span class="comment">// returns the value of the last element</span></span><br><span class="line"></span><br><span class="line">    l1.push_front(i); <span class="comment">// adds a new element ‘i’ at the beginning of the list</span></span><br><span class="line">    l1.push_back(i); <span class="comment">// adds a new element ‘i’ at the back of the list</span></span><br><span class="line"></span><br><span class="line">    l1.pop_front(); <span class="comment">// removes the first element and reduces list size by 1</span></span><br><span class="line">    l1.pop_back(); <span class="comment">// removes the last element and reduces list size by 1</span></span><br><span class="line"></span><br><span class="line">    l1.begin(); <span class="comment">// returns an iterator pointing to the first element of the list</span></span><br><span class="line">    l1.end(); <span class="comment">// returns an iterator pointing to the last element of the list    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="std-string"><a href="#std-string" class="headerlink" title="std::string"></a>std::string</h3><p>The STL string class stores the characters as a sequence of bytes, allowing access to single byte character. Any string is terminated by a <code>\0</code>, so the string <code>foo</code> actually stores four characters.</p><h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><p>The use <code>sizeof()</code> to return the size of an array in bytes. Use <code>.size()</code> member function to return the number of elements in a STL container.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The size of a: "</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The size of b: "</span> &lt;&lt; <span class="keyword">sizeof</span>(b) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The size of b: "</span> &lt;&lt; b.size() &lt;&lt; <span class="string">" elements"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The size of a: <span class="number">20</span> bytes</span><br><span class="line">The size of b: <span class="number">24</span> bytes</span><br><span class="line">The size of b: <span class="number">5</span> elements</span><br></pre></td></tr></table></figure><h2 id="Associative-Container"><a href="#Associative-Container" class="headerlink" title="Associative Container"></a>Associative Container</h2><h3 id="std-set"><a href="#std-set" class="headerlink" title="std::set"></a>std::set</h3><p>Sets are an associative container where each element is unique. The value of the element cannot be modified once it is added to the set.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    s1.begin();</span><br><span class="line">    s1.end();</span><br><span class="line">    s1.size();</span><br><span class="line"></span><br><span class="line">    s1.insert(i);</span><br><span class="line">    s1.erase(i);</span><br><span class="line">    s1.find(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="std-map"><a href="#std-map" class="headerlink" title="std::map"></a>std::map</h3><p>A <code>std::map</code> sorts its elements by the keys.</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>The STL provides implementations of some widely used algorithms.</p><ul><li>&lt;<strong><em>algorithms</em></strong>&gt; <a href="https://docs.microsoft.com/en-us/cpp/standard-library/algorithm?view=vs-2019" target="_blank" rel="noopener">header</a>: sorting, searching, copying, modifying elements</li><li>&lt;<strong><em>numeric</em></strong>&gt; <a href="http://www.cplusplus.com/reference/numeric/" target="_blank" rel="noopener">header</a>: numeric operation</li></ul><h3 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values&#123;<span class="number">10</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="comment">//sort takes a range</span></span><br><span class="line">    sort(values.begin(), values.end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values&#123;<span class="number">10</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="comment">//binary_search takes a range and a value</span></span><br><span class="line">    <span class="keyword">bool</span> found = binary_search(values.begin(), values.end(), <span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values1&#123; <span class="number">10</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    <span class="comment">//destination</span></span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; values2;</span><br><span class="line">    copy(values1.begin(), values1.end(),  <span class="comment">//input range</span></span><br><span class="line">        back_inserter(values2));         <span class="comment">//output iterator</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values&#123; <span class="number">10</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    replace(values.begin(), values.end(),  <span class="comment">//range</span></span><br><span class="line">            <span class="number">1</span>,                             <span class="comment">//old value</span></span><br><span class="line">            <span class="number">111</span>);                          <span class="comment">//new value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Numeric"><a href="#Numeric" class="headerlink" title="Numeric"></a>Numeric</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2&#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> r1 = accumulate(v1.begin(), v1.end(), <span class="number">0</span>);  <span class="comment">//range</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r2 = inner_product(v1.begin(), v1.end(),</span><br><span class="line">                           v2.begin(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Complexity-Comparison"><a href="#Complexity-Comparison" class="headerlink" title="Complexity Comparison"></a>Complexity Comparison</h3><p><img src="cpp-review-complexity.png" alt="complexity.png"></p><h2 id="Smart-Pointer"><a href="#Smart-Pointer" class="headerlink" title="Smart Pointer"></a>Smart Pointer</h2><h3 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h3><p>A <code>unique pointer</code> takes unique ownership in its pointed <code>object</code>. The unique pointer delete the object they managed either when the unique pointer is destroyed or when the object’s value changes.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Option&gt; sp(<span class="keyword">new</span> Option());</span><br><span class="line"><span class="comment">// initates a smart pointer (or through reset: sp.resert(Option()).)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Option&gt; sp2(sp);</span><br><span class="line"><span class="comment">// error: does not allow two reference (sp, sp2) to the same object (new Option());</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Option&gt; sp2(<span class="built_in">std</span>::move(sp));</span><br><span class="line"><span class="comment">// now sp is destroyed and sp2 takes ownership of the Option object</span></span><br><span class="line"></span><br><span class="line">sp2-&gt;getPrice();</span><br><span class="line"><span class="comment">// smart pointer can be used as regular pointer</span></span><br></pre></td></tr></table></figure><h3 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h3><p>The <code>shared pointer</code> counts the reference to its pointed object and can store and pass a reference beyond the scope of a function. In OOP, the share pointer is used to store a pointer as a member variable and can be used to reference value outside the scope of the class.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::share_ptr&lt;Option&gt; sp2;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::share_ptr&lt;Option&gt; sp(<span class="keyword">new</span> Option());</span><br><span class="line">    sp2=sp;</span><br><span class="line">&#125;</span><br><span class="line">sp2-&gt;getPrice();</span><br><span class="line"><span class="comment">// the Option object is not deleted after local scope ends</span></span><br></pre></td></tr></table></figure><p>Creating a vector of shared_ptr:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Option&gt;&gt; option_list;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    option_list.push_back(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Option&gt;(<span class="keyword">new</span> Option(i)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="std-weak-ptr"><a href="#std-weak-ptr" class="headerlink" title="std::weak_ptr"></a>std::weak_ptr</h3><p>A <code>weak_ptr</code> works the same as <code>shared pointer</code>, but will not increment the reference count.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::weak_ptr&lt;Option&gt; sp2;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::share_ptr&lt;Option&gt; sp(<span class="keyword">new</span> Option());</span><br><span class="line">    sp2=sp;</span><br><span class="line">&#125;</span><br><span class="line">sp2-&gt;getPrice(); <span class="comment">// error! the Option object does not exist beyond scope.</span></span><br></pre></td></tr></table></figure></p><h1 id="Parallel-Processing"><a href="#Parallel-Processing" class="headerlink" title="Parallel Processing"></a>Parallel Processing</h1><h2 id="Threading"><a href="#Threading" class="headerlink" title="Threading"></a>Threading</h2><p>A <code>thread</code> is a small sequence of programmed instruction and is usually a component of a <code>process</code>. <code>Multi-threading</code> can exist within one process, executing <code>concurrently</code> and share resources such as memory, while processes do not share their resources.</p><p>The <code>std::thread</code> class in c++ supports multi-threading, and can be initiated to represent a single thread. We need to pass a callable object (function pointer, function, or lambda) to the constructor of the std::thread class. We use the <code>std::thread.join()</code> method to wait for the copmletion of a thread.</p><p>Here we initiate two threads. Both threads share memory and attempt to modify the <code>balance</code> variable at the same time which lead to concurrency issue.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> balance = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// t1 starts</span></span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">([&amp;balance] &#123;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++) &#123;balance++;&#125;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// t2 starts</span></span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">([&amp;balance] &#123;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++) &#123;balance--;&#125;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.join(); <span class="comment">// the main() waits here until t1 completes</span></span><br><span class="line">    t2.join(); <span class="comment">// the main() waits here until t2 completes</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; balance &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"END OF CODE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">153258</span></span><br><span class="line">END OF CODE</span><br></pre></td></tr></table></figure><p>We introduce the an <code>mutex</code>, or mutual exclusive, object, which contains a unique id for the resources allocated to the program. A thread can <code>lock</code> the resource by a <code>std::mutex.lock()</code> method, which prevent other thread from sharing the resource until the mutex becomes unlocked.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> balance = <span class="number">0</span>;</span><br><span class="line">    mutex m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// t1 starts</span></span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">([&amp;balance, &amp;m] &#123;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        m.lock();</span></span></span><br><span class="line"><span class="function"><span class="params">        balance++;</span></span></span><br><span class="line"><span class="function"><span class="params">        m.unlock();</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// t2 starts</span></span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">([&amp;balance, &amp;m] &#123;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        m.lock();</span></span></span><br><span class="line"><span class="function"><span class="params">        balance--;</span></span></span><br><span class="line"><span class="function"><span class="params">        m.unlock();</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.join(); <span class="comment">// the main() waits here until t1 completes</span></span><br><span class="line">    t2.join(); <span class="comment">// the main() waits here until t2 completes</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; balance &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"END OF CODE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">END OF CODE</span><br></pre></td></tr></table></figure><h2 id="Condition-Variable"><a href="#Condition-Variable" class="headerlink" title="Condition Variable"></a>Condition Variable</h2><p>A <code>condition variable</code> is an object that can block the calling thread until notified to resume. It uses a <code>unique_lock</code> (over a <code>mutex</code>) to lock the thread when one of its <code>wait</code> functions is called.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">mutex m;</span><br><span class="line">condition_variable cv;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ready = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">bool</span> processed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lk(m); <span class="comment">// own the mutex</span></span><br><span class="line">    cv.wait(lk, []&#123;<span class="keyword">return</span> ready;&#125;); <span class="comment">// wait until main() sends data</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; ++k) &#123;</span><br><span class="line">        v.push_back(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    processed = <span class="literal">true</span>;</span><br><span class="line">    lk.unlock(); <span class="comment">// manual unlocking is done before notifying</span></span><br><span class="line">    cv.notify_one();</span><br><span class="line">    <span class="comment">// unblocks one of the threads currently waiting for this condition</span></span><br><span class="line">    <span class="comment">// if no threads are waiting, the function does nothing</span></span><br><span class="line">    <span class="comment">// if more than one threads are waiting, it is unspecified which will be selected</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t</span><span class="params">(make_vector)</span></span>;</span><br><span class="line"></span><br><span class="line">    ready = <span class="literal">false</span>;</span><br><span class="line">    processed = <span class="literal">false</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"main() signals ready for processing\n"</span>;</span><br><span class="line">        ready = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cv.notify_one();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lk(m); <span class="comment">// own the mutex</span></span><br><span class="line">        cv.wait(lk, []&#123;<span class="keyword">return</span> processed;&#125;); <span class="comment">// wait for cv.notify_one</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"back to main(), vector is processed\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main() signals ready <span class="keyword">for</span> processing</span><br><span class="line">back to main(), vector is processed</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><p><br><br><br></p><p>Reference:</p><ul><li>FINM 322 Lecture Notes, Chanaka Liyanaarachchi, the University of Chicago</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++ is a &lt;code&gt;complied&lt;/code&gt; （vs interpreted: python), &lt;code&gt;general-purpose&lt;/code&gt; (vs domain-specific: HTML) programming language cre
      
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Notes on Algorithm, MIT Open Course</title>
    <link href="http://jackliu234.com/2019/04/intro-to-algorithm/"/>
    <id>http://jackliu234.com/2019/04/intro-to-algorithm/</id>
    <published>2019-04-03T04:00:00.000Z</published>
    <updated>2019-08-23T13:02:26.185Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="Notation"><a href="#Notation" class="headerlink" title="Notation"></a>Notation</h1><p>Define <script type="math/tex">T(n)</script> as the <em>worst case</em> running time for input size n</p><ol><li><strong><em>Upper Bound</em></strong> we say <script type="math/tex">T(n)</script> is <script type="math/tex">O(g(n))</script> if <script type="math/tex">0\leq T(n)\leq c_1g(n)</script>, for some <script type="math/tex">c_1</script>.</li><li><strong><em>Lower Bound</em></strong> we say <script type="math/tex">T(n)</script> is <script type="math/tex">\Omega (g(n))</script> if <script type="math/tex">0\leq c_2g(n)\leq T(n)</script>, for some <script type="math/tex">c_2</script>.</li><li><strong><em>Order</em></strong>: we say <script type="math/tex">T(n)</script> si <script type="math/tex">\Theta(g(n))</script> iff <script type="math/tex">T(n)</script> is <script type="math/tex">O(g(n))</script> and  <script type="math/tex">\Omega (g(n))</script>.</li></ol><h1 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h1><h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><p>Binary search is a <script type="math/tex">O(logn)</script> algorithm that finds the target value from a sorted array by comparing recursively with the middle elements.</p><p>Given input size <script type="math/tex">n=1024</script>, the worst-case time of the search is:</p><script type="math/tex; mode=display">T(n) =\log_{2}1024 = \dfrac{log_e1024}{log_e2} = O(logn)</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span><span class="params">(arr, start, end, element)</span>:</span></span><br><span class="line">    mid = (start + end) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> start &gt; end:</span><br><span class="line">        print(<span class="string">"Element not found"</span>)</span><br><span class="line">    <span class="keyword">elif</span> element &gt; arr[mid]:</span><br><span class="line">        binarySearch(arr, mid + <span class="number">1</span>, end, element)</span><br><span class="line">    <span class="keyword">elif</span> element &lt; arr[mid]:</span><br><span class="line">        binarySearch(arr, start, mid - <span class="number">1</span>, element)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Element is found at index"</span>, str(mid))</span><br></pre></td></tr></table></figure><p>Or simply use the <code>binary_search</code> function in the C++ STL <algorithm>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values&#123;<span class="number">10</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="keyword">bool</span> found = binary_search(values.begin(), values.end(), <span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></algorithm></p><h2 id="Binary-Search-Tree-BST"><a href="#Binary-Search-Tree-BST" class="headerlink" title="Binary Search Tree (BST)"></a>Binary Search Tree (BST)</h2><p>BST keeps their keys in sorted order, so that looking up values can use the principle of binary search. When looking for a key in a tree (or a place to insert a new key), the comparison traverse the tree from root to leaf, therefore each comparison allows the operations to skip about half of the tree.</p><p>BST supports insert, min, delete, and rank operations in <script type="math/tex">O(h)</script> time, where h is the height of the tree taking values between <script type="math/tex">log(n)</script> and <script type="math/tex">n</script>.</p><ul><li>Faster than the linear time required to find items by key in an <strong>unsorted array</strong>.</li><li>Slower than the <strong>hash tables</strong>.</li></ul><p><strong>Balanced BST</strong> maintains <script type="math/tex">h = log(n)</script>. For example, AVL trees are balanced BST which stores and requires heights of left and right children of every node to differ by at most <script type="math/tex">\pm1</script>. It contains inherently a data structure augmentation procedure.</p><h1 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h1><h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><p>Insertion sort is a <script type="math/tex">O(n^2)</script> sorting algorithm that builds the final sorted array in-place one item at a time:</p><ol><li>iterate up the array</li><li>remove one element from the input data</li><li>find the location it belongs within the sorted list</li><li>insert it there</li></ol><h2 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h2><p>Selection sort is a <script type="math/tex">O(n^2)</script> sorting algorithm.</p><ol><li>divide the input list into two parts: sorted (empty initially) and unsorted (input array).</li><li>find the smallest element in the unsorted sublist</li><li>exchange it with the leftmost unsorted element</li><li>move the sublist boundaries one element to the right.</li></ol><h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2><p>Quick sort is a average <script type="math/tex">O(nlogn)</script> sorting algorithm.</p><ol><li>Pick an element, called a pivot, from the array.</li><li><strong><em>Partitioning</em></strong> reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position.</li><li>Recursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values.</li></ol><h2 id="Heap-Sort"><a href="#Heap-Sort" class="headerlink" title="Heap Sort"></a>Heap Sort</h2><p>A heap data structure is a specialized tree-based data structure which is essentially an almost complete tree that satisfies the <strong>heap property</strong>:</p><ul><li>if P is a parent node of C, then the key (the value) of P is either:<ul><li>(in a max heap) greater than or equal to the key of C</li><li>(in a min heap) less than or equal to the key of C.</li></ul></li></ul><p>Heap sort is an improved selection sort with <script type="math/tex">O(nlogn)</script>, using a <strong>max heap</strong> data structure rather than a linear-time search to find the maximum. It is invented by J. W. J. Williams in 1964.</p><ul><li>Heap sort is slower in practice than a well-implemented quicks ort, despite having a more favorable worst-case <script type="math/tex">O(nlogn)</script> compared to the <script type="math/tex">O(n^2)</script> of quick sort.</li></ul><h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><p>Merge sort is a <script type="math/tex">O(nlogn)</script> algorithm that uses a divide/conquer/combine paradigm to scale down the complexity and scale up the efficiency of the Insertion Sort routine. It is invented by <strong>John von Neumann</strong> in 1945.</p><p>With merge sort the running time scales “nearly linearly” with <script type="math/tex">O(nlogn)</script>:</p><script type="math/tex; mode=display">\begin{align}T(n) &= \underset{divide}{C} + \underset{recursion}{2T(n/2)} + \underset{merge}{Cn} \\&= \Theta(nlogn)\end{align}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Sort list A into order, and return result.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n = len(A)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line">    mid = n//<span class="number">2</span>     <span class="comment"># floor division</span></span><br><span class="line">    L = merge_sort(A[:mid])</span><br><span class="line">    R = merge_sort(A[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(L,R)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(L,R)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Given two sorted sequences L and R, return their merge.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    answer = []</span><br><span class="line">    <span class="keyword">while</span> i&lt;len(L) <span class="keyword">and</span> j&lt;len(R):</span><br><span class="line">        <span class="keyword">if</span> L[i]&lt;R[j]:</span><br><span class="line">            answer.append(L[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            answer.append(R[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i&lt;len(L):</span><br><span class="line">        answer.extend(L[i:])</span><br><span class="line">    <span class="keyword">if</span> j&lt;len(R):</span><br><span class="line">        answer.extend(R[j:])</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><br><br><br></p><p>Reference:</p><ul><li><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-spring-2008/index.htm" target="_blank" rel="noopener">Introduction To Algorithm</a>, MIT Open Course</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Notation&quot;&gt;&lt;a href=&quot;#Notation&quot; class=&quot;headerlink&quot; title=&quot;Notation&quot;&gt;&lt;/a&gt;Notation&lt;/h1&gt;&lt;p&gt;Define &lt;script type=&quot;math/te
      
    
    </summary>
    
    
    
      <category term="Tech" scheme="http://jackliu234.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Peru &amp; Bolivia</title>
    <link href="http://jackliu234.com/2019/04/peru-bolivia/"/>
    <id>http://jackliu234.com/2019/04/peru-bolivia/</id>
    <published>2019-04-01T04:00:00.000Z</published>
    <updated>2019-09-13T23:03:18.563Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Pictures I took in Peru recently with my dated (but still awesome) Nikon D5100.<br><img src="peru-fullsizeoutput_2b8f.jpeg" alt="fullsizeoutput_2b8f.jpeg"></p><p><br></p><p>Fogs quickly filling the entire mountain valley as we arrived at Machu Picchu early morning.<br><img src="peru-fullsizeoutput_2985.jpeg" alt="fullsizeoutput_2985.jpeg"></p><p><br></p><p>This was a nice elevated view of Cusco, the capital of the once powerful Inca Empire.<br><img src="peru-fullsizeoutput_2adc.jpeg" alt="fullsizeoutput_2adc.jpeg"></p><p><br></p><p>This photogragh was taken from the inside of the Coricancha at Cusco. The Coricancha had been the most important temple in the Inca Empire.<br><img src="peru-fullsizeoutput_2a49.jpeg" alt="fullsizeoutput_2a49.jpeg"></p><p><br></p><p>After leaving Cusco, we hopped on an overnight bus off to La Paz, taking a stop and spending the night on the beautiful lake of Titicaca.<br><img src="peru-fullsizeoutput_2a50.jpeg" alt="fullsizeoutput_2a50.jpeg"></p><p><br></p><p>We slept on an island built entirely on dry reeds. The submerged part of the reeds is actually edible and tastes very crisp.<br><img src="peru-DSC_2800.jpg" alt="DSC_2800.jpg"></p><p><br></p><p>A wasted train yards in Uyuni, Bolivia.<br><img src="peru-fullsizeoutput_2b86.jpeg" alt="fullsizeoutput_2b86.jpeg"></p><p><br></p><p>The pinnacle of the trip, the mirror of the sky - a salt lake with a thin layer of water only at rain season that reflects everything from sky to the horizon. Incredible view.<br><img src="peru-fullsizeoutput_2ac8.jpeg" alt="fullsizeoutput_2ac8.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Pictures I took in Peru recently with my dated (but still awesome) Nikon D5100.&lt;br&gt;&lt;img src=&quot;peru-fullsizeoutput_2b8f.j
      
    
    </summary>
    
    
    
      <category term="Travel" scheme="http://jackliu234.com/tags/Travel/"/>
    
  </entry>
  
</feed>
